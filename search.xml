<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javascript算法</title>
    <url>/posts/9505ccb9.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端面试的过程中我们必须要会的一个技能就是算法，一般来说面试中高级前端工程师的时候会要求会算法，至于校招考不考算法我就不知道了，话不多说就让我们开始吧！</p>
<span id="more"></span>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只执行一次</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">i + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环中的代码执行了n次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="O-n-O-n-O-n-2"><a href="#O-n-O-n-O-n-2" class="headerlink" title="O(n) * O(n) = O(n^2)"></a>O(n) * O(n) = O(n^2)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n*n = n^2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  i *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>简述：</p>
<p>1、一个函数，用大O表示，比如O(1)、O(N)、O(n^2)……</p>
<p>2、算法唉运行过程中临时占用存储空间大小的量度</p>
<h3 id="O-1-1"><a href="#O-1-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">i + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  list.push(i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 矩阵</span></span><br><span class="line"><span class="keyword">const</span> matrix = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  matrix.push([]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">    matrix[i].push(j);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>栈是什么？</p>
<ol>
<li>一个<code>后进先出</code>的数据结构</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = [];</span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> item1 = stack.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stack, item1)</span><br><span class="line"><span class="comment">// [1], 2</span></span><br></pre></td></tr></table></figure>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>十进制转二进制、判断z字符串的括号是否有效、函数调用堆栈</li>
</ol>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串-s-，判断字符串是否有效。"><a href="#给定一个只包括-‘-‘，’-’，’-‘，’-’，’-‘，’-’-的字符串-s-，判断字符串是否有效。" class="headerlink" title="给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。"></a>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</h4><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="符合后进先出考虑用栈"><a href="#符合后进先出考虑用栈" class="headerlink" title="符合后进先出考虑用栈"></a>符合<code>后进先出</code>考虑用<code>栈</code></h4><ol>
<li>新建一个栈</li>
<li>扫描字符串，遇左括号入栈，遇到和栈顶括号类型匹配的有括号出栈，类型不符合之间判定为不合法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isValid = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s % <span class="number">2</span> === <span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">  <span class="keyword">const</span> stack = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = s[i];</span><br><span class="line">    <span class="keyword">if</span> (c === <span class="string">&#x27;(&#x27;</span> || c === <span class="string">&#x27;[&#x27;</span> || c === <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">      stack.push(c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> t = stack[stack.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (t === <span class="string">&#x27;(&#x27;</span> &amp;&amp; c === <span class="string">&#x27;)&#x27;</span>) ||</span><br><span class="line">        (t === <span class="string">&#x27;[&#x27;</span> &amp;&amp; c ===<span class="string">&#x27;]&#x27;</span>) ||</span><br><span class="line">        (t === <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; c === <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        stack.pop();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js中的函数调用堆栈"><a href="#js中的函数调用堆栈" class="headerlink" title="js中的函数调用堆栈"></a>js中的函数调用堆栈</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fn2();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fn3();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn3 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn3&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure>
<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>链表是什么？</p>
<ol>
<li>多个元素组成的列表</li>
<li>元素存储不连续，用next指针连在一起</li>
</ol>
<h2 id="数组VS链表"><a href="#数组VS链表" class="headerlink" title="数组VS链表"></a>数组VS链表</h2><ol>
<li>数组：增删非首尾元素时往往需要移动元素</li>
<li>链表：增删首尾元素，不需要移动元素，只需要更改next指向即可</li>
</ol>
<h2 id="JS中的链表"><a href="#JS中的链表" class="headerlink" title="JS中的链表"></a>JS中的链表</h2><ol>
<li>js中没有链表</li>
<li>可以用Object模拟链表</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">val</span>: <span class="string">&#x27;a&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123; <span class="attr">val</span>: <span class="string">&#x27;b&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123; <span class="attr">val</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> d = &#123; <span class="attr">val</span>: <span class="string">&#x27;d&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">a.next = b;</span><br><span class="line">b.next = c;</span><br><span class="line">c.next = d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表</span></span><br><span class="line"><span class="keyword">let</span> self = a;</span><br><span class="line"><span class="keyword">while</span> (self) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(self.val);</span><br><span class="line">  self = self.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="keyword">const</span> e = &#123; <span class="attr">val</span>: <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">c.next = e;</span><br><span class="line">e.next = d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">c.next = d;</span><br></pre></td></tr></table></figure>
<h3 id="leetCode-237-删除链表中的节点"><a href="#leetCode-237-删除链表中的节点" class="headerlink" title="leetCode 237 删除链表中的节点"></a>leetCode 237 删除链表中的节点</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    node.val = node.next.val;</span><br><span class="line">    node.next = node.next.next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="LeetCode-206-反转链表"><a href="#LeetCode-206-反转链表" class="headerlink" title="LeetCode 206 反转链表"></a>LeetCode 206 反转链表</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ol>
<li>反转两个节点：将<code>n+1</code>的<code>next</code>指向<code>n</code></li>
<li>反转多个节点：双指针遍历链表<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> l1 = head;</span><br><span class="line">    <span class="keyword">let</span> l2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1)&#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = l1.next;</span><br><span class="line">        l1.next = l2;</span><br><span class="line">        l2 = l1;</span><br><span class="line">        l1 = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>从输入URL到页面加载的全过程</title>
    <url>/posts/e4200e70.html</url>
    <content><![CDATA[<h1 id="从输入URL到页面加载的全过程"><a href="#从输入URL到页面加载的全过程" class="headerlink" title="从输入URL到页面加载的全过程"></a>从输入URL到页面加载的全过程</h1><ol>
<li>首先在浏览器中输入<code>url</code></li>
<li><code>查找缓存</code>：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。</li>
</ol>
<ul>
<li><code>浏览器缓存</code>：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li>
<li><code>操作系统缓存</code>：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统，获取操作系统的记录（保存最近的DNS查询缓存）；</li>
<li><code>路由器缓存</code>： 如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li>
<li><code>lsp缓存</code>：若上述均失败，继续向ISP搜索。</li>
</ul>
<span id="more"></span>
<ol>
<li><code>DNS域名解析</code>：浏览器向DNS服务器发起请求，解析该url中的域名对应的IP地址.DNS服务器是基于UDP的，因此会用到UDP协议</li>
<li><code>建立TCP链接</code>：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP链接</li>
<li><code>发起HTTP请求</code>：浏览器发起读取文件的HTTP请求，该请求报文作为TCP三次握手的第三次数据发送给给服务器</li>
<li><code>服务器响应请求并返回结果</code>：服务器对浏览器的请求作出响应，并把对应的html文件发送给浏览器</li>
<li><code>关闭TCP链接</code>：通过四次回收释放TCP链接</li>
<li><code>浏览器渲染</code>：客户端（浏览器）解析HTML文件并渲染出来，浏览器接收到数据包后的解析流程为：</li>
</ol>
<ul>
<li>构建DOM树：词法分析然后解析成DOM树（don tree），是由DOM元素及属性节点组成，树的根是document对象</li>
<li>构建CSS规则树：生成CSS规则树（CSS Rule Tree）</li>
<li>构建render树：web浏览器会将DOM和CSSOM结合，并构建出渲染树（render Tree）</li>
<li>布局（layout）：计算出每个节点在屏幕中的位置</li>
<li>绘制（Painting）：遍历render树，并使用 UI后端层绘制每个节点。</li>
</ul>
<ol start="9">
<li>js引擎解析过程： 调用js引擎执行js代码（js的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链，回收机制等）</li>
<li>创建<code>window</code>对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于<code>window</code>的属性和方法，而<code>DOM Tree</code>也会映射在<code>window</code>的<code>document</code>对象上。当关闭网页或者浏览器时，全局执行环境会被销毁</li>
<li>加载文件：完成js引擎分析它的语法和词法是否合法，如果合法则进入预编译</li>
<li>预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为<code>window</code>的属性加入到window对象中，并给变量赋值为<code>undefined</code>；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给它，（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方已经在es6中解决了，函数提升还是存在的</li>
<li>解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在es5非严格模式下这个变量会成为<code>window</code>的一个属性，也就是成为全局变量。string int这样的就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。js作用域其实就是这样的执行机制实现的<h1 id="浏览器的缓存机制-强制缓存-amp-amp-协商缓存"><a href="#浏览器的缓存机制-强制缓存-amp-amp-协商缓存" class="headerlink" title="浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存"></a>浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h1></li>
</ol>
<ul>
<li>浏览器每次发起请求，都会<code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li>
<li>浏览器每次拿到返回的请求结果都会<code>将该结果和缓存标识存入浏览器缓存中</code><h1 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h1><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程</code>。当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 <code>Expires 和 Cache-Control</code>，其中<code>Cache-Control</code>优先级比<code>Expires</code>高。<br>强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</li>
</ul>
<ol>
<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li>
<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li>
<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li>
</ol>
<h1 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h1><p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code>，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since 和 Etag / If-None-Match，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高</code>。协商缓存主要有以下两种情况：</p>
<ol>
<li>协商缓存生效，返回304</li>
<li>协商缓存失效，返回200和请求结果结果</li>
</ol>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>配置eslint和less module</title>
    <url>/posts/ddaf174f.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前主要使用的脚手架是<code>create-react-app</code>这个脚手架，因为不想使用<code>npm eject</code>将脚手架隐藏的配置文件暴露出来，那么有没有其他办法实现一些基本的配置呢？</p>
<p>主要配置<code>eslint</code>统一团队内的<code>代码风格</code>，还有呢就是使用<code>less module</code>，修改项目的主题色，这些配置。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p><strong>安装antd提供的craco</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>然后修改<code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">-   <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;react-scripts start&quot;</span>,</span><br><span class="line">-   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;react-scripts build&quot;</span>,</span><br><span class="line">-   <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;react-scripts test&quot;</span>,</span><br><span class="line">+   <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;craco start&quot;</span>,</span><br><span class="line">+   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;craco build&quot;</span>,</span><br><span class="line">+   <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;craco test&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二步-创建craco-config-js"><a href="#第二步-创建craco-config-js" class="headerlink" title="第二步  创建craco.config.js"></a>第二步  创建craco.config.js</h2><p><strong>配置less module</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add less less-loader --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在craco.config.js添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; POSTCSS_MODES &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@craco/craco&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loaderNameMatchers = <span class="function">(<span class="params">rule, loaderName</span>) =&gt;</span> rule &amp;&amp; rule.loader &amp;&amp; <span class="keyword">typeof</span> rule.loader === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&amp;&amp; (rule.loader.indexOf(<span class="string">`<span class="subst">$&#123;path.sep&#125;</span><span class="subst">$&#123;loaderName&#125;</span><span class="subst">$&#123;path.sep&#125;</span>`</span>) !== -<span class="number">1</span></span><br><span class="line">|| rule.loader.indexOf(<span class="string">`@<span class="subst">$&#123;loaderName&#125;</span><span class="subst">$&#123;path.sep&#125;</span>`</span>) !== -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getLoader = <span class="function">(<span class="params">rules, matcher</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> loader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-return-assign</span></span><br><span class="line">    rules.some(<span class="function"><span class="params">rule</span> =&gt;</span> (loader = matcher(rule)</span><br><span class="line">        ? rule</span><br><span class="line">        : getLoader(rule.use || rule.oneOf || (<span class="built_in">Array</span>.isArray(rule.loader) &amp;&amp; rule.loader) || [], matcher)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loader;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">babel</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">libraryName</span>      : <span class="string">&#x27;antd&#x27;</span>,</span><br><span class="line">                    <span class="attr">libraryDirectory</span> : <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">                    <span class="attr">style</span>            : <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">postcss</span>: &#123;</span><br><span class="line">            <span class="attr">mode</span>: POSTCSS_MODES.file,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">plugin</span>: &#123;</span><br><span class="line">                <span class="attr">overrideWebpackConfig</span>: <span class="function">(<span class="params">&#123; webpackConfig &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 处理js不带hash</span></span><br><span class="line">                    <span class="comment">// eslint-disable-next-line no-param-reassign</span></span><br><span class="line">                    webpackConfig.output = <span class="built_in">Object</span>.assign(webpackConfig.output || &#123;&#125;, &#123;</span><br><span class="line">                        <span class="attr">filename</span>      : <span class="string">&#x27;static/js/[name].main.js&#x27;</span>,</span><br><span class="line">                        <span class="attr">chunkFilename</span> : <span class="string">&#x27;static/js/[name].chunk.js&#x27;</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">const</span> lessExtension = <span class="regexp">/\.less$/</span>;</span><br><span class="line">                    <span class="comment">// 处理css</span></span><br><span class="line">                    <span class="keyword">const</span> oneOfRule = webpackConfig.module.rules.find(<span class="function"><span class="params">rule</span> =&gt;</span> (</span><br><span class="line">                        <span class="keyword">typeof</span> rule.oneOf !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line">                    ));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// eslint-disable-next-line no-param-reassign</span></span><br><span class="line">                    webpackConfig.plugins = webpackConfig.plugins.map(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (plugin.constructor.name === <span class="string">&#x27;MinCssExtractPlugin&#x27;</span>) &#123;</span><br><span class="line">                            <span class="built_in">Object</span>.assign(plugin.options, &#123;</span><br><span class="line">                                <span class="attr">filename</span>      : <span class="string">&#x27;static/css/[name].css&#x27;</span>,</span><br><span class="line">                                <span class="attr">chunkFilename</span> : <span class="string">&#x27;static/css/[name].css&#x27;</span>,</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> plugin;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">const</span> appendTo = oneOfRule ? oneOfRule.oneOf : webpackConfig.module.rules;</span><br><span class="line">                    <span class="comment">// 处理less</span></span><br><span class="line">                    <span class="keyword">const</span> fileLoader = getLoader(</span><br><span class="line">                        webpackConfig.module.rules,</span><br><span class="line">                        <span class="function"><span class="params">rule</span> =&gt;</span> loaderNameMatchers(rule, <span class="string">&#x27;file-loader&#x27;</span>),</span><br><span class="line">                    );</span><br><span class="line">                    fileLoader.exclude.push(lessExtension);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> lessRules = &#123;</span><br><span class="line">                        <span class="attr">oneOf</span>: [&#123;</span><br><span class="line">                            <span class="attr">test</span> : lessExtension,</span><br><span class="line">                            <span class="attr">use</span>  : [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">loader</span>: <span class="built_in">require</span>.resolve(<span class="string">&#x27;style-loader&#x27;</span>),</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">loader</span>: <span class="built_in">require</span>.resolve(<span class="string">&#x27;css-loader&#x27;</span>),</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">loader</span>  : <span class="built_in">require</span>.resolve(<span class="string">&#x27;postcss-loader&#x27;</span>),</span><br><span class="line">                                    <span class="comment">// eslint-disable-next-line global-require</span></span><br><span class="line">                                    <span class="attr">options</span> : <span class="built_in">require</span>(<span class="string">&#x27;./postcss.config&#x27;</span>),</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">loader</span>  : <span class="built_in">require</span>.resolve(<span class="string">&#x27;less-loader&#x27;</span>),</span><br><span class="line">                                    <span class="attr">options</span> : &#123;</span><br><span class="line">                                        <span class="attr">lessOptions</span>: &#123;</span><br><span class="line">                                            <span class="attr">strictMath</span>        : <span class="literal">false</span>,</span><br><span class="line">                                            <span class="attr">javascriptEnabled</span> : <span class="literal">true</span>,</span><br><span class="line">                                            <span class="attr">modifyVars</span>        : &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#646cff&#x27;</span> &#125;,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                &#125;,</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;],</span><br><span class="line">                    &#125;;</span><br><span class="line">                    appendTo.push(lessRules);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> webpackConfig;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">webpack</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="第三步-创建postcss-config-js"><a href="#第三步-创建postcss-config-js" class="headerlink" title="第三步 创建postcss.config.js"></a>第三步 创建postcss.config.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            <span class="attr">overrideBrowserslist</span>: [<span class="string">&#x27;&gt; 0.15% in CN&#x27;</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>因为在项目中主要使用的<code>TypeScript</code>，所以还要配置一下<code>tsconfig.json</code>文件</p>
<p>我们需要新建一个<code>tsconfig.base.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch tsconfig.base.json</span><br></pre></td></tr></table></figure>

<p><strong>内容</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;lib&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;dom&quot;</span>,</span><br><span class="line">			<span class="string">&quot;dom.iterable&quot;</span>,</span><br><span class="line">			<span class="string">&quot;esnext&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;paths&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;src/*&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;src/*&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;@/*&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;src/*&quot;</span></span><br><span class="line">			]</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;noUnusedLocals&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;typeRoots&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;./node_modules/@types&quot;</span>,</span><br><span class="line">			<span class="string">&quot;./src/typings/**.d.ts&quot;</span></span><br><span class="line">		],</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;src&quot;</span></span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改tsconfig,json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;./tsconfig.base.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react-jsx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typeRoots&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;./node_modules/@types&quot;</span>,</span><br><span class="line">      <span class="string">&quot;./src/typings/**.d.ts&quot;</span> <span class="comment">// 声明全局的ts文件</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四步-配置eslint"><a href="#第四步-配置eslint" class="headerlink" title="第四步 配置eslint"></a>第四步 配置eslint</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add eslint-config-airbnb --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-config-node --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-config-standard --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-config-standard-react --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-jsx-a11y --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-node --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-promise --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-react --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-react-hooks --save</span><br><span class="line"></span><br><span class="line">yarn add eslint-plugin-standard --save</span><br></pre></td></tr></table></figure>

<p>安装完成之后，新建<code>.eslintrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch .eslintrc</span><br></pre></td></tr></table></figure>

<p><strong>.eslintrc</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;root&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;es6&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;node&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;commonjs&quot;</span>: <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;extends&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;standard&quot;</span>,</span><br><span class="line">		<span class="string">&quot;standard-react&quot;</span>,</span><br><span class="line">		<span class="string">&quot;airbnb&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;react-hooks&quot;</span>,</span><br><span class="line">		<span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;jsx&quot;</span>: <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;import/no-unresolved&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;indent&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;error&quot;</span>,</span><br><span class="line">			<span class="number">4</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;semi&quot;</span>: [</span><br><span class="line">			<span class="number">2</span>,</span><br><span class="line">			<span class="string">&quot;always&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;react/jsx-indent&quot;</span>: [</span><br><span class="line">			<span class="number">1</span>,</span><br><span class="line">			<span class="number">4</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;react/require-default-props&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;no-trailing-spaces&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;eol-last&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;key-spacing&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;error&quot;</span>,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">&quot;align&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;beforeColon&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">					<span class="attr">&quot;afterColon&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">					<span class="attr">&quot;on&quot;</span>: <span class="string">&quot;colon&quot;</span>,</span><br><span class="line">					<span class="attr">&quot;mode&quot;</span>: <span class="string">&quot;strict&quot;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;no-shadow&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react/jsx-closing-bracket-location&quot;</span>: [</span><br><span class="line">			<span class="number">0</span>,</span><br><span class="line">			<span class="string">&quot;props-aligned&quot;</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;react/jsx-indent-props&quot;</span>: [</span><br><span class="line">			<span class="number">2</span>,</span><br><span class="line">			<span class="number">4</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">&quot;no-restricted-globals&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;jsx-ally/interactive-supports-focus&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;jsx-ally/no-static-element-interactions&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;jsx-ally/click-events-have-key-events&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;jsx-ally/no-noninteractive-element-interactions&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;consistent-return&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;no-tabs&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react/sort-comp&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;max-len&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;standard/no-callback-literal&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;no-unused-expressions&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;promise/param-names&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;arrow-parens&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react/destructuring-assignment&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;class-methods-use-this&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;import/extensions&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;camelcase&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react/self-closing-comp&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react/jsx-filename-extension&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react-hooks/rules-of-hooks&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;react-hooks/exhaustive-deps&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;padding-line-between-statements&quot;</span>: [</span><br><span class="line">			<span class="string">&quot;error&quot;</span>,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">&quot;blankLine&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;prev&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;next&quot;</span>: [</span><br><span class="line">					<span class="string">&quot;if&quot;</span></span><br><span class="line">				]</span><br><span class="line">			&#125;,</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">&quot;blankLine&quot;</span>: <span class="string">&quot;always&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;prev&quot;</span>: [</span><br><span class="line">					<span class="string">&quot;block-like&quot;</span></span><br><span class="line">				],</span><br><span class="line">				<span class="attr">&quot;next&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;overrides&quot;</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">&quot;files&quot;</span>: [</span><br><span class="line">				<span class="string">&quot;**/*.ts&quot;</span>,</span><br><span class="line">				<span class="string">&quot;**/*.tsx&quot;</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;ecmaFeatures&quot;</span>: &#123;</span><br><span class="line">					<span class="attr">&quot;jsx&quot;</span>: <span class="literal">true</span></span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">&quot;project&quot;</span>: [</span><br><span class="line">					<span class="string">&quot;./tsconfig.json&quot;</span></span><br><span class="line">				]</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;spaced-comment&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;no-unused-vars&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;@typescript-eslint/no-unused-vars&quot;</span>: [</span><br><span class="line">					<span class="string">&quot;error&quot;</span></span><br><span class="line">				],</span><br><span class="line">				<span class="attr">&quot;no-undef&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;import/extensions&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;react/prop-types&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;react-hooks/rules-of-hooks&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;import/prefer-default-export&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;no-use-before-define&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;no-unused-expressions&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">				<span class="attr">&quot;@typescript-eslint/no-use-before-define&quot;</span>: [</span><br><span class="line">					<span class="string">&quot;error&quot;</span></span><br><span class="line">				]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要急，到这里还没完， 需要新建一个<code>.editorconfig</code>配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch .editorconfig</span><br></pre></td></tr></table></figure>

<p><strong>.editorconfig</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line"># all files</span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = tab</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line"></span><br><span class="line"># md files</span><br><span class="line">[*.md]</span><br><span class="line">insert_final_newline = false</span><br><span class="line">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure>

<h2 id="最后附上我的vscode中的settings-json的配置"><a href="#最后附上我的vscode中的settings-json的配置" class="headerlink" title="最后附上我的vscode中的settings.json的配置"></a>最后附上我的vscode中的settings.json的配置</h2><p><strong>settings.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;prettier.eslintIntegration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="comment">// 格式化stylus, 需安装Manta&#x27;s Stylus Supremacy插件</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertColons&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入冒号</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertSemicolons&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入分好</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertBraces&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入大括号</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertNewLineAroundImports&quot;</span>: <span class="literal">false</span>, <span class="comment">// import之后是否换行</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertNewLineAroundBlocks&quot;</span>: <span class="literal">false</span>, <span class="comment">// 两个选择器中是否换行</span></span><br><span class="line">	<span class="attr">&quot;vetur.validation.template&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;vetur.experimental.templateInterpolationService&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">&quot;fileheader.customMade&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;Description&quot;</span>: <span class="string">&quot;不积跬步，无以至千里&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Company&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Author&quot;</span>: <span class="string">&quot;林深&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Date&quot;</span>: <span class="string">&quot;Do not edit&quot;</span>, <span class="comment">// 文件创建时间(不变)</span></span><br><span class="line">		<span class="attr">&quot;LastEditors&quot;</span>: <span class="string">&quot;林深&quot;</span>, <span class="comment">// 文件最后编辑者</span></span><br><span class="line">		<span class="attr">&quot;LastEditTime&quot;</span>: <span class="string">&quot;Do not edit&quot;</span> <span class="comment">// 文件最后编辑时间</span></span><br><span class="line">&#125;,</span><br><span class="line">	<span class="attr">&quot;comment-ts.includeAuthorTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;comment-ts.includeDescriptionTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;commentTranslate.targetLanguage&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commentTranslate.multiLineMerge&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.authorName&quot;</span>: <span class="string">&quot;林深&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.includeDescriptionTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.includeAuthorTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.includeDateTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.enableHungarianNotationEvaluation&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.inferTypesFromNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;comment-ts.authorName&quot;</span>: <span class="string">&quot;林深&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;window.restoreWindows&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.commandsToSkipShell&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;psl.stepIn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;psl.stepOut&quot;</span>,</span><br><span class="line">        <span class="string">&quot;psl.stepOver&quot;</span>,</span><br><span class="line">        <span class="string">&quot;psl.sendToHostTerminal&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[typescriptreact]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class="literal">true</span>, <span class="comment">//让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">    <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;eslint.options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;extensions&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;.html&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.js&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.vue&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.jsx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.ts&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.tsx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.d.ts&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>, <span class="comment">//制表符符号eslint</span></span><br><span class="line">	<span class="attr">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line">    &#125;, <span class="comment">//保存时自动将代码按ESLint格式进行修复</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.commandsToSkipShell&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;terminalTabs.createTerminal&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;editor.fontFamily&quot;</span>:<span class="string">&quot;Menlo, Monaco, &#x27;Courier New&#x27;, monospace,Meslo LG L for Powerline&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，到这里就结束了~~</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3项目基本配置</title>
    <url>/posts/29da9d89.html</url>
    <content><![CDATA[<h2 id="配置代码格式化"><a href="#配置代码格式化" class="headerlink" title="配置代码格式化"></a>配置代码格式化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add prettier -D</span><br></pre></td></tr></table></figure>

<p>新建<code>.prettierrc</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>新建<code>.prettierignore</code>忽略格式化文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">/dist<span class="comment">/*</span></span><br><span class="line"><span class="comment">.local</span></span><br><span class="line"><span class="comment">.output.js</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/node_modules/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span>*.svg</span><br><span class="line">**<span class="comment">/*.sh</span></span><br></pre></td></tr></table></figure>

<p>配置<code>.editorconfig</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">root = <span class="literal">true</span>;</span><br><span class="line">[*] # 表示所有文件使用</span><br><span class="line">charset = <span class="string">&quot;utf-8&quot;</span>; # 设置文件字符集为 utf<span class="number">-8</span></span><br><span class="line">indent_size = <span class="number">2</span>  # 缩进大小</span><br><span class="line">indent_style = space  # 缩进分割为空格</span><br><span class="line">end_of_line = lf # 控制换行类型</span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span> #去除行首的任意空白字符</span><br><span class="line">insert_final_newline = <span class="literal">true</span> # 始终在文末插入一个新航</span><br><span class="line"></span><br><span class="line">[*.md] # 表示md文件适用以下规则</span><br><span class="line"></span><br><span class="line">max_line_length = off</span><br><span class="line">trim_trailing_whitespace = <span class="literal">false</span> </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>html-css</title>
    <url>/posts/43741ebe.html</url>
    <content><![CDATA[<h2 id="公共样式"><a href="#公共样式" class="headerlink" title="公共样式"></a>公共样式</h2><span id="more"></span>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*公共样式--开始*/</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">form</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>, select &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*&#123;<span class="attribute">box-sizing</span>: border-box;&#125;</span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft YaHei&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#232323</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  content: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tl</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tc</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tr</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ellipse</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter组件</title>
    <url>/posts/37eb6e3a.html</url>
    <content><![CDATA[<h2 id="Container组件"><a href="#Container组件" class="headerlink" title="Container组件"></a>Container组件</h2><table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>alignment</td>
<td><code>topCenter</code>：顶部居中对齐<code>topLeft</code>：顶部左对齐<code>topRight</code>：顶部右对齐<code>center</code>：水平垂直居中对齐<code>centerLeft</code>：垂直居中水平居左对齐<code>centerRight</code>：垂直居中水平居右对齐<code>bottomCenter</code>底部居中对齐<code>bottomLeft</code>：底部居左对齐<code>bottomRight</code>：底部居右对齐</td>
</tr>
<tr>
<td>decoration</td>
<td>BoxDecoration装饰器</td>
</tr>
<tr>
<td>margin</td>
<td><code>margin</code>属性是表示<code>Container</code>与外部其他组件的距离。<code>EdgeInsets.all(20.0)</code></td>
</tr>
<tr>
<td>padding</td>
<td><code>padding</code>就是<code>Container</code>的内边距，指<code>Container</code>边缘与<code>Child</code>之间的距离<code>padding:EdgeInsets.all(10.0)</code></td>
</tr>
<tr>
<td>transform</td>
<td>让<code>Container</code>容易进行一些旋转之类的 <code>transform:Matrix4.rotationZ(0.2)</code></td>
</tr>
<tr>
<td>height</td>
<td>容器高度</td>
</tr>
<tr>
<td>width</td>
<td>容器宽度</td>
</tr>
<tr>
<td>child</td>
<td>容器子元素</td>
</tr>
</tbody></table>
<span id="more"></span>
<h2 id="Text组件"><a href="#Text组件" class="headerlink" title="Text组件"></a>Text组件</h2><table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>textAlign</td>
<td>文本对齐方式（center居中，<code>left</code>左对齐，<code>right</code>右对齐，<code>justify</code>两端对齐）</td>
</tr>
<tr>
<td>textDirection</td>
<td>文本方向（ltr从左至右，rtl从右至左）</td>
</tr>
<tr>
<td>overflow</td>
<td>文字超出屏幕之后的处理方式（<code>clip</code>裁剪，<code>fade</code>渐隐，<code>ellipsis</code>省略号）</td>
</tr>
<tr>
<td>textScaleFactor</td>
<td>字体显示倍率</td>
</tr>
<tr>
<td>maxLines</td>
<td>文字显示最大行数</td>
</tr>
<tr>
<td>style</td>
<td>字体的样式设置</td>
</tr>
</tbody></table>
<p><strong>TextStyle</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>decoration</td>
<td>文字装饰线（<code>none</code>没有线，<code>lineThrough</code>删除线，<code>overline</code>上划线，<code>underline</code>下划线）</td>
</tr>
<tr>
<td>decorationColor</td>
<td>文字装饰线颜色</td>
</tr>
<tr>
<td>decorationStyle</td>
<td>文字装饰线风格（<code>dashed</code>,<code>dotted</code>虚线，<code>double</code>两根线，<code>solid</code>一根实线，<code>wavy</code>波浪线）</td>
</tr>
<tr>
<td>wordSpacing</td>
<td>单词间隙（如果是负值，会让单词变得更紧凑)</td>
</tr>
<tr>
<td>letterSpacing</td>
<td>字母间隙（如果是负值，会让字母变得更紧凑）</td>
</tr>
<tr>
<td>fontStyle</td>
<td>文字样式（<code>italic</code>斜体，<code>normal</code>正常体）</td>
</tr>
<tr>
<td>fontSize</td>
<td>文字大小</td>
</tr>
<tr>
<td>color</td>
<td>文字颜色</td>
</tr>
<tr>
<td>fontWeight</td>
<td>字体粗细（<code>bold</code>粗体，<code>normal</code>正常体）</td>
</tr>
</tbody></table>
<h2 id="Image组件"><a href="#Image组件" class="headerlink" title="Image组件"></a>Image组件</h2><ul>
<li>Image.asset，本地图片</li>
<li>Image.network，远程图片</li>
</ul>
<p><strong>Image组件的常用属性</strong><br>|  名称   | 类型  | 说明 |<br>|  —-  | —-  | —- |<br>| alignment | Alignment | 图片的对齐方式 |<br>| color和colorBlendMode |  | 设置图片的背景颜色，通常和<code>colorBlendMode</code>配合一起使用，这样可以是图片颜色和背景色混合。上面的图片就是进行了颜色的混合，绿色背景和图片红色的混合 |<br>| fit | BoxFit | <code>fit</code>属性用来控制图片的拉伸和挤压，这都是根据父容器来的。<code>BoxFit.fill</code>:全图显示，图片会被拉伸，并充满父容器。<code>BoxFit.contain</code>:全图显示，显示原比例，可能会有空隙。<code>BoxFit.cover</code>：显示可能拉伸，可能裁切，充满（图片要充满整个容器，还不变形）<code>BoxFit.fitWidth</code>：宽度充满（横向充满），显示可能拉伸，可能裁切。<code>BoxFit.fitHeight</code>：高度充满（竖向充满）,显示可能拉伸，可能裁切。<code>BoxFit.scaleDown</code>：效果和<code>contain</code>差不多，但是此属性不允许显示超过源图片大小，可小不可大。|<br>| repeat | 平铺 | <code>ImageRepeat.repeat</code>:横向和纵向都进行重复，直到铺满整个画布。<code>ImageRepeat.repeatX</code>:横向重复，纵向不重复。<code>ImageRepeat.repeatY</code>：纵向重复，横向不重复。 |<br>| width |  | 宽度一般结合<code>ClipOval</code>才能看到效果 |<br>| height |  | 高度一般结合<code>ClipOval</code>才能看到效果 |</p>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p><strong>列表参数</strong><br>|  名称   | 类型  | 说明 |<br>|  —-  | —-  | —- |<br>| scrollDirection | Axis | <code>Axis.horizontal</code>水平列表<code>Axis.vertical</code>垂直列表 |<br>| padding | EdgeInsetsGeometry | 内边距 |<br>| resolve | bool | 组件反向排序 |<br>| children | List | 列表元素 |</p>
<p><strong>基础列表</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListTile(</span><br><span class="line">  leading: Icon(Icons.shopping_cart, color: Colors.yellow),</span><br><span class="line">  trailing: Icon(Icons.shopping_cart,color: Colors.amber,size: <span class="number">40</span>,),</span><br><span class="line">    title: Text(</span><br><span class="line">      <span class="string">&#x27;这是测试组件&#x27;</span>,</span><br><span class="line">      style: TextStyle(color: Colors.deepOrange),</span><br><span class="line">    ),</span><br><span class="line">      subtitle: Text(<span class="string">&#x27;林深时见鹿&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">      ListTile(</span><br><span class="line">        leading: Image.network(<span class="string">&#x27;https://img2.baidu.com/it/u=2571759023,2351002417&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#x27;</span>),</span><br><span class="line">        title: Text(<span class="string">&#x27;这是测试组件&#x27;</span>),</span><br><span class="line">        subtitle: Text(<span class="string">&#x27;林深时见鹿&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      ListTile(</span><br><span class="line">        leading: Icon(Icons.shopping_cart),</span><br><span class="line">        title: Text(<span class="string">&#x27;这是测试组件&#x27;</span>),</span><br><span class="line">        subtitle: Text(<span class="string">&#x27;林深时见鹿&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      ListTile(</span><br><span class="line">        leading: Icon(Icons.shopping_cart),</span><br><span class="line">        title: Text(<span class="string">&#x27;这是测试组件&#x27;</span>),</span><br><span class="line">        subtitle: Text(<span class="string">&#x27;林深时见鹿&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>水平列表</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">              height: <span class="number">100</span>,</span><br><span class="line">              child: ListView(</span><br><span class="line">                scrollDirection: Axis.horizontal,</span><br><span class="line">                children: [</span><br><span class="line">                  Container(</span><br><span class="line">                    width: <span class="number">180.0</span>,</span><br><span class="line">                    height: <span class="number">180.0</span>,</span><br><span class="line">                    color: Colors.deepOrange,</span><br><span class="line">                    child: ListView(</span><br><span class="line">                      children: [</span><br><span class="line">                        Image.network(</span><br><span class="line">                            <span class="string">&#x27;https://img0.baidu.com/it/u=3016898859,3631141633&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#x27;</span>),</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    width: <span class="number">180.0</span>,</span><br><span class="line">                    height: <span class="number">180.0</span>,</span><br><span class="line">                    color: Colors.amber,</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    width: <span class="number">180.0</span>,</span><br><span class="line">                    height: <span class="number">180.0</span>,</span><br><span class="line">                    color: Colors.grey,</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    width: <span class="number">180.0</span>,</span><br><span class="line">                    height: <span class="number">180.0</span>,</span><br><span class="line">                    color: Colors.blue,</span><br><span class="line">                  ),</span><br><span class="line">                  Container(</span><br><span class="line">                    width: <span class="number">180.0</span>,</span><br><span class="line">                    height: <span class="number">180.0</span>,</span><br><span class="line">                    color: Colors.blueAccent,</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
<h2 id="动态列表"><a href="#动态列表" class="headerlink" title="动态列表"></a>动态列表</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line">  HomeContent(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      list.add(<span class="string">&#x27;林深见了<span class="subst">$i</span>条鹿&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">      itemCount: list.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">        <span class="keyword">return</span> ListTile(</span><br><span class="line">          leading: Icon(Icons.account_circle),</span><br><span class="line">          title: Text(<span class="string">&#x27;<span class="subst">$&#123;list[index]&#125;</span>&#x27;</span>),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GridView组件"><a href="#GridView组件" class="headerlink" title="GridView组件"></a>GridView组件</h2><ol>
<li>可以通过<code>GridView.count</code>实现网格布局</li>
<li>通过<code>GridView.builder</code>实现网格布局</li>
</ol>
<p><strong>常用属性：</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>scrollDirection</td>
<td>Axis</td>
<td>滚动方法</td>
</tr>
<tr>
<td>padding</td>
<td>EdgeInsetsGeometry</td>
<td>内边距</td>
</tr>
<tr>
<td>resolve</td>
<td>bool</td>
<td>组件反向排序</td>
</tr>
<tr>
<td>crossAxisSpacing</td>
<td>double</td>
<td>水平子<code>Widget</code>之间间距</td>
</tr>
<tr>
<td>mainAxisSpacing</td>
<td>double</td>
<td>垂直子<code>Widget</code>之间间距</td>
</tr>
<tr>
<td>crossAxisCount</td>
<td>int</td>
<td>一行的<code>Widget</code>数量</td>
</tr>
<tr>
<td>childAspectRatio</td>
<td>double</td>
<td>子<code>Widget</code>宽高比例</td>
</tr>
<tr>
<td>children</td>
<td></td>
<td>[]</td>
</tr>
<tr>
<td>gridDelegate</td>
<td><code>SliverGridDelegateWithFix</code> <code>edCrossAxisCount</code>（常用）<code>SliverGridDelegateWithMax</code> <code>CrossAxisExtent</code></td>
<td>控制布局主要用在<code>GridView.builder</code>里面</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>http</title>
    <url>/posts/97780db2.html</url>
    <content><![CDATA[<h1 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h1><h2 id="1-http和https基本概念"><a href="#1-http和https基本概念" class="headerlink" title="1.http和https基本概念"></a>1.http和https基本概念</h2><p>http: 是一个客户端和服务器端请求和应答标准（TCP），用于从<code>www</code>服务器传输超文本到本地浏览器的超本文传输协议。</p>
<p>https: 是安全为目标的<code>http</code>通道，即<code>http</code>下加入<code>SSL</code>层进行加密。其作用是：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p>
<span id="more"></span>
<h2 id="2-http和https区别及优缺点"><a href="#2-http和https区别及优缺点" class="headerlink" title="2.http和https区别及优缺点"></a>2.http和https区别及优缺点</h2><ul>
<li>http是超文本传输协议，信息是明文传输，https协议比http协议安全，https是具有安全性的ssl加密传输协议，可防止数据在传输过程中被窃取、改变。确保数据的完整性</li>
<li>http协议的默认端口是80，https的默认端口是443</li>
<li>http的链接很简单，是无状态的。https的握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电</li>
<li>https的缓存不如http高效，会增加数据开销</li>
<li>https需要ca证书，费用较高，功能越强大的证书费用越高</li>
<li>SSL证书需要绑定IP，不能再同一个 IP 上绑定多个域名，IPV4 资源支持不了这种消耗。</li>
</ul>
<h2 id="3-https-协议的工作原理"><a href="#3-https-协议的工作原理" class="headerlink" title="3.https 协议的工作原理"></a>3.https 协议的工作原理</h2><p>  客户端在使用https方式与web服务器通信时有以下几个步骤：</p>
<ol>
<li>客户端使用https url访问服务器，则要求web服务器建立ssl链接</li>
<li>web服务器在接收到客户端的请求后，会将网站证书（证书中包含公钥）传输给客户端</li>
<li>客户端和web服务器端开始协商ssl链接的安全等级,也就是加密等级</li>
<li>客户端浏览器通过上访协商一致的安全等级，建立会话秘钥，然后通过网站的公钥来加密会话秘钥，并传送给网站</li>
<li>web服务器通过自己的私钥解密出会话秘钥</li>
<li>web服务器通过会话秘钥加密客户端之间的通信</li>
</ol>
]]></content>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>lerna Error</title>
    <url>/posts/6de005f2.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用lerna搭建了一个脚手架，打算发布到npm上去，记录一下遇到的问题</p>
<span id="more"></span>
<h2 id="npm登录"><a href="#npm登录" class="headerlink" title="npm登录"></a>npm登录</h2><p>登录过程</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm login</span><br><span class="line"><span class="attr">username</span>: xxx,</span><br><span class="line"><span class="attr">password</span>: 你的登录密码</span><br><span class="line"><span class="attr">Email</span>: 你的邮箱</span><br></pre></td></tr></table></figure>
<p>这些输入之后一直处于一个登录状态，登录好长时间发现返回了一个<br><code>Error: 500 Internal Server Error - PUT https://registry.npm.taobao.org/-/user/org.couchdb.user:linshen</code></p>
<p>因为之前一直用的是淘宝的源，所以想着是不是因为源的问题导致的</p>
<p>这里使用的是<code>nrm</code>没装这个的话自己去装一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局安装</span></span><br><span class="line">npm install -g nrm</span><br><span class="line"><span class="comment">// 查看当前源</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment">// 切换淘宝源</span></span><br><span class="line">nrm use taobao</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换npm源</span></span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure>
<p>查看之后发现我之前直接设置的是淘宝源没有设置<code>npm</code>的源</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure>
<p>这样<code>npm</code>源就设置好了<br>然后，我们再次执行<code>npm login</code></p>
<p>返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Logged <span class="keyword">in</span> <span class="keyword">as</span> linshen on https:<span class="comment">//registry.npmjs.org/.</span></span><br></pre></td></tr></table></figure>
<p>证明就执行成功了！</p>
<p>接下来就使用lerna发布npm</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lerna publish</span><br></pre></td></tr></table></figure>
<p>提示我package.json中存在淘宝源</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;registry&quot;</span>: <span class="string">&quot;https://registry.npm.taobao.org/&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>导致报错</p>
<p>然后去lerna官网去查询发现只需要将</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;registry&quot;</span>: <span class="string">&quot;https://registry.npm.taobao.org/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 改成</span></span><br><span class="line">  <span class="string">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;access&quot;</span>: <span class="string">&quot;public&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>就可以了<br>执行<code>lerna publish</code>然后就发布成功了！</p>
]]></content>
      <tags>
        <tag>常见错误总结</tag>
      </tags>
  </entry>
  <entry>
    <title>js</title>
    <url>/posts/17c7b154.html</url>
    <content><![CDATA[<h1 id="js中的事件循环机制"><a href="#js中的事件循环机制" class="headerlink" title="js中的事件循环机制"></a>js中的事件循环机制</h1><h1 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h1><ol>
<li>进程是系统分配的独立资源，是<code>CPU</code>资源分配的基本单位，进程是由一个或者多个线程组成的。</li>
<li>线程是进程的执行流，是<code>CPU</code>调度和分派的基本单位，同个进程之中的多个线程之间是共享该进程资源的。<span id="more"></span>
<h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2> 浏览器是多进程的，浏览器每一个tab标签都代表一个独立的进程（多个空白的tab标签会合并成一个进程），浏览器内核（浏览器渲染进程）属于浏览器多进程的一种<br>浏览器内核有多种线程在工作</li>
</ol>
<h1 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a>GUI渲染线程</h1><p>负责渲染页面，解析 <code>HTML，CSS 构成 DOM</code> 树等，当页面重绘或者由于某种操作引起回流都会调起该线程和 JS 引擎线程是互斥的，当 JS 引擎线程在工作的时候，GUI 渲染线程会被挂起，GUI 更新被放入在 JS 任务队列中，等待 JS 引擎线程空闲的时候继续执行。</p>
<h1 id="JS-引擎线程"><a href="#JS-引擎线程" class="headerlink" title="JS 引擎线程"></a>JS 引擎线程</h1><p>单线程工作，负责解析运行 <code>JavaScript</code> 脚本。<br>和 <code>GUI 渲染线程互斥</code>，JS 运行耗时过长就会导致页面阻塞。</p>
<p><strong>事件触发线程:</strong><br>当事件符合触发条件被触发时，该线程会把对应的事件回调函数添加到任务队列的队尾，等待 JS 引擎处理。</p>
<h1 id="定时器触发线程"><a href="#定时器触发线程" class="headerlink" title="定时器触发线程"></a>定时器触发线程</h1><p>浏览器定时计数器并不是由 JS 引擎计数的，阻塞会导致计时不准确。<br>开启定时器触发线程来计时并触发计时，计时完成后会被添加到任务队列中，等待 JS 引擎处理。</p>
<h1 id="http-请求线程"><a href="#http-请求线程" class="headerlink" title="http 请求线程"></a>http 请求线程</h1><p>http 请求的时候会开启一条请求线程。<br>请求完成有结果了之后，将请求的回调函数添加到任务队列中，等待 JS 引擎处理。</p>
<h1 id="JavaScript-引擎是单线程"><a href="#JavaScript-引擎是单线程" class="headerlink" title="JavaScript 引擎是单线程"></a>JavaScript 引擎是单线程</h1><p>JavaScript 引擎是单线程，也就是说每次只能执行一项任务，其他任务都得按照顺序排队等待被执行，只有当前的任务执行完成之后才会往下执行下一个任务。<br>HTML5 中提出了 <code>Web-Worker API</code>，主要是为了解决页面阻塞问题，但是并没有改变 <code>JavaScript</code> 是单线程的本质</p>
<h1 id="JavaScript-事件循环机制"><a href="#JavaScript-事件循环机制" class="headerlink" title="JavaScript 事件循环机制"></a>JavaScript 事件循环机制</h1><p>JavaScript 事件循环机制分为浏览器和 Node 事件循环机制，两者的实现技术不一样，浏览器 <code>Event Loop</code> 是 HTML 中定义的规范，<code>Node Event Loop</code> 是由 <code>libuv</code> 库实现。这里主要讲的是浏览器部分。</p>
<p>Javascript 有一个 <code>main thread</code> 主线程和 <code>call-stack 调用栈(执行栈)</code>，所有的任务都会被放到调用栈等待主线程执行。</p>
<h1 id="JS-调用栈"><a href="#JS-调用栈" class="headerlink" title="JS 调用栈"></a>JS 调用栈</h1><p>JS 调用栈是一种后进先出的数据结构。当函数被调用时，会被添加到栈中的顶部，执行完成之后就从栈顶部移出该函数，直到栈内被清空。</p>
<h1 id="同步任务、异步任务"><a href="#同步任务、异步任务" class="headerlink" title="同步任务、异步任务"></a>同步任务、异步任务</h1><p>JavaScript 单线程中的任务分为<code>同步任务</code>和<code>异步任务</code>。同步任务会在调用栈中按照顺序排队等待主线程执行，异步任务则会在异步有了结果后将注册的回调函数添加到任务队列(消息队列)中等待主线程空闲的时候，也就是栈内被清空的时候，被读取到栈中等待主线程执行。任务队列是先进先出的数据结构。</p>
<h1 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h1><p>调用栈中的同步任务都执行完毕，栈内被清空了，就代表主线程空闲了，这个时候就会去任务队列中按照顺序读取一个任务放入到栈中执行。每次栈内被清空，都会去读取任务队列有没有任务，有就读取执行，一直循环读取-执行的操作，就形成了事件循环。</p>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>定时器会开启一条定时器触发线程来触发计时，定时器会在等待了指定的时间后将事件放入到任务队列中等待读取到主线程执行。</p>
<p>定时器指定的延时毫秒数其实并不准确，因为定时器只是在到了指定的时间时将事件放入到任务队列中，必须要等到同步的任务和现有的任务队列中的事件全部执行完成之后，才会去读取定时器的事件到主线程执行，中间可能会存在耗时比较久的任务，那么就不可能保证在指定的时间执行。</p>
<h1 id="宏任务-macro-task-、微任务-micro-task"><a href="#宏任务-macro-task-、微任务-micro-task" class="headerlink" title="宏任务(macro-task)、微任务(micro-task)"></a>宏任务(macro-task)、微任务(micro-task)</h1><p>除了广义的同步任务和异步任务，JavaScript 单线程中的任务可以细分为宏任务和微任务。</p>
<p>macro-task包括：<code>script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering</code>。</p>
<p>micro-task包括：<code>process.nextTick, Promises, Object.observe, MutationObserver</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>示例中，<code>setTimeout</code> 和 <code>Promise</code>被称为任务源，来自不同的任务源注册的回调函数会被放入到不同的任务队列中。</p>
<p>有了宏任务和微任务的概念后，那 JS 的执行顺序是怎样的？是宏任务先还是微任务先？</p>
<p>第一次事件循环中，JavaScript 引擎会把整个 script 代码当成一个宏任务执行，执行完成之后，再检测本次循环中是否寻在微任务，存在的话就依次从微任务的任务队列中读取执行完所有的微任务，再读取宏任务的任务队列中的任务执行，再执行所有的微任务，如此循环。JS 的执行顺序就是每次事件循环中的宏任务-微任务。</p>
<p>上面的示例中，第一次事件循环，整段代码作为宏任务进入主线程执行。<br>遇到了 setTimeout ，就会等到过了指定的时间后将回调函数放入到宏任务的任务队列中。<br>遇到 Promise，将 then 函数放入到微任务的任务队列中。<br>整个事件循环完成之后，会去检测微任务的任务队列中是否存在任务，存在就执行。<br>第一次的循环结果打印为: <code>1,3,5,4</code>。<br>接着再到宏任务的任务队列中按顺序取出一个宏任务到栈中让主线程执行，那么在这次循环中的宏任务就是 setTimeout 注册的回调函数，执行完这个回调函数，发现在这次循环中并不存在微任务，就准备进行下一次事件循环。<br>检测到宏任务队列中已经没有了要执行的任务，那么就结束事件循环。<br>最终的结果就是 <code>1,3,5,4,2</code>。</p>
<h1 id="js中微任务和宏任务的区别"><a href="#js中微任务和宏任务的区别" class="headerlink" title="js中微任务和宏任务的区别"></a>js中微任务和宏任务的区别</h1><ol>
<li><p>宏任务：当前调用栈中执行的代码成为宏任务。（主代码快，定时器等等）。</p>
</li>
<li><p>微任务： 当前（此次事件循环中）宏任务执行完，在下一个宏任务开始之前需要执行的任务,可以理解为回调事件。（promise.then，proness.nextTick等等）。</p>
</li>
<li><p>宏任务中的事件放在callback queue中，由事件触发线程维护；微任务的事件放在微任务队列中，由js引擎线程维护。</p>
</li>
</ol>
<h1 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h1><ol>
<li><p>在执行栈中执行一个宏任务。</p>
</li>
<li><p>执行过程中遇到微任务，将微任务添加到微任务队列中。</p>
</li>
<li><p>当前宏任务执行完毕，立即执行微任务队列中的任务。</p>
</li>
<li><p>当前微任务队列中的任务执行完毕，检查渲染，GUI线程接管渲染。</p>
</li>
<li><p>渲染完毕后，js线程接管，开启下一次事件循环，执行下一次宏任务（事件队列中取）。</p>
</li>
</ol>
<p>微任务：process.nextTick、MutationObserver、Promise.then catch finally</p>
<p>宏任务：I/O、setTimeout、setInterval、setImmediate、requestAnimationFrame</p>
]]></content>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>js常用方法</title>
    <url>/posts/bd2aca71.html</url>
    <content><![CDATA[<h2 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> trim = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// return typeof str === &#x27;string&#x27;</span></span><br><span class="line">  <span class="comment">//   ? str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, &#x27;&#x27;)</span></span><br><span class="line">  <span class="comment">//   : str;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> str === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">        ? str.replace(<span class="regexp">/\s/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        : str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounceFunc = <span class="function">(<span class="params">func, wait, immediate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> timeout, result;</span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">          <span class="comment">// 如果已经执行过，不再执行</span></span><br><span class="line">          <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">          timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              timeout = <span class="literal">null</span>;</span><br><span class="line">          &#125;, wait)</span><br><span class="line">          <span class="keyword">if</span> (callNow) result = func.apply(context, args)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              func.apply(context, args)</span><br><span class="line">          &#125;, wait);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  debounced.cancel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="跳转函数"><a href="#跳转函数" class="headerlink" title="跳转函数"></a>跳转函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @param  &#123;[Object]&#125; history          [router的history参数]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[String]&#125; url              [跳转的路由]</span></span><br><span class="line"><span class="comment"> * @param  &#123;Object&#125; [params=&#123;&#125;]      [需要带入的额外参数]</span></span><br><span class="line"><span class="comment"> * @param  &#123;String&#125; [type=&#x27;default&#x27;] [跳转时是否需要关闭当前页面 default:不需要 replace:需要]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> jumpToPage = <span class="function">(<span class="params">&#123;history,url,params=&#123;&#125;,type=<span class="string">&#x27;default&#x27;</span>&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(type === <span class="string">&#x27;default&#x27;</span>)&#123;</span><br><span class="line">    history.push(url,params)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    history.replace(url,params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串首字母变大写"><a href="#字符串首字母变大写" class="headerlink" title="字符串首字母变大写"></a>字符串首字母变大写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @param  &#123;[String]&#125; str [需变更的字符串]</span></span><br><span class="line"><span class="comment"> * @return &#123;[String]&#125;     [变更后的字符串]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> string2String = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> len = str.length</span><br><span class="line">  <span class="keyword">const</span> newString = str.substr(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+str.substr(<span class="number">1</span>,len)</span><br><span class="line">  <span class="keyword">return</span> newString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期格式化</span></span><br><span class="line"><span class="comment"> * * <span class="doctag">@param <span class="type">&#123;date&#125;</span> </span>date 需转换的时间</span></span><br><span class="line"><span class="comment"> * * <span class="doctag">@param <span class="type">&#123;string: all date time&#125;</span> </span>type 转换后的格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dataFormat = <span class="function">(<span class="params">date, type = <span class="string">&#x27;all&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;all&#x27;</span>:</span><br><span class="line">      string = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>-<span class="subst">$&#123;addZero(date.getMonth() + <span class="number">1</span>)&#125;</span>-<span class="subst">$&#123;addZero(</span></span></span><br><span class="line"><span class="subst"><span class="string">        date.getDate()</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span> <span class="subst">$&#123;addZero(date.getHours())&#125;</span>:<span class="subst">$&#123;addZero(date.getMinutes())&#125;</span>:<span class="subst">$&#123;addZero(</span></span></span><br><span class="line"><span class="subst"><span class="string">        date.getSeconds()</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;date&#x27;</span>:</span><br><span class="line">      string = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>-<span class="subst">$&#123;addZero(date.getMonth() + <span class="number">1</span>)&#125;</span>-<span class="subst">$&#123;addZero(</span></span></span><br><span class="line"><span class="subst"><span class="string">        date.getDate()</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>`</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;time&#x27;</span>:</span><br><span class="line">      string = <span class="string">`<span class="subst">$&#123;addZero(date.getHours())&#125;</span>:<span class="subst">$&#123;addZero(</span></span></span><br><span class="line"><span class="subst"><span class="string">        date.getMinutes()</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>:<span class="subst">$&#123;addZero(date.getSeconds())&#125;</span>`</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="填0函数"><a href="#填0函数" class="headerlink" title="填0函数"></a>填0函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addZero = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newStr = str + <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (newStr.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> newStr</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> + newStr</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [setCookie 设置cookie]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;[string]&#125;</span> </span>name  [cookie名]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;[string]&#125;</span> </span>value [cookie值]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;[number]&#125;</span> </span>day   [缓存时间]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setCookie = <span class="function">(<span class="params">name, value, day</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (day !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//当设置的时间等于0时，不设置expires属性，cookie在浏览器关闭后删除</span></span><br><span class="line">    <span class="keyword">var</span> expires = day * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+<span class="keyword">new</span> <span class="built_in">Date</span>() + expires)</span><br><span class="line">    <span class="built_in">document</span>.cookie =</span><br><span class="line">      name + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">escape</span>(value) + <span class="string">&#x27;;expires=&#x27;</span> + date.toUTCString()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie = name + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">escape</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="uncode解码"><a href="#uncode解码" class="headerlink" title="uncode解码"></a>uncode解码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [uncode 解码]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[string]&#125;</span> </span>str [需解码的字段]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[type]&#125;</span>        </span>[description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uncode = <span class="function">(<span class="params">str = <span class="string">&#x27;&#x27;</span>, type = <span class="string">&#x27;default&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  str = str || <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;default&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">      .replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;#39;/g</span>, <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newStr = str</span><br><span class="line">      .replace(<span class="regexp">/&amp;lt;script&amp;gt;/g</span>, <span class="string">&#x27;&amp;script&amp;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;lt;\/script&amp;gt;/g</span>, <span class="string">&#x27;&amp;/script&amp;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;#39;/g</span>, <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> newStr</span><br><span class="line">      .replace(<span class="regexp">/&amp;script&amp;/g</span>, <span class="string">&#x27;&amp;lt;script&amp;gt;&#x27;</span>)</span><br><span class="line">      .replace(<span class="regexp">/&amp;\/script&amp;/</span>, <span class="string">&#x27;&amp;lt;/script&amp;gt;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="加密-amp-amp-解密"><a href="#加密-amp-amp-解密" class="headerlink" title="加密&amp;&amp;解密"></a>加密&amp;&amp;解密</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * @param &#123;*需要加密的字符串 注：对象转化为json字符串再加密&#125; word</span></span><br><span class="line"><span class="comment">  * @param &#123;*aes加密需要的key值，这个key值后端同学会告诉你&#125; keyStr</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> encrypt = <span class="function">(<span class="params">word, keyStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> key = CryptoJS.enc.Utf8.parse(keyStr)</span><br><span class="line">  <span class="keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(word)</span><br><span class="line">  <span class="keyword">var</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span><br><span class="line">    <span class="attr">mode</span>: CryptoJS.mode.ECB,</span><br><span class="line">    <span class="attr">padding</span>: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;) <span class="comment">// 加密模式为ECB，补码方式为PKCS5Padding（也就是PKCS7）</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> encrypted.toString()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrypt = <span class="function">(<span class="params">word, keyStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> key = CryptoJS.enc.Utf8.parse(keyStr)</span><br><span class="line">  <span class="keyword">var</span> decrypt = CryptoJS.AES.decrypt(word, key, &#123;</span><br><span class="line">    <span class="attr">mode</span>: CryptoJS.mode.ECB,</span><br><span class="line">    <span class="attr">padding</span>: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> CryptoJS.enc.Utf8.stringify(decrypt).toString()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="获取search中的数据"><a href="#获取search中的数据" class="headerlink" title="获取search中的数据"></a>获取search中的数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* [searchToParams 获取search中的数据]</span></span><br><span class="line"><span class="comment"> * @return &#123; [JSON]&#125;[键值对数据]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> searchToParams = <span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; search &#125; = <span class="built_in">window</span>.location</span><br><span class="line">  <span class="keyword">let</span> realSearch = search.substring(<span class="number">1</span>, search.length)</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;login&#x27;</span>) &#123;</span><br><span class="line">    realSearch = realSearch.replace(<span class="regexp">/\|\|/g</span>, <span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  realSearch.split(<span class="string">&#x27;&amp;&#x27;</span>).map(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resArray = res.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> urlParams = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    resArray.map(<span class="function">(<span class="params">dt, inx</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (inx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (urlParams) &#123;</span><br><span class="line">          urlParams += <span class="string">`=<span class="subst">$&#123;dt&#125;</span>`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          urlParams += <span class="string">`<span class="subst">$&#123;dt&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dt</span><br><span class="line">    &#125;)</span><br><span class="line">    data[resArray[<span class="number">0</span>]] = urlParams ? <span class="built_in">decodeURI</span>(urlParams) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="检测浏览器window-search是否有指定字段"><a href="#检测浏览器window-search是否有指定字段" class="headerlink" title="检测浏览器window.search是否有指定字段"></a>检测浏览器window.search是否有指定字段</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测浏览器window.search是否有指定字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>name 判断名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getQueryStringByName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span> + name + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (r[<span class="number">2</span>])</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="延迟函数delay"><a href="#延迟函数delay" class="headerlink" title="延迟函数delay"></a>延迟函数delay</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function"><span class="params">status</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    status ? resolve(<span class="string">&#x27;done&#x27;</span>) : reject(<span class="string">&#x27;fail&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> getRes = <span class="keyword">async</span> (data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> getData(data)</span><br><span class="line">        <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">        <span class="keyword">await</span> delay(<span class="number">1000</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(res, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - timestamp)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getRes(<span class="literal">true</span>) <span class="comment">// 隔了1秒</span></span><br></pre></td></tr></table></figure>

<h2 id="分割指定长度的元素数组"><a href="#分割指定长度的元素数组" class="headerlink" title="分割指定长度的元素数组"></a>分割指定长度的元素数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> listChunk = <span class="function">(<span class="params">list, size = <span class="number">1</span>, cacheList = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tmp = [...list]</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheList</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (tmp.length) &#123;</span><br><span class="line">        cacheList.push(tmp.splice(<span class="number">0</span>, size))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cacheList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(listChunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])) <span class="comment">// [[1], [2], [3], [4], [5], [6], [7], [8], [9]]</span></span><br><span class="line"><span class="built_in">console</span>.log(listChunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], <span class="number">3</span>)) <span class="comment">// [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span></span><br><span class="line"><span class="built_in">console</span>.log(listChunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], <span class="number">0</span>)) <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(listChunk([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], -<span class="number">1</span>)) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h2 id="获取数组交集"><a href="#获取数组交集" class="headerlink" title="获取数组交集"></a>获取数组交集</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">list, ...args</span>) =&gt;</span> list.filter(<span class="function"><span class="params">item</span> =&gt;</span> args.every(<span class="function"><span class="params">list</span> =&gt;</span> list.includes(item)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(intersection([<span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// [2]</span></span><br><span class="line"><span class="built_in">console</span>.log(intersection([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>])) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curring = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; length &#125; = fn</span><br><span class="line">    <span class="keyword">const</span> curried = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (args.length &gt;= length</span><br><span class="line">              ? fn(...args)</span><br><span class="line">              : <span class="function">(<span class="params">...args2</span>) =&gt;</span> curried(...args.concat(args2)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curried</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listMerge = <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> [a, b, c]</span><br><span class="line"><span class="keyword">const</span> curried = curring(listMerge)</span><br><span class="line"><span class="built_in">console</span>.log(curried(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(curried(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(curried(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串前面空格去除与替换"><a href="#字符串前面空格去除与替换" class="headerlink" title="字符串前面空格去除与替换"></a>字符串前面空格去除与替换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> trimStart = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^([\\s]*)(.*)$&#x27;</span>), <span class="string">&#x27;$2&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(trimStart(<span class="string">&#x27; abc &#x27;</span>)) <span class="comment">// abc</span></span><br><span class="line"><span class="built_in">console</span>.log(trimStart(<span class="string">&#x27;123 &#x27;</span>)) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串后面空格去除与替换"><a href="#字符串后面空格去除与替换" class="headerlink" title="字符串后面空格去除与替换"></a>字符串后面空格去除与替换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> trimEnd = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^(.*?)([\\s]*)$&#x27;</span>), <span class="string">&#x27;$1&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(trimEnd(<span class="string">&#x27; abc &#x27;</span>)) <span class="comment">//   abc  </span></span><br><span class="line"><span class="built_in">console</span>.log(trimEnd(<span class="string">&#x27;123 &#x27;</span>)) <span class="comment">// 123  </span></span><br></pre></td></tr></table></figure>

<h2 id="获取当前子元素是其父元素下子元素的排位"><a href="#获取当前子元素是其父元素下子元素的排位" class="headerlink" title="获取当前子元素是其父元素下子元素的排位"></a>获取当前子元素是其父元素下子元素的排位</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getIndex = <span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!el) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        index++</span><br><span class="line">    &#125; <span class="keyword">while</span> (el = el.previousElementSibling);</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取当前元素相对于document的偏移量"><a href="#获取当前元素相对于document的偏移量" class="headerlink" title="获取当前元素相对于document的偏移量"></a>获取当前元素相对于document的偏移量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getOffset = <span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        top,</span><br><span class="line">        left</span><br><span class="line">    &#125; = el.getBoundingClientRect()</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        scrollTop,</span><br><span class="line">        scrollLeft</span><br><span class="line">    &#125; = <span class="built_in">document</span>.body</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">top</span>: top + scrollTop,</span><br><span class="line">        <span class="attr">left</span>: left + scrollLeft</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取元素类型"><a href="#获取元素类型" class="headerlink" title="获取元素类型"></a>获取元素类型</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataType = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.prototype.toString.call(obj).replace(<span class="regexp">/^\[object (.+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>).toLowerCase();</span><br></pre></td></tr></table></figure>

<h2 id="判断是否是移动端"><a href="#判断是否是移动端" class="headerlink" title="判断是否是移动端"></a>判断是否是移动端</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isMobile = <span class="function">() =&gt;</span> <span class="string">&#x27;ontouchstart&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>;</span><br></pre></td></tr></table></figure>

<h2 id="fade动画"><a href="#fade动画" class="headerlink" title="fade动画"></a>fade动画</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fade = (el, type = <span class="string">&#x27;in&#x27;</span>) &#123;</span><br><span class="line">    el.style.opacity = (type === <span class="string">&#x27;in&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> last = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> tick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> opacityValue = (type === <span class="string">&#x27;in&#x27;</span> </span><br><span class="line">                            ? (<span class="keyword">new</span> <span class="built_in">Date</span>() - last) / <span class="number">400</span></span><br><span class="line">                            : -(<span class="keyword">new</span> <span class="built_in">Date</span>() - last) / <span class="number">400</span>)</span><br><span class="line">        el.style.opacity = +el.style.opacity + opacityValue</span><br><span class="line">    	last = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">&#x27;in&#x27;</span></span><br><span class="line">          ? (+el.style.opacity &lt; <span class="number">1</span>)</span><br><span class="line">          : (+el.style.opacity &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            requestAnimationFrame(tick)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tick()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="将指定格式的字符串解析为日期字符串"><a href="#将指定格式的字符串解析为日期字符串" class="headerlink" title="将指定格式的字符串解析为日期字符串"></a>将指定格式的字符串解析为日期字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dataPattern = <span class="function">(<span class="params">str, format = <span class="string">&#x27;-&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dateReg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^(\\d&#123;2&#125;)<span class="subst">$&#123;format&#125;</span>(\\d&#123;2&#125;)<span class="subst">$&#123;format&#125;</span>(\\d&#123;4&#125;)$`</span>)</span><br><span class="line">    <span class="keyword">const</span> [, month, day, year] = dateReg.exec(str)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">`<span class="subst">$&#123;month&#125;</span>, <span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;year&#125;</span>`</span>)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dataPattern(<span class="string">&#x27;12-25-1995&#x27;</span>)) <span class="comment">// Mon Dec 25 1995 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<h2 id="禁止网页复制粘贴"><a href="#禁止网页复制粘贴" class="headerlink" title="禁止网页复制粘贴"></a>禁止网页复制粘贴</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">html.oncopy = <span class="function">() =&gt;</span> <span class="literal">false</span></span><br><span class="line">html.onpaste = <span class="function">() =&gt;</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="input框限制只能输入中文"><a href="#input框限制只能输入中文" class="headerlink" title="input框限制只能输入中文"></a>input框限制只能输入中文</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input[type=&quot;text&quot;]&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> clearText = <span class="function"><span class="params">target</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        value</span><br><span class="line">    &#125; = target</span><br><span class="line">    target.value = value.replace(<span class="regexp">/[^\u4e00-\u9fa5]/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">input.onfocus = <span class="function">(<span class="params">&#123;target&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    clearText(target)</span><br><span class="line">&#125;</span><br><span class="line">input.onkeyup = <span class="function">(<span class="params">&#123;target&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    clearText(target)</span><br><span class="line">&#125;</span><br><span class="line">input.onblur = <span class="function">(<span class="params">&#123;target&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    clearText(target)</span><br><span class="line">&#125;</span><br><span class="line">input.oninput = <span class="function">(<span class="params">&#123;target&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    clearText(target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="去除字符串中的html代码"><a href="#去除字符串中的html代码" class="headerlink" title="去除字符串中的html代码"></a>去除字符串中的html代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> removeHTML = <span class="function">(<span class="params">str = <span class="string">&#x27;&#x27;</span></span>) =&gt;</span> str.replace(<span class="regexp">/&lt;[\/\!]*[^&lt;&gt;]*&gt;/ig</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(removeHTML(<span class="string">&#x27;&lt;h1&gt;哈哈哈哈&lt;呵呵呵&lt;/h1&gt;&#x27;</span>)) <span class="comment">// 哈哈哈哈&lt;呵呵呵</span></span><br></pre></td></tr></table></figure>

<h2 id="mac安装brew"><a href="#mac安装brew" class="headerlink" title="mac安装brew"></a>mac安装brew</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>工具函数</title>
    <url>/posts/dce53703.html</url>
    <content><![CDATA[<h1 id="localStorage的已使用空间"><a href="#localStorage的已使用空间" class="headerlink" title="localStorage的已使用空间"></a>localStorage的已使用空间</h1><p>在较新的chrome上测试，localStorage的存储是按照字符个数来算的。 包含键和值的。<br>所以在测试代码中，你把<code>a</code>修改<code>啊</code>，不会影响存储的数量。 但是键的长度，会影响存储的数量。</p>
<span id="more"></span>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLSUsedSpace</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">localStorage</span>).reduce(<span class="function">(<span class="params">total, curKey</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">localStorage</span>.hasOwnProperty(curKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> total;</span><br><span class="line">        &#125;</span><br><span class="line">        total += <span class="built_in">localStorage</span>[curKey].length + curKey.length;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.clear();</span><br><span class="line"><span class="built_in">localStorage</span>.a = <span class="string">&quot;啊&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(getLSUsedSpace()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h1 id="带图带事件的桌面通知"><a href="#带图带事件的桌面通知" class="headerlink" title="带图带事件的桌面通知"></a>带图带事件的桌面通知</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doNotify</span>(<span class="params">title, options = &#123;&#125;, events = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> notification = <span class="keyword">new</span> Notification(title, options);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> event <span class="keyword">in</span> events) &#123;</span><br><span class="line">        notification[event] = events[event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notify</span>(<span class="params">title, options = &#123;&#125;, events = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">&quot;Notification&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">&quot;This browser does not support desktop notification&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Notification.permission === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">        doNotify(title, options, events);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Notification.permission !== <span class="string">&quot;denied&quot;</span>) &#123;</span><br><span class="line">        Notification.requestPermission().then(<span class="function"><span class="keyword">function</span> (<span class="params">permission</span>) </span>&#123;           </span><br><span class="line">            <span class="keyword">if</span> (permission === <span class="string">&quot;granted&quot;</span>) &#123;</span><br><span class="line">                doNotify(title, options, events);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">notify(<span class="string">&quot;中奖提示&quot;</span>, &#123;</span><br><span class="line">       <span class="attr">icon</span>: <span class="string">&quot;https://sf1-ttcdn-tos.pstatp.com/img/user-avatar/f1a9f122e925aeef5e4534ff7f706729~300x300.image&quot;</span>,</span><br><span class="line">       <span class="attr">body</span>: <span class="string">&quot;恭喜你，掘金签到一等奖&quot;</span>,</span><br><span class="line">       <span class="attr">tag</span>: <span class="string">&quot;prize&quot;</span></span><br><span class="line">   &#125;, &#123;</span><br><span class="line">       <span class="function"><span class="title">onclick</span>(<span class="params">ev</span>)</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(ev);</span><br><span class="line">           ev.target.close();</span><br><span class="line">           <span class="built_in">window</span>.focus();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>
<h1 id="原生30行代码实现视频截图"><a href="#原生30行代码实现视频截图" class="headerlink" title="原生30行代码实现视频截图"></a>原生30行代码实现视频截图</h1><p>基本原理就是把视频画到Canvas里面，然后调用toDataURL或者toBlob，再利用a标签模拟点击，download属性指定名字。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">captureVideo</span>(<span class="params">videoEl</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> canvasEl;</span><br><span class="line">       <span class="keyword">let</span> dataUrl;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> cps = <span class="built_in">window</span>.getComputedStyle(videoEl);</span><br><span class="line">           <span class="keyword">const</span> width = +cps.getPropertyValue(<span class="string">&quot;width&quot;</span>).replace(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">           <span class="keyword">const</span> height = +cps.getPropertyValue(<span class="string">&quot;height&quot;</span>).replace(<span class="string">&quot;px&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">           canvasEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">           canvasEl.style.cssText = <span class="string">`position:fixed;left:-9999px`</span>;</span><br><span class="line">           canvasEl.height = height;</span><br><span class="line">           canvasEl.width = width;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">document</span>.body.appendChild(canvasEl);</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">const</span> ctx = canvasEl.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">           ctx.drawImage(videoEl, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">           <span class="comment">// const image = canvas.toDataURL(&quot;image/png&quot;);</span></span><br><span class="line">           dataUrl = canvasEl.toDataURL();</span><br><span class="line"></span><br><span class="line">           <span class="built_in">document</span>.body.removeChild(canvasEl);</span><br><span class="line">           canvasEl = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">return</span> dataUrl;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (canvasEl) &#123;</span><br><span class="line">               <span class="built_in">document</span>.body.removeChild(canvasEl);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (dataUrl) &#123;</span><br><span class="line">               <span class="keyword">return</span> dataUrl;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong><br>注意添加<code>crossorigin=&quot;anonymous&quot;</code>，不然转为图片会失败。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;video id=<span class="string">&quot;videoEL&quot;</span> controls autoplay crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        src=<span class="string">&quot;https://api.dogecloud.com/player/get.mp4?vcode=5ac682e6f8231991&amp;userId=17&amp;ext=.mp4&quot;</span> width=<span class="string">&quot;500&quot;</span>&gt;&lt;/video&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> aEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    aEl.href = url;</span><br><span class="line">    aEl.download = <span class="string">&quot;视频.png&quot;</span>;</span><br><span class="line">    aEl.click();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doCaptureVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = captureVideo(videoEL);</span><br><span class="line">    download(url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doCaptureVideo()</span><br></pre></td></tr></table></figure>
<h1 id="基于URLSearchParams或URL获取queryString的值"><a href="#基于URLSearchParams或URL获取queryString的值" class="headerlink" title="基于URLSearchParams或URL获取queryString的值"></a>基于UR<code>LSearchParams</code>或<code>URL</code>获取queryString的值</h1><p>常用的方式是使用正则或者<code>split</code>方法，其实不然，<code>URLSearchParams</code>和<code>URL</code>都能很好的实现功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> urlSP = <span class="keyword">new</span> URLSearchParams(location.search);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> urlSP.get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlObj = <span class="keyword">new</span> URL(location.href);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> urlObj.searchParams.get(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">测试地址： /index.html?pid=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="built_in">console</span>.log;</span><br><span class="line">getQueryString</span><br><span class="line"></span><br><span class="line">log(<span class="string">&quot;pid&quot;</span>, getQueryString(<span class="string">&quot;pid&quot;</span>));  <span class="comment">// pid 10</span></span><br><span class="line">log(<span class="string">&quot;cid&quot;</span>, getQueryString(<span class="string">&quot;cid&quot;</span>));  <span class="comment">// cid null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="基于atob和btoa的base64编码和解码"><a href="#基于atob和btoa的base64编码和解码" class="headerlink" title="基于atob和btoa的base64编码和解码"></a>基于<code>atob</code>和<code>btoa</code>的base64编码和解码</h1><p>浏览器内置了base64编码和解码的能力，第三方库，不需要的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params"> str </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>( str )));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params"> str </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob( str )));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">utf8_to_b64(<span class="string">&#x27;✓ à la mode&#x27;</span>); <span class="comment">// &quot;4pyTIMOgIGxhIG1vZGU=&quot;</span></span><br><span class="line">b64_to_utf8(<span class="string">&#x27;4pyTIMOgIGxhIG1vZGU=&#x27;</span>); <span class="comment">// &quot;✓ à la mode&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="非正则替换的html代码encode和decode"><a href="#非正则替换的html代码encode和decode" class="headerlink" title="非正则替换的html代码encode和decode"></a>非正则替换的html代码encode和decode</h1><p>常规的方式是使用正则替换，这里是另外一种思路。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlencode</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.appendChild(<span class="built_in">document</span>.createTextNode(s));</span><br><span class="line">    <span class="keyword">var</span> result = div.innerHTML;</span><br><span class="line">    div = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmldecode</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.innerHTML = s;</span><br><span class="line">    <span class="keyword">var</span> result = div.innerText || div.textContent;</span><br><span class="line">    div = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">htmlencode(<span class="string">&quot;&lt;div&gt;3&gt;5 &amp; 666&lt;/div&gt;&quot;</span>); <span class="comment">// &amp;lt;div&amp;gt;3&amp;gt;5 &amp;amp; 666&amp;lt;/div&amp;gt;</span></span><br><span class="line">htmldecode(<span class="string">&quot;&amp;lt;div&amp;gt;3&amp;gt;5 &amp;amp; 666&amp;lt;/div&amp;gt;&quot;</span>) <span class="comment">// &lt;div&gt;3&gt;5 &amp; 666&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="相对地址转换为绝对地址"><a href="#相对地址转换为绝对地址" class="headerlink" title="相对地址转换为绝对地址"></a>相对地址转换为绝对地址</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">realativeToAbs</span>(<span class="params">href</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> aEl = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    aEl.href = href;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = aEl.href;</span><br><span class="line">    aEl = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;realativeToAbs&quot;</span>, realativeToAbs(<span class="string">&quot;../a/b/b/index.html&quot;</span>));</span><br><span class="line"><span class="comment">// realativeToAbs http://127.0.0.1:5500/a/b/b/index.html</span></span><br></pre></td></tr></table></figure>
<h1 id="基于URL或者Crypto-getRandomValues生成UUID"><a href="#基于URL或者Crypto-getRandomValues生成UUID" class="headerlink" title="基于URL或者Crypto.getRandomValues生成UUID"></a>基于<code>URL</code>或者<code>Crypto.getRandomValues</code>生成UUID</h1><p>URL.createObjectURL 产生的地址为 <code>blob:https://developer.mozilla.org/cb48b940-c625-400a-a393-176c3635020b</code>, 其后部分就是一个UUID</p>
<ol>
<li>方法一<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genUUID</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = URL.createObjectURL(<span class="keyword">new</span> Blob([]));</span><br><span class="line">    <span class="comment">// const uuid = url.split(&quot;/&quot;).pop();</span></span><br><span class="line">    <span class="keyword">const</span> uuid = url.substring(url.lastIndexOf(<span class="string">&#x27;/&#x27;</span>)+ <span class="number">1</span>);</span><br><span class="line">    URL.revokeObjectURL(url);</span><br><span class="line">    <span class="keyword">return</span> uuid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">genUUID() <span class="comment">// cd205467-0120-47b0-9444-894736d873c7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>方法二<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uuidv4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ([<span class="number">1e7</span>]+-<span class="number">1e3</span>+-<span class="number">4e3</span>+-<span class="number">8e3</span>+-<span class="number">1e11</span>).replace(<span class="regexp">/[018]/g</span>, <span class="function"><span class="params">c</span> =&gt;</span></span><br><span class="line">    (c ^ crypto.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1</span>))[<span class="number">0</span>] &amp; <span class="number">15</span> &gt;&gt; c / <span class="number">4</span>).toString(<span class="number">16</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uuidv4() <span class="comment">// 38aa1602-ba78-4368-9235-d8703cdb6037</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="基于Array-from的序列生成器"><a href="#基于Array-from的序列生成器" class="headerlink" title="基于Array.from的序列生成器"></a>基于<code>Array.from</code>的序列生成器</h1><p>造有序数据，无序数据，等等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> range = <span class="function">(<span class="params">start, stop, step</span>) =&gt;</span> <span class="built_in">Array</span>.from(</span><br><span class="line">    &#123; <span class="attr">length</span>: (stop - start) / step + <span class="number">1</span>&#125;, </span><br><span class="line">    <span class="function">(<span class="params">_, i</span>) =&gt;</span> start + (i * step)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">range(<span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>); <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">range(<span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>); <span class="comment">// [0, 3, 6, 9]</span></span><br><span class="line">range(<span class="number">0</span>, <span class="number">8</span>, <span class="number">2.5</span>) <span class="comment">// [0, 2.5, 5, 7.5]</span></span><br></pre></td></tr></table></figure>
<h1 id="基于sendBeacon的安全的数据上报"><a href="#基于sendBeacon的安全的数据上报" class="headerlink" title="基于sendBeacon的安全的数据上报"></a>基于<code>sendBeacon</code>的安全的数据上报</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> navigator.sendBeacon !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="string">&quot;sendBeacon不被支持&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    navigator.sendBeacon(url, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;unload&#x27;</span>, logData, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   report(<span class="string">&quot;/log&quot;</span>, <span class="string">&quot;被卸载了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="基于toLocaleString千分位"><a href="#基于toLocaleString千分位" class="headerlink" title="基于toLocaleString千分位"></a>基于<code>toLocaleString</code>千分位</h1><p>正则？ 遍历？ 不需要的。内置函数就解决。<br>当然，如果是超大的数，可能是会有问题的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatMoney</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (+num).toLocaleString(<span class="string">&quot;en-US&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(formatMoney(<span class="number">123456789</span>));  <span class="comment">// 123,456,789</span></span><br><span class="line"><span class="built_in">console</span>.log(formatMoney(<span class="number">6781</span>)) <span class="comment">// 6,781</span></span><br><span class="line"><span class="built_in">console</span>.log(formatMoney(<span class="number">5</span>)) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 超大的数</span></span><br><span class="line">formatMoney(<span class="number">19999999933333333333333</span>) <span class="comment">// 19,999,999,933,333,333,000,000</span></span><br></pre></td></tr></table></figure>
<h1 id="Promise顺序执行"><a href="#Promise顺序执行" class="headerlink" title="Promise顺序执行"></a>Promise顺序执行</h1><p>让Promise顺序的执行，并支持初始化参数和结果作为参数传递。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runPromises</span>(<span class="params">promiseCreators, initData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> promiseCreators</span><br><span class="line">        .reduce(<span class="function">(<span class="params">promise, next</span>) =&gt;</span> promise</span><br><span class="line">                .then(<span class="function">(<span class="params">data</span>) =&gt;</span> next(data))</span><br><span class="line">            , <span class="built_in">Promise</span>.resolve(initData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="function"><span class="keyword">function</span> (<span class="params">data = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data + <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data -<span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runPromises([promise1, promise2], <span class="number">1</span>).then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res));</span><br></pre></td></tr></table></figure>
<h1 id="延时执行delay"><a href="#延时执行delay" class="headerlink" title="延时执行delay"></a>延时执行delay</h1><p>延时执行某函数，且只会执行一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">fn = () =&gt; &#123; &#125;, delay = <span class="number">5000</span>, context = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ticket = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> runned = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">run</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (runned === <span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                runned = <span class="literal">true</span>;</span><br><span class="line">                ticket = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> fn.apply(context, args);</span><br><span class="line">                        resolve(res);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">cancel</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(ticket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">delay(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你们好&quot;</span>);</span><br><span class="line">&#125;).run();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; run, cancel &#125; = delay(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你好：&quot;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">run(<span class="string">&quot;吉他&quot;</span>);</span><br><span class="line">run(<span class="string">&quot;吉他&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你们好</span></span><br><span class="line"><span class="comment">// 你好： 吉他</span></span><br></pre></td></tr></table></figure>

<h1 id="进度值映射"><a href="#进度值映射" class="headerlink" title="进度值映射"></a>进度值映射</h1><p>进度映射，比较只有 10%的进度，确要显示50%的进度的场景。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustProgress</span>(<span class="params">progress: <span class="built_in">number</span>, mapping: &#123; real: <span class="built_in">number</span>; target: <span class="built_in">number</span> &#125;[] = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (progress &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mapping || mapping.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> progress;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一个</span></span><br><span class="line">    <span class="keyword">const</span> f = mapping[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (progress &lt;= f.real) &#123;</span><br><span class="line">        <span class="keyword">return</span> progress * (f.target / f.real);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后一个</span></span><br><span class="line">    <span class="keyword">const</span> l = mapping[mapping.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (progress &gt;= l.target) &#123;</span><br><span class="line">        <span class="keyword">return</span> l.target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> curIndex = mapping.findIndex(<span class="function"><span class="params">m</span> =&gt;</span> m.real &gt;= progress);</span><br><span class="line">    <span class="keyword">if</span> (!curIndex) &#123;</span><br><span class="line">        <span class="keyword">return</span> progress;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> cur = mapping[curIndex];</span><br><span class="line">    <span class="keyword">const</span> pre = mapping[curIndex - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//     原基数     +   实际进度/最大实际进度 * 期望间距</span></span><br><span class="line">    <span class="keyword">return</span> pre.target + (progress - pre.real) / (cur.real - pre.real) * (cur.target - pre.target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapping = [&#123;</span><br><span class="line">    <span class="attr">real</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="number">0</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">real</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="number">50</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">real</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="number">80</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">real</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="number">100</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;15&quot;</span>, adjustProgress(<span class="number">15</span>, mapping));  <span class="comment">// 15 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;25&quot;</span>, adjustProgress(<span class="number">25</span>, mapping)); <span class="comment">// 25 41.66666666666667</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;50&quot;</span>, adjustProgress(<span class="number">50</span>, mapping)); <span class="comment">// 50 70</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;60&quot;</span>, adjustProgress(<span class="number">60</span>, mapping)); <span class="comment">// 60 80</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;100&quot;</span>, adjustProgress(<span class="number">100</span>, mapping)); <span class="comment">// 100 100</span></span><br></pre></td></tr></table></figure>

<h1 id="滑滚动页面到顶部"><a href="#滑滚动页面到顶部" class="headerlink" title="滑滚动页面到顶部"></a>滑滚动页面到顶部</h1><p>PC端滚动的根元素是<code>document.documentElement</code>,<br>移动端滚动的的根元素是<code>document.body</code>,<br>有一个更好的属性<code>document.scrollingElement</code>能自己识别文档的滚动元素， 其在PC端等于document.documentElement, 其在移动端等于<code>document.body</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// smooth 选项在Safari上支持不好</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(&#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    <span class="keyword">if</span> (scrollTop &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">        <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, scrollTop - scrollTop / <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="禁止选择和复制"><a href="#禁止选择和复制" class="headerlink" title="禁止选择和复制"></a>禁止选择和复制</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;contextmenu&#x27;</span>, <span class="string">&#x27;selectstart&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(ev, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        ev.preventDefault();</span><br><span class="line">        ev.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>CSS</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    -khtml-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="禁止图片拖拽"><a href="#禁止图片拖拽" class="headerlink" title="禁止图片拖拽"></a>禁止图片拖拽</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;dragstart&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(ev, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        ev.preventDefault();</span><br><span class="line">        ev.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="自增长ID"><a href="#自增长ID" class="headerlink" title="自增长ID"></a>自增长ID</h1><p>自己生产自增长的ID值，当然可以更复杂一些。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(getId()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(getId()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具函数</category>
      </categories>
      <tags>
        <tag>工具函数</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器执行js的过程</title>
    <url>/posts/e7f6493b.html</url>
    <content><![CDATA[<h1 id="首先我们来说一下浏览器是由哪两部分组成？"><a href="#首先我们来说一下浏览器是由哪两部分组成？" class="headerlink" title="首先我们来说一下浏览器是由哪两部分组成？"></a>首先我们来说一下浏览器是由哪两部分组成？</h1><ol>
<li>渲染引擎： 用来解析HTML和CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit</li>
<li>JS引擎： 也称为javascript解释器，用来读取网页中的javascript代码，对其处理后运行，比如chrome浏览器的V8</li>
<li>注： 浏览器并不会执行javascript代码，而是通过内置的js引擎(解释器)来执行javascript代码<br>javascript引擎执行代码时逐行解释每一句源码(转换为机器语言)，然后由计算机去执行，所以javascript语言归为脚本语言，会逐行解释执行</li>
</ol>
<span id="more"></span>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ol>
<li>大多数浏览器（chrome）让一个单线程供用于执行<code>JavaScript</code>和更新用户界面。这个线程通常被称为”浏览器UI线程”，<br>每个时刻只能执行其中一种操作，这意味着当<code>JavaScript</code>代码正在执行时用户界面无法响应输入，<br>反之亦然。这样做是因为<code>JavaScript</code>代码的作用就是操作<code>DOM</code>更新用户页面，<br>用同一个线程来做这两件事情可以更高效。</li>
<li>浏览器UI线程的工作基于一个简单的队列系统，任务会被保存到队列中直到进程空闲。一旦空闲，队列中的下一个任务就被重新提取出来并运行。这些任务要么是运行javascript代码，要么执行UI更新，包括重绘和重排。</li>
<li>重要的事情说三遍，<code>javascript是单线程运行 -- 单线程运行 -- 单线程运行</code>，千万不要被setTimeout()和setInterVal()这种函数迷惑而误以为它是多线程。</li>
</ol>
<h1 id="接下来直入主题"><a href="#接下来直入主题" class="headerlink" title="接下来直入主题"></a>接下来直入主题</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>一般来说，<code>&lt;script&gt;</code>标签每次出现都会霸道的让页面等待脚本的解析和执行。无论当前的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这在页面的生存周期是必要的，因为脚本的执行过程可能会改变页面的内容。</span><br><span class="line">### 比如</span><br><span class="line">在页面中使用```document.write()```。方法可向文档写入 HTML 表达式或 JavaScript 代码</span><br><span class="line"></span><br><span class="line">当javascript代码是内嵌在html里面时，这点还是比较容易理解，</span><br><span class="line">但当javascript是外链文件时稍微有点负载，因为存在一个加载过程，</span><br><span class="line">而且浏览器加载好这个js文件之后往往还对其缓存。</span><br><span class="line"></span><br><span class="line">### 例子</span><br><span class="line">```html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">  &lt;script type=&#x27;text/javascript&#x27; src=&#x27;js/f2.js&#x27;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt; </span><br></pre></td></tr></table></figure>
<p>当一个javascript文件被加载时是否会阻塞其他javascript文件或者其他文件的加载呢？</p>
<p>答案是：各种浏览器的低版本的处理是当一个js文件在加载时，会同时阻塞页面其他文件的加载。<br>（包括其他的js文件）但是ie8、Firfox3.5、Safari 4和Chrome 2都允许并行下载javascript文件，<br>但是呢，javascript下载过程仍然会阻塞其他资源的下载，比如图片。尽管javascript脚本的下载过程不会相互影响，但页面仍然必须等待所有的javascript代码下载并执行完成才能继续。</p>
<h2 id="2-优化的方法（技巧）"><a href="#2-优化的方法（技巧）" class="headerlink" title="2. 优化的方法（技巧）"></a>2. 优化的方法（技巧）</h2><ol>
<li>由于脚本会阻塞页面其他资源的下载，因此我们一般将所有的<code>&lt;script&gt;</code>标签放到<code>&lt;body&gt;</code>标签的底部，已尽量减少对整个页面下载的影响。</li>
<li>将能合并的js文件合并</li>
<li>无阻塞脚本</li>
</ol>
<p>现在比较常用的方法就是动态加载执行脚本。原理是DOM,可以通过js动态的创建HTML中所有的内容，其根本在于<code>&lt;script&gt;</code><br>标签与页面中其他元素并无差异，都能通过DOM引用，都能在文档中移动，删除和创建。<br>文件在该<code>&lt;script&gt;</code>元素被添加到页面时开始现在，它不会阻止其他文件下载，只在执行阶段阻塞渲染。<br>这种方法并不是说它在执行不会阻塞其他<code>javascript</code>代码，而是不会阻塞其他资源的下载等其他任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scriptElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  scriptElement.type = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">  scriptElement.async = <span class="literal">true</span>;</span><br><span class="line">  scriptElement.src = url;</span><br><span class="line">  (<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>]).appendChild(scriptElement); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>H5常见机型适配</title>
    <url>/posts/b6963c75.html</url>
    <content><![CDATA[<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">360px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">640px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">411px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">731px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// iPhone5</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">320px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">568px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// iPhone6</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">667px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// iPhone6 放大版</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>:<span class="number">414px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">736px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// iPhoneX、iPhoneXS</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">812px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">3</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// iPhoneXR iPhone11</span></span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">414px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">896px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">2</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>react项目中常用hooks封装</title>
    <url>/posts/9c94eec4.html</url>
    <content><![CDATA[<h2 id="useOnce"><a href="#useOnce" class="headerlink" title="useOnce"></a>useOnce</h2><p><strong>类似于componentDidMount</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useOnce = <span class="function">(<span class="params">fn: () =&gt; any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = React.useRef(fn);</span><br><span class="line">    React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> effect: any = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> ref.current === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            effect = ref.current();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> effect === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                effect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, [ref]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>使用方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useOnce &#125; from &#x27;useOnce&#x27;;</span><br><span class="line"></span><br><span class="line">useOnce(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;hello useOnce&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h2><p><strong>事件的发布订阅</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">  <span class="attr">callbacks</span>: &#123; [x: <span class="built_in">string</span>]: <span class="built_in">Function</span>[] &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.callbacks = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">on</span>(<span class="params">event: <span class="built_in">string</span>, cb: <span class="built_in">Function</span></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">this</span>.callbacks[event]) <span class="built_in">this</span>.callbacks[event] = [];</span><br><span class="line">      <span class="built_in">this</span>.callbacks[event].push(cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit&lt;T <span class="keyword">extends</span> <span class="built_in">any</span> = <span class="literal">undefined</span>&gt;(event: <span class="built_in">string</span>, data?: T) &#123;</span><br><span class="line">      <span class="keyword">const</span> cbs = <span class="built_in">this</span>.callbacks[event];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cbs) &#123;</span><br><span class="line">          cbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(data));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">event: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.callbacks[event] = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> EventBus();</span><br></pre></td></tr></table></figure>

<p><strong>使用方法</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;eventBus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">eventBus.emit(<span class="string">&#x27;发布&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">eventBus.on(<span class="string">&#x27;发布&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;监听&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h2><p><strong>获取地址栏参数(all)</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useSearchParams:React.FC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> searchParams: <span class="built_in">any</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> searchArr = <span class="built_in">window</span>.location.search.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (searchArr) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> searchItem <span class="keyword">of</span> searchArr) &#123;</span><br><span class="line">      <span class="keyword">const</span> itemArr = searchItem.split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">      searchParams[itemArr[<span class="number">0</span>]] = itemArr[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> searchParams;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> searchParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useSearchParams;</span><br></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useSearchParams <span class="keyword">from</span> <span class="string">&#x27;effect/useSearchParams&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo:React.FC = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// http://localhost:4000/posts/9c94eec4.html?a=1&amp;b=2</span></span><br><span class="line">  <span class="keyword">const</span> &#123; a, b &#125; = useSearchParams(); <span class="comment">// a: 1 b: 2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span>测试useSearchParams  hooks方法<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Rollup构建工具包</title>
    <url>/posts/a2f867b7.html</url>
    <content><![CDATA[<h1 id="使用Rollup构建工具包"><a href="#使用Rollup构建工具包" class="headerlink" title="使用Rollup构建工具包"></a>使用Rollup构建工具包</h1><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol>
<li>实现一个 Javascript 工具函数库</li>
<li>支持 Typescript</li>
</ol>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir demo cd demo</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="初始化-Typescript-环境"><a href="#初始化-Typescript-环境" class="headerlink" title="初始化 Typescript 环境"></a>初始化 Typescript 环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add typescript -D</span><br></pre></td></tr></table></figure>

<p>然后初始化快速生成一个 <code>tsconfig.json</code> 文件，该文件属于 Typescript 的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>或者可以手动新建一个<code>tsconfig.json</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch tsconfig.json</span><br></pre></td></tr></table></figure>

<p>内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;types/&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;DOM&quot;</span>,<span class="string">&quot;ES2015&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;declarationDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;**/node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时需要将 <code>package.json</code> 文件中修改/新增:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">- <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">+ <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./dist/index.cjs.js&quot;</span>,</span><br><span class="line">+ <span class="string">&quot;module&quot;</span>: <span class="string">&quot;./dist/index.esm.js&quot;</span>,</span><br><span class="line">+ <span class="string">&quot;types&quot;</span>: <span class="string">&quot;./dist/index.d.ts&quot;</span>,</span><br><span class="line">+ <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">+   <span class="string">&quot;dist&quot;</span></span><br><span class="line">+ ],</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>字段是用于约定在发包的时候NPM 会发布包含的文件和文件夹。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">__注意：__  files 字段中文件夹名直接写名字，不要包含 ./ 字符，否则打包出来的产物不会包含该文件夹。</span><br><span class="line"></span><br><span class="line">到这一步，就可以流畅编写 Typescript 文件</span><br><span class="line"></span><br><span class="line">## 初始化 Rollup 打包环境</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">yarn add rollup -D</span><br><span class="line">yarn add rollup/plugin-typescript2 -D</span><br><span class="line">yarn add @rollup/plugin-node-resolve -D</span><br><span class="line">yarn add @rollup/plugin-commonjs -D</span><br></pre></td></tr></table></figure>

<p>安装了 <code>rollup</code>，以及支持 <code>TS</code>、处理路径和 <code>commonjs</code> 的插件</p>
<h3 id="配置-rollup-config-js"><a href="#配置-rollup-config-js" class="headerlink" title="配置 rollup.config.js"></a>配置 rollup.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-typescript2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span>;</span><br><span class="line"><span class="comment">// import fs from &#x27;fs&#x27;;</span></span><br><span class="line"><span class="comment">// import path from &#x27;path&#x27;;</span></span><br><span class="line"><span class="comment">// const files = fs.readdirSync(path.join(__dirname, &#x27;./src&#x27;));</span></span><br><span class="line"><span class="comment">// const formatModuleName = (module) =&gt; module.split(&#x27;.&#x27;)[0].replace(/-(\w)/g/, (all, letter) =&gt; letter.toUpperCase());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">dir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">      <span class="attr">entryFileNames</span>: <span class="string">&#x27;[name].cjs.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [resolve(), commonjs(), typescript()],</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">dir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">      <span class="attr">entryFileNames</span>: <span class="string">&#x27;[name].esm.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [resolve(), commonjs(), typescript()],</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>可以同时生成支持 CommonJS 和 ESModule 的文件，在前面 <code>tsconfig.json</code> 配置下还会生成 <code>index.d.ts</code> 文件用于指明类型声明。</p>
<h3 id="修改-scripts"><a href="#修改-scripts" class="headerlink" title="修改 scripts"></a>修改 scripts</h3><p>来到 <code>package.json</code> 文件中，为了使用快捷指令，以及调用<code> rollup</code> 作为开发的预览功能，需要配置 <code>scripts</code> 字段如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">+  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;rollup -w -c&quot;</span>,</span><br><span class="line">+  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span></span><br><span class="line">-  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: run tests from root\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>现在我们可以使用<code>yarn dev</code>，就能在开发的时候实时编译。</p>
<p>也可以使用<code>yarn build</code>完成项目打包</p>
<h3 id="ESlint-配置"><a href="#ESlint-配置" class="headerlink" title="ESlint 配置"></a>ESlint 配置</h3><p>安装 eslint 开发环境依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add eslint -D</span><br></pre></td></tr></table></figure>

<p>初始化一个配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure>

<p><img src="www.ruochencn.com/202208022108748.png" alt="配置"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true,</span><br><span class="line">    &quot;commonjs&quot;: true,</span><br><span class="line">    &quot;es2021&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;extends&quot;: [&quot;eslint:recommended&quot;, &quot;plugin:@typescript-eslint/recommended&quot;],</span><br><span class="line">  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    &quot;ecmaVersion&quot;: 8</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;plugins&quot;: [&quot;@typescript-eslint&quot;],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;@typescript-eslint/no-unused-vars&quot;:  [</span><br><span class="line">      &quot;error&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;varsIgnorePattern&quot;: &quot;^_&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;no-unused-vars&quot;: &quot;off&quot;,</span><br><span class="line">    &quot;no-console&quot;: &quot;warn&quot;,</span><br><span class="line">    &quot;space-before-function-paren&quot;: &quot;warn&quot;,</span><br><span class="line">    &quot;semi&quot;: &quot;warn&quot;,</span><br><span class="line">    &quot;quotes&quot;: [&quot;warn&quot;, &quot;single&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Prettier-代码自动格式化"><a href="#Prettier-代码自动格式化" class="headerlink" title="Prettier 代码自动格式化"></a>Prettier 代码自动格式化</h3><p>安装 <code>prettier</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add prettier -D</span><br></pre></td></tr></table></figure>

<p>然后新建一个<code> .prettierrc.json</code> 的配置文件，内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;printWidth&quot;</span>: <span class="number">100</span>, <span class="comment">//单行长度</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span>: <span class="number">2</span>, <span class="comment">//缩进长度</span></span><br><span class="line">  <span class="attr">&quot;useTabs&quot;</span>: <span class="literal">false</span>, <span class="comment">//使用空格代替tab缩进</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span>: <span class="literal">true</span>, <span class="comment">//句末使用分号</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span>: <span class="literal">true</span>, <span class="comment">//使用单引号</span></span><br><span class="line">  <span class="attr">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>, <span class="comment">//在对象前后添加空格-eg: &#123; foo: bar &#125;</span></span><br><span class="line">  <span class="attr">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span> <span class="comment">//单参数箭头函数参数周围使用圆括号-eg: (x) =&gt; x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="预发包前升级版本并构建"><a href="#预发包前升级版本并构建" class="headerlink" title="预发包前升级版本并构建"></a>预发包前升级版本并构建</h3><p>为了实现快捷发包，可以在<code>package.json</code>文件的 <code>scripts</code> 字段添加快捷命令，用于规范发包。</p>
<p>添加如下命令，可以在发包（执行 <code>npm publish </code>命令）之前首先会提示升级包本本，然后<code>build</code>构建出产物</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;prepublish&quot;</span>: <span class="string">&quot;yarn version &amp;&amp; yarn build&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="git初始化"><a href="#git初始化" class="headerlink" title="git初始化"></a>git初始化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>新建一个<code>.gitignore</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line">.DS_Store</span><br><span class="line">.yarn-error.log</span><br></pre></td></tr></table></figure>

<p>然后链接远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line">git remote add origin xxxxxx</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode中setting配置</title>
    <url>/posts/4282d027.html</url>
    <content><![CDATA[<h2 id="vsCode中setting基本配置"><a href="#vsCode中setting基本配置" class="headerlink" title="vsCode中setting基本配置"></a>vsCode中setting基本配置</h2><p>项目中总结出来的一些相关配置</p>
<span id="more"></span>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;prettier.eslintIntegration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="comment">// 格式化stylus, 需安装Manta&#x27;s Stylus Supremacy插件</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertColons&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入冒号</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertSemicolons&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入分好</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertBraces&quot;</span>: <span class="literal">false</span>, <span class="comment">// 是否插入大括号</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertNewLineAroundImports&quot;</span>: <span class="literal">false</span>, <span class="comment">// import之后是否换行</span></span><br><span class="line">	<span class="attr">&quot;stylusSupremacy.insertNewLineAroundBlocks&quot;</span>: <span class="literal">false</span>, <span class="comment">// 两个选择器中是否换行</span></span><br><span class="line">	<span class="attr">&quot;vetur.validation.template&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;vetur.experimental.templateInterpolationService&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">&quot;fileheader.customMade&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;Description&quot;</span>: <span class="string">&quot;不积跬步，无以至千里&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.0.1&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Company&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Author&quot;</span>: <span class="string">&quot;林深&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;Date&quot;</span>: <span class="string">&quot;Do not edit&quot;</span>, <span class="comment">// 文件创建时间(不变)</span></span><br><span class="line">		<span class="attr">&quot;LastEditors&quot;</span>: <span class="string">&quot;林深&quot;</span>, <span class="comment">// 文件最后编辑者</span></span><br><span class="line">		<span class="attr">&quot;LastEditTime&quot;</span>: <span class="string">&quot;Do not edit&quot;</span> <span class="comment">// 文件最后编辑时间</span></span><br><span class="line">&#125;,</span><br><span class="line">	<span class="attr">&quot;comment-ts.includeAuthorTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;comment-ts.includeDescriptionTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;commentTranslate.targetLanguage&quot;</span>: <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commentTranslate.multiLineMerge&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.authorName&quot;</span>: <span class="string">&quot;林深&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.includeDescriptionTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.includeAuthorTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.includeDateTag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.enableHungarianNotationEvaluation&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;docthis.inferTypesFromNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;comment-ts.authorName&quot;</span>: <span class="string">&quot;林深&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;window.restoreWindows&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;terminal.integrated.commandsToSkipShell&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;psl.stepIn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;psl.stepOut&quot;</span>,</span><br><span class="line">        <span class="string">&quot;psl.stepOver&quot;</span>,</span><br><span class="line">        <span class="string">&quot;psl.sendToHostTerminal&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;[typescript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[typescriptreact]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class="literal">true</span>, <span class="comment">//让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">    <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;eslint.options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;extensions&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;.html&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.js&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.vue&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.jsx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.ts&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.tsx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;.d.ts&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">	<span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>, <span class="comment">//制表符符号eslint</span></span><br><span class="line">	<span class="attr">&quot;eslint.autoFixOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[jsonc]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.json-language-features&quot;</span></span><br><span class="line">    &#125;, <span class="comment">//保存时自动将代码按ESLint格式进行修复</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>vite和webpack的区别</title>
    <url>/posts/3866f404.html</url>
    <content><![CDATA[<h2 id="webpack打包过程"><a href="#webpack打包过程" class="headerlink" title="webpack打包过程"></a>webpack打包过程</h2><ol>
<li>识别入口文件</li>
<li>通过逐层识别模块依赖。（Commonjs、amd或者es6的import,webpack都会对其进行分析，来获取代码的依赖）</li>
<li>webpack做的就是分析代码、转换代码、编译代码、输出代码</li>
<li>最终行程打包后的代码</li>
</ol>
<span id="more"></span>
<h2 id="webpack打包原理"><a href="#webpack打包原理" class="headerlink" title="webpack打包原理"></a>webpack打包原理</h2><ol>
<li>先逐级递归识别依赖，构建依赖图谱</li>
<li>将代码转化成<code>AST</code>抽象语法树</li>
<li>在<code>AST</code>阶段中去处理代码</li>
<li>把<code>AST</code>抽象语法树编程浏览器可以识别的代码然后输出</li>
</ol>
<p><strong>重点：这里需要递归识别依赖，构建依赖图谱。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&#x27;./app.js&#x27;</span>:</span><br><span class="line">   &#123; <span class="attr">dependencies</span>: &#123; <span class="string">&#x27;./test1.js&#x27;</span>: <span class="string">&#x27;./test1.js&#x27;</span> &#125;,</span><br><span class="line">     <span class="attr">code</span>:</span><br><span class="line">      <span class="string">&#x27;&quot;use strict&quot;;\n\nvar _test = _interopRequireDefault(require(&quot;./test1.js&quot;));\n\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; &quot;default&quot;: obj &#125;; &#125;\n\nconsole.log(test</span></span><br><span class="line"><span class="string">1);&#x27;</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;./test1.js&#x27;</span>:</span><br><span class="line">   &#123; <span class="attr">dependencies</span>: &#123; <span class="string">&#x27;./test2.js&#x27;</span>: <span class="string">&#x27;./test2.js&#x27;</span> &#125;,</span><br><span class="line">     <span class="attr">code</span>:</span><br><span class="line">      <span class="string">&#x27;&quot;use strict&quot;;\n\nvar _test = _interopRequireDefault(require(&quot;./test2.js&quot;));\n\nfunction _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; &quot;default&quot;: obj &#125;; &#125;\n\nconsole.log(\&#x27;th</span></span><br><span class="line"><span class="string">is is test1.js \&#x27;, _test[&quot;default&quot;]);&#x27;</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;./test2.js&#x27;</span>:</span><br><span class="line">   &#123; <span class="attr">dependencies</span>: &#123;&#125;,</span><br><span class="line">     <span class="attr">code</span>:</span><br><span class="line">      <span class="string">&#x27;&quot;use strict&quot;;\n\nObject.defineProperty(exports, &quot;__esModule&quot;, &#123;\n  value: true\n&#125;);\nexports[&quot;default&quot;] = void 0;\n\nfunction test2() &#123;\n  console.log(\&#x27;this is test2 \&#x27;);\n&#125;\n\nvar _default = tes</span></span><br><span class="line"><span class="string">t2;\nexports[&quot;default&quot;] = _default;&#x27;</span> &#125; &#125; </span><br></pre></td></tr></table></figure>

<h2 id="vite原理"><a href="#vite原理" class="headerlink" title="vite原理"></a>vite原理</h2><ul>
<li>当声明一个<code>script</code>标签类型为<code>module</code>时<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span> src=<span class="string">&quot;/src/main.js&quot;</span>&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>浏览器就会想服务器发起一个GET<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/src/main.js请求main.js文件：</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// /src/main.js:</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li>浏览器请求到了main.js文件，检测到内部含有import引入的包，又会对其内部的 import 引用发起 HTTP 请求获取模块的内容文件</li>
<li>如：GET <a href="http://localhost:3000/@modules/vue.js">http://localhost:3000/@modules/vue.js</a></li>
<li>如：GET <a href="http://localhost:3000/src/App.vue">http://localhost:3000/src/App.vue</a></li>
<li>Vite 的主要功能就是通过劫持浏览器的这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器，vite整个过程中没有对文件进行打包编译，所以其运行速度比原始的webpack开发编译速度快出许多</li>
</ul>
<h2 id="webpack缺点1"><a href="#webpack缺点1" class="headerlink" title="webpack缺点1"></a>webpack缺点1</h2><p><strong>缓慢的服务启动</strong></p>
<ul>
<li>当冷启动开发服务器时，基于打包器的方式是在提供服务前去急切地抓取和构建你的整个应用</li>
</ul>
<h2 id="vite改进"><a href="#vite改进" class="headerlink" title="vite改进"></a>vite改进</h2><ul>
<li>Vite 通过在一开始将应用中的模块区分为 依赖 和 源码 两类，改进了开发服务器启动时间。</li>
<li>依赖 大多为纯 JavaScript 并在开发时不会变动。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会以某些方式（例如 ESM 或者 CommonJS）被拆分到大量小模块中</li>
<li>Vite 将会使用 esbuild 预构建依赖。Esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍</li>
<li>源码 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载。（例如基于路由拆分的代码模块）。</li>
<li>Vite 以 原生 ESM 方式服务源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入的代码，即只在当前屏幕上实际使用时才会被处理</li>
</ul>
<h2 id="webpack缺点2"><a href="#webpack缺点2" class="headerlink" title="webpack缺点2."></a>webpack缺点2.</h2><p><strong>用node.js去实现</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL3N6X21tYml6X3BuZy8zR1BUMUNIaWFTVnR5WVppYmpVZ2h4Yzh5VEtoUmliQlZoY21SelJJNXl6Y1B4NWpFeFFIbUJpYTBJZVh1b2lianlOeUNNSUFFaGFWaHRpYWt0cUsyWkh3TTVnZy82NDA?x-oss-process=image/format,png" alt="img"></p>
<h2 id="vite改进-1"><a href="#vite改进-1" class="headerlink" title="vite改进"></a>vite改进</h2><ul>
<li>Vite 将会使用 esbuild 预构建依赖。Esbuild 使用 Go 编写，并且比以 Node.js 编写的打包器预构建依赖快 10-100 倍。</li>
</ul>
<h2 id="webpack致命缺点3"><a href="#webpack致命缺点3" class="headerlink" title="webpack致命缺点3"></a>webpack致命缺点3</h2><p><strong>热更新效率低下</strong></p>
<ul>
<li>当基于打包器启动时，编辑文件后将重新构建文件本身。显然我们不应该重新构建整个包，因为这样更新速度会随着应用体积增长而直线下降。</li>
<li>一些打包器的开发服务器将构建内容存入内存，这样它们只需要在文件更改时使模块图的一部分失活[1]，但它也仍需要整个重新构建并重载页面。这样代价很高，并且重新加载页面会消除应用的当前状态，所以打包器支持了动态模块热重载（HMR）：允许一个模块 “热替换” 它自己，而对页面其余部分没有影响。这大大改进了开发体验 - 然而，在实践中我们发现，即使是 HMR 更新速度也会随着应用规模的增长而显著下降</li>
</ul>
<h2 id="vite改进-2"><a href="#vite改进-2" class="headerlink" title="vite改进"></a>vite改进</h2><ul>
<li><p>在 Vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失效（大多数时候只需要模块本身），使 HMR 更新始终快速，无论应用的大小。</p>
</li>
<li><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求</p>
</li>
</ul>
<h2 id="vite缺点"><a href="#vite缺点" class="headerlink" title="vite缺点"></a>vite缺点</h2><ol>
<li>生态不如webpack</li>
</ol>
<ul>
<li>wepback牛逼之处在于loader和plugin非常丰富,不过我认为生态只是时间问题，现在的vite,更像是当时刚出来的M1芯片Mac，我当时非常看好M1的Mac，毫不犹豫买了，现在也没什么问题</li>
</ul>
<ol start="2">
<li>prod环境的构建，目前用的Rollup</li>
</ol>
<ul>
<li>esbuild对于css和代码分割不是很友好</li>
</ul>
<ol start="3">
<li>还没有被大规模使用,很多问题或者诉求没有真正暴露出来</li>
</ol>
<ul>
<li>vite真正崛起那一天，是跟vue3有关系的,当vue3广泛开始使用在生产环境的时候，vite也就大概率意味着被大家慢慢开始接受了</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>react基础</title>
    <url>/posts/66450fce.html</url>
    <content><![CDATA[<h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><h3 id="1、react事件绑定原理"><a href="#1、react事件绑定原理" class="headerlink" title="1、react事件绑定原理"></a>1、react事件绑定原理</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;div onClick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>react 并不是将<code>click</code>事件绑定到了<code>div</code>真实的<code>DOM</code>上，而是在<code>document</code>处监听了所有的事件，当事件发生并且冒泡到<code>document</code>处的时候，<br>react 将事件内容封装并交由真正的处理函数执行。这样的方式不仅仅减少了内存的消耗，还能在组件挂载销毁时统一订阅和移除事件。</p>
<span id="more"></span>


<p>还有， 冒泡到<code>document</code>上的事件也不是原生的浏览器事件，而是由react自己合成的事件，所以不想要事件冒泡的话应该调用<code>event.preventDefault()</code>方法，而<br>不是调用<code>event.stopProppagation()</code>方法</p>
<h3 id="2、React的事件和普通的HTML事件有什么不同？"><a href="#2、React的事件和普通的HTML事件有什么不同？" class="headerlink" title="2、React的事件和普通的HTML事件有什么不同？"></a>2、React的事件和普通的HTML事件有什么不同？</h3><h4 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h4><ol>
<li>对于事件名称的命名方式，原生事件为全小写，而react 事件采用小驼峰</li>
<li>对于事件函数处理语法，原生事件为字符串，react 事件为函数</li>
<li>react 事件不能采取<code>return false</code>的方法来阻止浏览器的默认行为，而必须要地明确地调用<code>preventDefault()</code>来阻止默认行为</li>
</ol>
<h3 id="合成事件是-react-模拟原生-DOM-事件所有能力的一个事件对象-优点"><a href="#合成事件是-react-模拟原生-DOM-事件所有能力的一个事件对象-优点" class="headerlink" title="合成事件是 react 模拟原生 DOM 事件所有能力的一个事件对象 优点"></a>合成事件是 react 模拟原生 DOM 事件所有能力的一个事件对象 优点</h3><ol>
<li>兼容所有的浏览器，更好的跨平台</li>
<li>将事件统一存放在一个数组，避免频繁的新增和删除（垃圾回收）</li>
<li>方便react统一管理和事件机制</li>
</ol>
<h3 id="3、-React-组件中怎么做事件代理？它的原理是什么？"><a href="#3、-React-组件中怎么做事件代理？它的原理是什么？" class="headerlink" title="3、 React 组件中怎么做事件代理？它的原理是什么？"></a>3、 React 组件中怎么做事件代理？它的原理是什么？</h3><p>react基于<code>Virtual DOM</code>实现一个<code>事件合成层</code>，定义的事件处理器会接收到一个合成事件对象的实例。它符合W3CW标准，且与原生浏览器事件有相同的接口。<br>支持冒泡事件，所有的事件都自动绑定在最外层。</p>
<h4 id="在React底层，主要对合成事件做了：事件委派和自动绑定。"><a href="#在React底层，主要对合成事件做了：事件委派和自动绑定。" class="headerlink" title="在React底层，主要对合成事件做了：事件委派和自动绑定。"></a>在React底层，主要对合成事件做了：事件委派和自动绑定。</h4><ul>
<li><strong>事件委派：</strong> react会把所有事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上w维持了一个映射来保存s所有组件内部事件监听和处理函数</li>
<li><strong>自动绑定：</strong> react组件中，每个方法的上下文都对指向该组件的实例，即自动绑定 <strong>this</strong> 为当前组件</li>
</ul>
<h3 id="4、React-高阶组件、Render-props、hooks-有什么区别，为什么要不断迭代"><a href="#4、React-高阶组件、Render-props、hooks-有什么区别，为什么要不断迭代" class="headerlink" title="4、React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代"></a>4、React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代</h3><p><strong>这三个是目前react解决代码复用的主要方式。</strong></p>
<ul>
<li>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。具体而言，高阶组件是参数为组件，返回值为新组件的函数。</li>
<li>render props是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术，更具体的说，render prop 是一个用于告知组件需要渲染什么内容的函数 prop。</li>
<li>通常，render props 和高阶组件只渲染一个子节点。让 Hook 来服务这个使用场景更加简单。这两种模式仍有用武之地，（例如，一个虚拟滚动条组件或许会有一个 <code>renderltem</code> 属性，或是一个可见的容器组件或许会有它自己的 DOM 结构）。但在大部分场景下，<code>Hook</code> 足够了，并且能够帮助减少嵌套。 </li>
</ul>
<p><strong>HOC 官方解释∶</strong></p>
<pre><code>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。
HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。
</code></pre>
<p><strong>简单的来说，HOC是一种组件的设计模式，HOC接受一个组件和额外的参数（如果需要），返回一个新的组件。HOC 是纯函数，没有副作用。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hoc的定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withSubscription</span>(<span class="params">WrappedComponent, selectData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(props);</span><br><span class="line">      <span class="built_in">this</span>.state = &#123;</span><br><span class="line">        <span class="attr">data</span>: selectData(DataSource, props)</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一些通用的逻辑处理</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// ... 并使用新数据渲染被包装的组件!</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> BlogPostWithSubscription = withSubscription(BlogPost,</span><br><span class="line">  <span class="function">(<span class="params">DataSource, props</span>) =&gt;</span> DataSource.getBlogPost(props.id));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="hoc的优缺点∶"><a href="#hoc的优缺点∶" class="headerlink" title="hoc的优缺点∶"></a>hoc的优缺点∶</h4><ul>
<li>优点∶ 逻辑服用、不影响被包裹组件的内部逻辑</li>
<li>缺点：hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖</li>
</ul>
<h4 id="Render-props-官方解释∶"><a href="#Render-props-官方解释∶" class="headerlink" title="Render props 官方解释∶"></a>Render props 官方解释∶</h4><pre><code>”render prop”是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术
</code></pre>
<p>具有<code>render prop</code> 的组件接受一个返回 <strong>react</strong> 元素的函数，将render的渲染逻辑注入到组件内部，在这里 <strong>render</strong> 的命名<br>可以使其他有效的标识符</p>
<figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// DataProvider组件内部的渲染逻辑如下</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProvider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Components</span> </span>&#123;</span><br><span class="line">     state = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>共享数据组件自己内部的渲染逻辑<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123; this.props.render(this.state) &#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line">&lt;DataProvider render=&#123;<span class="function"><span class="params">data</span> =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;data.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)&#125;/&gt;</span><br></pre></td></tr></table></figure>
<h4 id="由此可以看到，render-props的优缺点也很明显∶"><a href="#由此可以看到，render-props的优缺点也很明显∶" class="headerlink" title="由此可以看到，render props的优缺点也很明显∶"></a>由此可以看到，render props的优缺点也很明显∶</h4><ul>
<li>优点：数据共享、代码复用，将组件内的state作为props传递给调用者，将渲染逻辑交给调用者。</li>
<li>缺点：无法在 return 语句外访问数据、嵌套写法不够优雅</li>
</ul>
<h4 id="Hooks-官方解释∶"><a href="#Hooks-官方解释∶" class="headerlink" title="Hooks 官方解释∶"></a>Hooks 官方解释∶</h4><pre><code>Hook是 React 16.8 的新增特性。
它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。
通过自定义hook，可以复用代码逻辑。
</code></pre>
<figure class="highlight typescript"><figcaption><span>jsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义一个获取订阅数据的hook</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useSubscription</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = DataSource.getComments();</span><br><span class="line">  <span class="keyword">return</span> [data];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommentList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;data&#125; = props;</span><br><span class="line">  <span class="keyword">const</span> [subData] = useSubscription();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;CommentList data=<span class="string">&#x27;hello&#x27;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>以上可以看出，hook解决了hoc的prop覆盖的问题，同时使用的方式解决了render props的嵌套地狱的问题。hook的优点如下∶</p>
<ul>
<li>使用直观</li>
<li>解决hoc的prop 重名问题</li>
<li>解决render props 因共享数据 而出现嵌套地狱的问题</li>
<li>能在return之外使用数据的问题</li>
</ul>
<p>需要注意的是∶hook只能在组件顶层使用，不可在分支语句中使用。</p>
<p><strong>总结：</strong> Hoc、render props和hook都是为了解决代码复用的问题，但是hoc和render props都有特定的使用场景和明显的缺点。hook是react16.8更新的新的API，让组件逻辑复用更简洁明了，同时也解决了hoc和render props的一些缺点。</p>
<h3 id="5、对React-Fiber的理解，它解决了什么问题？"><a href="#5、对React-Fiber的理解，它解决了什么问题？" class="headerlink" title="5、对React-Fiber的理解，它解决了什么问题？"></a>5、对React-Fiber的理解，它解决了什么问题？</h3><p>React V15 在渲染时，会递归比对 VirtualDOM 树，找出需要变动的节点，然后同步更新它们， 一气呵成。这个过程期间， React 会占据浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧，<br><strong>导致用户感觉到卡顿</strong></p>
<p>为了给用户制造一种应用很快的“假象”，不能让一个任务长期霸占着资源。 可以将浏览器的渲染、布局、绘制、资源加载(例如 HTML 解析)、事件响应、脚本执行视作操作系统的“进程”，需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率。</p>
<p>所以 React 通过Fiber 架构，让这个执行过程变成可被中断。“适时”地让出 CPU 执行权，除了可以让浏览器及时地响应用户的交互，还有其他好处:</p>
<ul>
<li>分批延时对DOM进行操作，避免一次性操作大量 DOM 节点，可以得到更好的用户体验；</li>
<li>给浏览器一点喘息的机会，它会对代码进行编译优化（JIT）及进行热代码优化，或者对 reflow 进行修正。__核心思想：__Fiber 也称协程、或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。<br>让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。</li>
</ul>
<h3 id="6、React-Component-和-React-PureComponent-的区别？"><a href="#6、React-Component-和-React-PureComponent-的区别？" class="headerlink" title="6、React.Component 和 React.PureComponent 的区别？"></a>6、React.Component 和 React.PureComponent 的区别？</h3><p>pureComponent表示一个纯组件，可以用来优化react组件，减少render函数执行的次数，从而提高组件的性能</p>
<p>在react中，当<code>props</code>或<code>state</code>发生变化时，可以通过在<code>shouldComponentUpdate</code>生命周期函数中执行<code>return false</code>来阻止页面的更新，从而减少不必要的render执行。React.PureComponent会自动执行 shouldComponentUpdate。</p>
<p>不过，pureComponent中的<code>shouldComponentUpdate()</code>进行的是 <strong>浅比较</strong> ，也就是说如果是 <strong>引用类型数据</strong> ,只会比较不是同一个地址，而不会比较这个地址里面的数据是否一致。浅比较会忽略属性或状态突变情况。其实也就是数据引用指针没有变化。而数据发生改变的时候render是不会执行的。<br>如果需要重新渲染那么就需要重新开辟空间引用数据。PureComponent一般会用在一些纯展示组件上。</p>
<h4 id="使用pureComponent的好处："><a href="#使用pureComponent的好处：" class="headerlink" title="使用pureComponent的好处："></a>使用pureComponent的好处：</h4><p>当组件更新时，如果组件的props或state没有改变，render函数就不会触发。省去虚拟dom的生成和对比过程，达到提升性能的目的。这是因为react自动做了一层浅比较。</p>
<h3 id="7、Component-Element-Instance-之间有什么区别和联系？"><a href="#7、Component-Element-Instance-之间有什么区别和联系？" class="headerlink" title="7、Component, Element, Instance 之间有什么区别和联系？"></a>7、Component, Element, Instance 之间有什么区别和联系？</h3><p><strong>元素:</strong> 一个元素element是一个普通对象，描述了对于一个DOM节点或者其他组件component,你想让他在屏幕中呈现什么样子。素element可以在它的属性props中包含其他元素(译注:用于形成元素树)。创建一个React元素element成本很低。元素element创建之后是不可变的。</p>
<p><strong>组件：</strong> 一个组件component可以通过多种方式声明。可以是带有一个render()方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性props作为输入，把返回的一棵元素树作为输出。</p>
<p><strong>实例：</strong> 一个实例instance是你在所写的组件类<code>component class</code>中使用关键字this所指向的东西(译注:组件实例)。它用来存储本地状态和响应生命周期事件很有用。</p>
<p>函数试组件根本没有instance实例，类组件有实例，但是永远也不要直接创建一个组件的实例，因为react已经帮我们做了这些。</p>
<h3 id="8、对componentWillReceiveProps-的理解"><a href="#8、对componentWillReceiveProps-的理解" class="headerlink" title="8、对componentWillReceiveProps 的理解"></a>8、对componentWillReceiveProps 的理解</h3><p>该生命周期函数只有在props发生变化时执行，初始化render时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用<code>this.setState()</code>来更新你的组件状态，旧的属性还是可以通过<code>this.props</code>来获取，这里调用更新状态是安全的。并不会触发额外的render调用。</p>
<p><strong>使用好处：</strong> 在这个生命周期中，可以在子组件的render函数执行前获取新的props，从而更新子组件自己的state。可以将数据请求放在这里进行执行，需要传的参数则从<code>componentWillReceiveProps(nextProps)</code>中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。<code>componentWillReceiveProps(nextProps)</code>在初始化render的时候不会执行，它会在component接收到新的props（状态）时被触发，一遍用于父组件状态更新时子组件重新渲染。</p>
<h3 id="9、哪些方法会触发-React-重新渲染？重新渲染-render-会做些什么？"><a href="#9、哪些方法会触发-React-重新渲染？重新渲染-render-会做些什么？" class="headerlink" title="9、哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？"></a>9、哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？</h3><p><strong>1、哪些方法会触发 react 重新渲染?</strong></p>
<ul>
<li>setState()方法被调用</li>
</ul>
<p>setState是react中最常用的命令，通常情况下，执行setState会触发render。但是这里有个点需要注意一下，执行setState的时候一定会重新渲染吗？答案是不一定，当setState传入null的时候，并不会触发render。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;render&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">React.Fragement</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.a&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">            this.setState(&#123; a: 1 &#125;); // 这里并没有改变 a 的值</span></span><br><span class="line"><span class="xml">          &#125;&#125;</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">          Click me</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.setState(null)&#125;&gt;setState null<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">React.Fragement</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>父组件重新渲染<br>只有父组件重新渲染了，即使传入子组件的props未发生变化，那么子组件也会重新渲染，进而触发render</li>
</ul>
<p><strong>2、重新渲染render会做些什么？</strong></p>
<ul>
<li>会对新旧Vnode进行对比，也就是我们所说的diff算法</li>
<li>对新旧两颗树进行一个深度优先遍历，这样每一个节点都会有一个标记，在到深度遍历的时候，每遍历到一个节点。就把该节点和新的节点树进行对比，如果有差异就放到一个对象里面</li>
<li>遍历差异对象，根据差异的类型，根据应对规则更新Vnode</li>
</ul>
<p>react的处理Render的基本思维模式是每次一有变动就会去重新渲染整个应用。在虚拟dom没出现之前，最简单的方法就是直接调用innerHTML。虚拟dom厉害的地方并不是说他比直接操作dom快，而是说不管数据怎么变，都会尽量以最小的代价去更新dom，react将render函数返回的虚拟dom树与老的进行比较，从而确定dom要不要更新、怎么更新。当DOM树很大时，遍历两棵树进行各种比对是相当耗性能的，特别是在顶层setState一个微小的修改，默认回去遍历整颗树。尽管react使用高度优化的diff算法，但是这个过程仍会损耗性能。</p>
<h3 id="10、React如何判断什么时候重新渲染组件？"><a href="#10、React如何判断什么时候重新渲染组件？" class="headerlink" title="10、React如何判断什么时候重新渲染组件？"></a>10、React如何判断什么时候重新渲染组件？</h3><p>组件状态的改变可以因为props的改变，或者直接通过setState方法改变。组件获得新的状态然后React决定是否应该重新渲染组件。只要组件的State发生变化，react就会对组件进行重新渲染。这是因为react中的<code>shouldComponentUpdate</code>方法默认返回 <code>true</code>，这就是导致每次更新都重新渲染的原因。</p>
<p>当react将要渲染组件时会执行<code>shouldComponentUpdate</code>方法来看它是否返回true（组件应该更新，也就是重新渲染）。所以需要重写<code>shouldComponentUpdate</code>方法让它根据情况返回true或者false来告诉React什么时候重新渲染什么时候跳过重新渲染。</p>
<h3 id="11、对有状态组件和无状态组件的理解及使用场景"><a href="#11、对有状态组件和无状态组件的理解及使用场景" class="headerlink" title="11、对有状态组件和无状态组件的理解及使用场景"></a>11、对有状态组件和无状态组件的理解及使用场景</h3><p><strong>有状态组件 特点：</strong> </p>
<ul>
<li>是一个类组件、有继承、可以使用this</li>
<li>可以使用react的生命周期</li>
<li>使用较多，容易频繁触发生命周期钩子函数，影响性能</li>
<li>内部使用state,维护自身状态的变化，有状态组件根据外部组件传入的props和自身的State进行渲染</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>需要使用到状态的</li>
<li>需要使用状态操作组件的（无状态组件的也可以实现新版本react hooks也可以实现）</li>
</ul>
<p><strong>总结：</strong><br>类组件可以维护自身的状态变量，即组件的state,类组件还有不同的生命周期方法，可以让开发者能够在组件的不同阶段（挂载、更新、卸载），对组件做更多的控制。类组件既可以充当无状态组件，也可以充当有状态组件。当一个类组件不需要管理自身状态时，也可以被称为无状态组件。</p>
<p><strong>无状态组件  特点</strong></p>
<ul>
<li> 不依赖自身的状态state</li>
<li>可以使类组件或者函数组件</li>
<li>可以完全避免使用<code>this</code>关键字（由于使用的是箭头函数无需绑定）</li>
<li>有更高的性能。当不需要使用生命周期钩子时，应该首先使用无状态组件</li>
<li>组件内部不维护state，只根据外部组件传入的props进行渲染的组件，当props改变时，组件重新渲染</li>
</ul>
<p><strong>使用场景</strong></p>
<ul>
<li>组件不需要管理state，纯展示</li>
</ul>
<p><strong>有点</strong></p>
<ul>
<li>简化代码，专注render</li>
<li>组件不需要被实例化，无生命周期，提高性能。渲染只取决于属性，无副作用</li>
<li>视图和数据的解耦分离</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>无法使用ref和生命周期方法</li>
<li>无法控制组件的重渲染，因为无法使用<code>shouldComponentUpdate</code>方法，当组件接收到的属性时则会冲渲染</li>
</ul>
<p><strong>总结：</strong><br>组件内部状态且与外部无关的组件，可以考虑用五状态组件，这样状态数就不会过于复杂，易于理解和管理。当一个组件不需要管理自身状态时，也就是无状态组件，应该优先设计为函数组件。</p>
<h3 id="12、对React中Fragment的理解，它的使用场景是什么？"><a href="#12、对React中Fragment的理解，它的使用场景是什么？" class="headerlink" title="12、对React中Fragment的理解，它的使用场景是什么？"></a>12、对React中Fragment的理解，它的使用场景是什么？</h3><p>在react中，组件返回的元素只能有一个根元素。为了不添加多余的dom节点，我们可以使用<code>Fragment</code>标签来包裹所有的元素，Fragment标签不会渲染出任何元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般形式</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildA</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildB</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildC</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以写成以下形式</span></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildA</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildB</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildC</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13、在React中如何避免不必要的render？"><a href="#13、在React中如何避免不必要的render？" class="headerlink" title="13、在React中如何避免不必要的render？"></a>13、在React中如何避免不必要的render？</h3><p>React基于虚拟DOM和高效diff算法的完美配合，实现了对DOM最小粒度的更新。大多情况下，react对DOM的渲染效率足以业务日常。但在个别复杂业务场景下，性能问题依然存在。此时需要采取一些措施来提升运行性能，其很重要的一个方向就是尽可能的避免<code>render</code></p>
<ul>
<li>shouldComponentUpdate和PureComponent</li>
</ul>
<p>在react类组件中，可以利用<code>shouldComponentUpdate</code>或者<code>pureComponent</code>来减少因父组件更新而触发子组件render，从而达到目的。<code>shouldComponentUpdate</code>来决定是否组件是否重新渲染，如果不希望组件重新渲染，返回<code>false</code>即可。</p>
<ul>
<li>利用高阶组件</li>
</ul>
<p>在函数组件中，并没有 <code>shouldComponentUpdate</code>这个生命周期，可以利用高阶组件，封装一个类似<code>PureComponet</code>的功能</p>
<ul>
<li>使用React.memo</li>
</ul>
<p>React.mome是react<code>16.0</code>新的一个API，用来缓存组件的渲染，避免不必要的更新，其实也会死你一个高阶组件，与<code>PureComponent</code>十分类似，但不同的是<code>React.memo</code>只能用于函数组件。</p>
<h3 id="14、对-React-context-的理解"><a href="#14、对-React-context-的理解" class="headerlink" title="14、对 React context 的理解"></a>14、对 React context 的理解</h3><p>在React中， 数据传递一般使用props传递数据，维持单项数据流，这样可以让组件之间的关系变得简单可预测，但是单向数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，<code>props</code>就需要层层传递，显然这样做太繁琐了。</p>
<p><code>Context</code>提供了一种在组件之间共享此类值得方法，而不必显式的通过组件树的逐层传递 <code>props</code></p>
<p>可以把<code>context</code>当做是特定一个组件数内共享的<code>store</code>，用来做数据传递。<code>简单的说就是，当年你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。</code></p>
<p>js的代码在执行期间，会创建一个相应的作用域链，这个作用域链记录这运行时js代码块执行期间所能访问的活动对象，包括变量和函数，js程序通过作用域链访问到代码块内部或者外部的变量和函数</p>
<p>假如以js的作用域链作为类比，react组件提供的context对象其实就是好比一个提供给子组件访问的作用域，而Context对象的属性可以看成作用域上的活动对象。由于组件的context由父节点链上所有组件通过<code>getChildContext（）</code>返回的context对象组合而成，所以组件通过context是可以访问到其父组件链上所有节点组件提供的context的属性。</p>
<h3 id="15、为什么React并不推荐优先考虑使用Context？"><a href="#15、为什么React并不推荐优先考虑使用Context？" class="headerlink" title="15、为什么React并不推荐优先考虑使用Context？"></a>15、为什么React并不推荐优先考虑使用Context？</h3><ul>
<li><p>context目前还处于实验阶段，可能会在后面发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来的影响和麻烦，不建议在app中使用context。</p>
</li>
<li><p>尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context；</p>
</li>
<li><p>对于组件之间的数据通信或者状态管理，有效使用props或者State解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳方案的时候，考虑context</p>
</li>
<li><p>context的更新需要通过<code>setState()</code>触发，但是这并不是可靠的，context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如<code>shouldComponentUpdate() </code>返回<code>false</code>那么不能保证context的更新一定可以使用context的子组件，因此，context的可靠性需要关注</p>
</li>
</ul>
<h3 id="16、React中refs的作用是什么？有哪些应用场景？"><a href="#16、React中refs的作用是什么？有哪些应用场景？" class="headerlink" title="16、React中refs的作用是什么？有哪些应用场景？"></a>16、React中refs的作用是什么？有哪些应用场景？</h3><p>Refs提供了一种方式，用于访问在 <code>render</code>方法中创建的<code>react</code>元素或<code>DOM</code>节点，refs应该谨慎使用，如下场景使用refs比较适合：</p>
<ul>
<li>处理焦点、文本选择或者媒体的控制</li>
<li>触发必要的动画</li>
<li>集成第三方DOM库</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>不应该国度的使用refs</li>
<li>ref的返回值取决于节点的类型</li>
</ul>
<ol>
<li>当ref属性被用于一个普通的<code>HTML</code>元素时，<code>react.createRef()</code>将接收底层<code>DOM</code>元素作为它的<code>current</code>属性以创建ref。</li>
<li>当ref属性被用于一个自定义的类组件时，ref对象将接收该组件已挂载的实例作为它的<code>current</code></li>
</ol>
<ul>
<li>当在父组件中需要访问子组件中的ref时可使用传递refs或回调refs。</li>
</ul>
<h3 id="17、React组件的构造函数有什么作用？它是必须的吗？"><a href="#17、React组件的构造函数有什么作用？它是必须的吗？" class="headerlink" title="17、React组件的构造函数有什么作用？它是必须的吗？"></a>17、React组件的构造函数有什么作用？它是必须的吗？</h3><p>构造函数主要用于两个目的：</p>
<ul>
<li>通过将对象分配给<code>this.state</code>来初始化本地状态</li>
<li>将事件处理程序方法绑定到实例上</li>
</ul>
<p>所以，当在React class中需要设置state的初始值或者绑定事件时，需要加上构造函数，官方Demo:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">liked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="built_in">this</span>.state.liked&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="built_in">this</span>.state.liked ? <span class="string">&#x27;liked&#x27;</span> : <span class="string">&#x27;haven\&#x27;t liked&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        You &#123;text&#125; this. Click to toggle.</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;example&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>构造函数用来新建父类的<code>this</code>对象；子类必须在<code>constructor</code>方法中调用<code>super</code>方法；否则新建实例时会报错；因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法；子类就得不到<code>this</code>对象。</p>
<p><strong>注意：</strong></p>
<ul>
<li>constructor() 必须配上super()，如果要在constructor内部使用<code>this.props</code>就要传入<code>props</code>，否则不用</li>
<li>js中的<code>bind</code>每次都会返回一个新的函数，为了性能等考虑，尽量在<code>constructor</code>中绑定事件</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>egg学习笔记</title>
    <url>/posts/4b0bbae9.html</url>
    <content><![CDATA[<p>我们推荐直接使用脚手架，只需几条简单指令，即可快速生成项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir egg-example &amp;&amp; cd egg-example</span><br><span class="line">npm init egg --type=simple</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>启动项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line">open http://localhost:7001</span><br></pre></td></tr></table></figure>

<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">egg-project</span><br><span class="line">├── package.json</span><br><span class="line">├── app.js (可选)</span><br><span class="line">├── agent.js (可选)</span><br><span class="line">├── app（-----------核心------------）</span><br><span class="line">|   ├── router.js（路由）</span><br><span class="line">│   ├── controller（控制器）</span><br><span class="line">│   |   └── home.js</span><br><span class="line">│   ├── service (模型)</span><br><span class="line">│   |   └── user.js</span><br><span class="line">│   ├── middleware (中间件)</span><br><span class="line">│   |   └── response_time.js</span><br><span class="line">│   ├── schedule (可选)</span><br><span class="line">│   |   └── my_task.js</span><br><span class="line">│   ├── public (静态资源)</span><br><span class="line">│   |   └── reset.css</span><br><span class="line">│   ├── view (模板视图)</span><br><span class="line">│   |   └── home.tpl</span><br><span class="line">│   └── extend (扩展)</span><br><span class="line">│       ├── helper.js (可选)</span><br><span class="line">│       ├── request.js (可选)</span><br><span class="line">│       ├── response.js (可选)</span><br><span class="line">│       ├── context.js (可选)</span><br><span class="line">│       ├── application.js (可选)</span><br><span class="line">│       └── agent.js (可选)</span><br><span class="line">├── config</span><br><span class="line">|   ├── plugin.js</span><br><span class="line">|   ├── config.default.js</span><br><span class="line">│   ├── config.prod.js</span><br><span class="line">|   ├── config.test.js (可选)</span><br><span class="line">|   ├── config.local.js (可选)</span><br><span class="line">|   └── config.unittest.js (可选)</span><br><span class="line">└── test</span><br><span class="line">    ├── middleware</span><br><span class="line">    |   └── response_time.test.js</span><br><span class="line">    └── controller</span><br><span class="line">        └── home.test.js</span><br></pre></td></tr></table></figure>

<h1 id="路由相关"><a href="#路由相关" class="headerlink" title="路由相关"></a>路由相关</h1><h2 id="1-get传值"><a href="#1-get传值" class="headerlink" title="1. get传值"></a>1. get传值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line">router.get(<span class="string">&#x27;/admin/:id&#x27;</span>, controller.admin.index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">index</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取路由get传值参数（路由:id）</span></span><br><span class="line">    ctx.params;</span><br><span class="line">    <span class="comment">// 获取url的问号get传值参数</span></span><br><span class="line">    ctx.query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4种配置方法"><a href="#2-4种配置方法" class="headerlink" title="2. 4种配置方法"></a>2. 4种配置方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.verb(<span class="string">&#x27;path-match&#x27;</span>, app.controller.action);</span><br><span class="line">router.verb(<span class="string">&#x27;router-name&#x27;</span>, <span class="string">&#x27;path-match&#x27;</span>, app.controller.action);<span class="comment">// 第一个参数可以给name</span></span><br><span class="line">router.verb(<span class="string">&#x27;path-match&#x27;</span>, middleware1, ..., middlewareN, app.controller.action);</span><br><span class="line">router.verb(<span class="string">&#x27;router-name&#x27;</span>, <span class="string">&#x27;path-match&#x27;</span>, middleware1, ..., middlewareN, app.controller.action);</span><br></pre></td></tr></table></figure>

<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><h2 id="1-ctx"><a href="#1-ctx" class="headerlink" title="1. ctx"></a>1. ctx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async index() &#123;</span><br><span class="line">    this.ctx.status = 301; // 把重定向改为301</span><br><span class="line">    this.ctx.redirect(&#x27;/admin/add&#x27;); // 默认临时重定向 302</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-路由重定向"><a href="#2-路由重定向" class="headerlink" title="2. 路由重定向"></a>2. 路由重定向</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.router.redirect(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/home/index&#x27;</span>, <span class="number">302</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-路由分组"><a href="#3-路由分组" class="headerlink" title="3.路由分组"></a>3.路由分组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;./router/news&#x27;</span>)(app);</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;./router/admin&#x27;</span>)(app);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app/router/news.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.router.get(<span class="string">&#x27;/news/list&#x27;</span>, app.controller.news.list);</span><br><span class="line">  app.router.get(<span class="string">&#x27;/news/detail&#x27;</span>, app.controller.news.detail);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app/router/admin.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.router.get(<span class="string">&#x27;/admin/user&#x27;</span>, app.controller.admin.user);</span><br><span class="line">  app.router.get(<span class="string">&#x27;/admin/log&#x27;</span>, app.controller.admin.log);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><h2 id="自定义-Controller-基类"><a href="#自定义-Controller-基类" class="headerlink" title="自定义 Controller 基类"></a>自定义 Controller 基类</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/core/base_controller.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; Controller &#125; = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">user</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.ctx.session.user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">success</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ctx.body = &#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">      data,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">notFound</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">    msg = msg || <span class="string">&#x27;not found&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.ctx.throw(<span class="number">404</span>, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = BaseController;</span><br></pre></td></tr></table></figure>

<p>此时在编写应用的 Controller 时，可以继承 BaseController，直接使用基类上的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app/controller/post.js</span></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">&#x27;../core/base_controller&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">list</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">await</span> <span class="built_in">this</span>.service.listByUser(<span class="built_in">this</span>.user);</span><br><span class="line">    <span class="built_in">this</span>.success(posts);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><h2 id="1-安装和使用ejs"><a href="#1-安装和使用ejs" class="headerlink" title="1. 安装和使用ejs"></a>1. 安装和使用ejs</h2><h3 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i egg-view-ejs --save</span><br></pre></td></tr></table></figure>

<h3 id="（2）配置：-config"><a href="#（2）配置：-config" class="headerlink" title="（2）配置：/config"></a>（2）配置：/config</h3><p>config/config.default.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    config.view = &#123;</span><br><span class="line">        <span class="attr">mapping</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;.html&#x27;</span>: <span class="string">&#x27;ejs&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="（3）使用"><a href="#（3）使用" class="headerlink" title="（3）使用"></a>（3）使用</h3><p>app/controller</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 渲染变量</span></span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&quot;测试内容&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="comment">// 渲染模板（render需要加await）</span></span><br><span class="line">    <span class="keyword">await</span> ctx.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        msg,</span><br><span class="line">        list</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app/view/index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--渲染变量--&gt;</span></span><br><span class="line">    &lt;%=msg%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &lt;% for(var i=0; i &lt; list.length; i++)&#123; %&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    &lt;%=list[i]%&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                &lt;% &#125; %&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加载 app/public 下的资源文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/public/images/find.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="服务（模型）"><a href="#服务（模型）" class="headerlink" title="服务（模型）"></a>服务（模型）</h1><p>控制器调用<code>home</code> 模型的<code>test</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.service.home.ceshi();</span><br></pre></td></tr></table></figure>

<p>模型之间相互调用（同上）</p>
<h1 id="模型和数据库"><a href="#模型和数据库" class="headerlink" title="模型和数据库"></a>模型和数据库</h1><h2 id="配置和创建迁移文件"><a href="#配置和创建迁移文件" class="headerlink" title="配置和创建迁移文件"></a>配置和创建迁移文件</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li><p>安装并配置<a href="https://github.com/eggjs/egg-sequelize">egg-sequelize</a>插件（它会辅助我们将定义好的 Model 对象加载到 app 和 ctx 上）和<a href="https://github.com/sidorares/node-mysql2">mysql2</a>模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save egg-sequelize mysql2</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>config/plugin.js</code> 中引入 egg-sequelize 插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.sequelize = &#123;</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">package</span>: <span class="string">&#x27;egg-sequelize&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>config/config.default.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.sequelize = &#123;</span><br><span class="line">    <span class="attr">dialect</span>:  <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>:  <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:  <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>:  <span class="string">&#x27;friends&#x27;</span>,</span><br><span class="line">    <span class="comment">// 中国时区</span></span><br><span class="line">    <span class="attr">timezone</span>:  <span class="string">&#x27;+08:00&#x27;</span>,</span><br><span class="line">    <span class="attr">define</span>: &#123;</span><br><span class="line">        <span class="comment">// 取消数据表名复数</span></span><br><span class="line">        <span class="attr">freezeTableName</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 自动写入时间戳 created_at updated_at</span></span><br><span class="line">        <span class="attr">timestamps</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 字段生成软删除时间戳 deleted_at</span></span><br><span class="line">        <span class="attr">paranoid</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">createdAt</span>: <span class="string">&#x27;created_at&#x27;</span>,</span><br><span class="line">        <span class="attr">updatedAt</span>: <span class="string">&#x27;updated_at&#x27;</span>,</span><br><span class="line">        <span class="attr">deletedAt</span>: <span class="string">&#x27;deleted_at&#x27;</span>,</span><br><span class="line">        <span class="comment">// 所有驼峰命名格式化</span></span><br><span class="line">        <span class="attr">underscored</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>sequelize 提供了<a href="https://github.com/sequelize/cli">sequelize-cli</a>工具来实现<a href="http://docs.sequelizejs.com/manual/tutorial/migrations.html">Migrations</a>，我们也可以在 egg 项目中引入 sequelize-cli。</p>
</li>
<li><p>egg 项目中，我们希望将所有数据库 Migrations 相关的内容都放在<code>database</code>目录下，所以我们在项目根目录下新建一个<code>.sequelizerc</code>配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">use strict<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const path = require(&#x27;</span>path<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">module.exports = &#123;</span></span><br><span class="line"><span class="string">  config: path.join(__dirname, &#x27;</span>database/config.json<span class="string">&#x27;),</span></span><br><span class="line"><span class="string">  &#x27;</span>migrations-path<span class="string">&#x27;: path.join(__dirname, &#x27;</span>database/migrations<span class="string">&#x27;),</span></span><br><span class="line"><span class="string">  &#x27;</span>seeders-path<span class="string">&#x27;: path.join(__dirname, &#x27;</span>database/seeders<span class="string">&#x27;),</span></span><br><span class="line"><span class="string">  &#x27;</span>models-path<span class="string">&#x27;: path.join(__dirname, &#x27;</span>app/model<span class="string">&#x27;),</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始化 Migrations 配置文件和目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize init:config</span><br><span class="line">npx sequelize init:migrations</span><br><span class="line">// npx sequelize init:models</span><br></pre></td></tr></table></figure></li>
<li><p>行完后会生成<code>database/config.json</code>文件和<code>database/migrations</code>目录，我们修改一下<code>database/config.json</code>中的内容，将其改成我们项目中使用的数据库配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;development&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dialect&quot;</span>: <span class="string">&quot;mysql&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;timezone&quot;</span>: <span class="string">&quot;+08:00&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize db:create</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建数据迁移表"><a href="#创建数据迁移表" class="headerlink" title="创建数据迁移表"></a>创建数据迁移表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize migration:generate --name=init-users</span><br></pre></td></tr></table></figure>

<ol>
<li><p>执行完命令后，会在database / migrations / 目录下生成数据表迁移文件，然后定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">up</span>: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; INTEGER, STRING, DATE, ENUM &#125; = Sequelize;</span><br><span class="line">        <span class="comment">// 创建表</span></span><br><span class="line">        <span class="keyword">await</span> queryInterface.createTable(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">id</span>: &#123; <span class="attr">type</span>: INTEGER(<span class="number">20</span>).UNSIGNED, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            <span class="attr">username</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">30</span>), <span class="attr">allowNull</span>: <span class="literal">false</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;用户名称&#x27;</span>, <span class="attr">unique</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">            <span class="attr">email</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">160</span>), <span class="attr">allowNull</span>: <span class="literal">false</span>,  <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;用户邮箱&#x27;</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            <span class="attr">password</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">200</span>), <span class="attr">allowNull</span>: <span class="literal">false</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">avatar_url</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">200</span>), <span class="attr">allowNull</span>: <span class="literal">true</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">mobile</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">20</span>), <span class="attr">allowNull</span>: <span class="literal">false</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;用户手机&#x27;</span>, <span class="attr">unique</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            <span class="attr">prifix</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">32</span>), <span class="attr">allowNull</span>: <span class="literal">false</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">abstract</span>: &#123; <span class="attr">type</span>: STRING(<span class="number">255</span>), <span class="attr">allowNull</span>: <span class="literal">true</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">role_id</span>:&#123;</span><br><span class="line">                <span class="attr">type</span>: INTEGER,</span><br><span class="line">                <span class="comment">//  定义外键（重要）</span></span><br><span class="line">                <span class="attr">references</span>: &#123;</span><br><span class="line">                    <span class="attr">model</span>: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 对应表名称（数据表名称）</span></span><br><span class="line">                    <span class="attr">key</span>: <span class="string">&#x27;id&#x27;</span> <span class="comment">// 对应表的主键</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onUpdate</span>: <span class="string">&#x27;restrict&#x27;</span>, <span class="comment">// 更新时操作</span></span><br><span class="line">                <span class="attr">onDelete</span>: <span class="string">&#x27;cascade&#x27;</span>  <span class="comment">// 删除时操作</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">gender</span>: &#123; <span class="attr">type</span>: ENUM, <span class="attr">values</span>: [<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>], <span class="attr">allowNull</span>: <span class="literal">true</span>, <span class="attr">defaultValue</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;用户性别&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">created_at</span>: DATE,</span><br><span class="line">            <span class="attr">updated_at</span>: DATE</span><br><span class="line">        &#125;, &#123; <span class="attr">engine</span>: <span class="string">&#x27;MYISAM&#x27;</span> &#125;);</span><br><span class="line">        <span class="comment">// 添加索引</span></span><br><span class="line">        queryInterface.addIndex(<span class="string">&#x27;users&#x27;</span>, [<span class="string">&#x27;gender&#x27;</span>]);</span><br><span class="line">        <span class="comment">// 添加唯一索引</span></span><br><span class="line">        queryInterface.addIndex(<span class="string">&#x27;users&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;name&quot;</span>, <span class="comment">// 索引名称</span></span><br><span class="line">            <span class="attr">unique</span>: <span class="literal">true</span>, <span class="comment">// 唯一索引</span></span><br><span class="line">            <span class="attr">fields</span>: [<span class="string">&#x27;name&#x27;</span>] <span class="comment">// 索引对应字段</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">down</span>: <span class="keyword">async</span> queryInterface =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> queryInterface.dropTable(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行 migrate 进行数据库变更</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 升级数据库</span><br><span class="line">npx sequelize db:migrate</span><br><span class="line"># 如果有问题需要回滚，可以通过 `db:migrate:undo` 回退一个变更</span><br><span class="line"># npx sequelize db:migrate:undo</span><br><span class="line"># 可以通过 `db:migrate:undo:all` 回退到初始状态</span><br><span class="line"># npx sequelize db:migrate:undo:all</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="已创建新增字段"><a href="#已创建新增字段" class="headerlink" title="已创建新增字段"></a>已创建新增字段</h3><ol>
<li>创建迁移文件：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize migration:generate --name=user-addcolumn</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>执行完命令后，会在database / migrations / 目录下生成数据表迁移文件，然后定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.sequelize.transaction(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">          queryInterface.addColumn(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;role_id&#x27;</span>, &#123;</span><br><span class="line">              <span class="attr">type</span>: Sequelize.INTEGER</span><br><span class="line">          &#125;, &#123; <span class="attr">transaction</span>: t &#125;),</span><br><span class="line">          queryInterface.addColumn(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;ceshi&#x27;</span>, &#123;</span><br><span class="line">              <span class="attr">type</span>: Sequelize.STRING,</span><br><span class="line">          &#125;, &#123; <span class="attr">transaction</span>: t &#125;)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">down</span>: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.sequelize.transaction(<span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">          queryInterface.removeColumn(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;role_id&#x27;</span>, &#123; <span class="attr">transaction</span>: t &#125;),</span><br><span class="line">          queryInterface.removeColumn(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;ceshi&#x27;</span>, &#123; <span class="attr">transaction</span>: t &#125;)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>执行 migrate 进行数据库变更</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize db:migrate</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app / model / user.js</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; STRING, INTEGER, DATE &#125; = app.Sequelize;</span><br><span class="line">  <span class="comment">// 配置（重要：一定要配置详细，一定要！！！）</span></span><br><span class="line">  <span class="keyword">const</span> User = app.model.define(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: &#123; <span class="attr">type</span>: INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">name</span>: STRING(<span class="number">30</span>),</span><br><span class="line">    <span class="attr">age</span>: INTEGER,</span><br><span class="line">    <span class="attr">created_at</span>: DATE,</span><br><span class="line">    <span class="attr">updated_at</span>: DATE,</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">timestamps</span>: <span class="literal">true</span>, <span class="comment">// 是否自动写入时间戳</span></span><br><span class="line">    <span class="attr">tableName</span>: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 自定义数据表名称</span></span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个 Model 就可以在 Controller 和 Service 中通过 <code>app.model.User</code> 或者 <code>ctx.model.User</code> 访问到了，例如我们编写 <code>app/controller/users.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/users.js</span></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toInt</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> str === <span class="string">&#x27;number&#x27;</span>) <span class="keyword">return</span> str;</span><br><span class="line">  <span class="keyword">if</span> (!str) <span class="keyword">return</span> str;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>) || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">    <span class="keyword">const</span> query = &#123; <span class="attr">limit</span>: toInt(ctx.query.limit), <span class="attr">offset</span>: toInt(ctx.query.offset) &#125;;</span><br><span class="line">    ctx.body = <span class="keyword">await</span> ctx.model.User.findAll(query);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">    ctx.body = <span class="keyword">await</span> ctx.model.User.findByPk(toInt(ctx.params.id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">create</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age &#125; = ctx.request.body;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> ctx.model.User.create(&#123; name, age &#125;);</span><br><span class="line">    ctx.status = <span class="number">201</span>;</span><br><span class="line">    ctx.body = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">    <span class="keyword">const</span> id = toInt(ctx.params.id);</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> ctx.model.User.findByPk(id);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      ctx.status = <span class="number">404</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; name, age &#125; = ctx.request.body;</span><br><span class="line">    <span class="keyword">await</span> user.update(&#123; name, age &#125;);</span><br><span class="line">    ctx.body = user;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">destroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">    <span class="keyword">const</span> id = toInt(ctx.params.id);</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> ctx.model.User.findByPk(id);</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      ctx.status = <span class="number">404</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> user.destroy();</span><br><span class="line">    ctx.status = <span class="number">200</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = UserController;</span><br></pre></td></tr></table></figure>

<p>最后我们将这个 controller 挂载到路由上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/router.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.resources(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;/users&#x27;</span>, controller.users);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>针对 <code>users</code> 表的 CURD 操作的接口就开发完了</p>
<h3 id="模型其他参数"><a href="#模型其他参数" class="headerlink" title="模型其他参数"></a>模型其他参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置（重要）</span></span><br><span class="line">  <span class="keyword">const</span> User = app.model.define(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">id</span>: &#123; <span class="attr">type</span>: INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">name</span>: STRING(<span class="number">30</span>),</span><br><span class="line">    <span class="attr">age</span>: INTEGER,</span><br><span class="line">    <span class="attr">created_at</span>: DATE,</span><br><span class="line">    <span class="attr">updated_at</span>: DATE,</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="comment">// 自定义表名</span></span><br><span class="line">      <span class="string">&#x27;freezeTableName&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&#x27;tableName&#x27;</span>: <span class="string">&#x27;xyz_users&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 是否需要增加createdAt、updatedAt、deletedAt字段</span></span><br><span class="line">      <span class="string">&#x27;timestamps&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 不需要createdAt字段</span></span><br><span class="line">      <span class="string">&#x27;createdAt&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将updatedAt字段改个名</span></span><br><span class="line">      <span class="string">&#x27;updatedAt&#x27;</span>: <span class="string">&#x27;utime&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将deletedAt字段改名</span></span><br><span class="line">      <span class="comment">// 同时需要设置paranoid为true（此种模式下，删除数据时不会进行物理删除，而是设置deletedAt为当前时间</span></span><br><span class="line">      <span class="string">&#x27;deletedAt&#x27;</span>: <span class="string">&#x27;dtime&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;paranoid&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">      </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="sequelize-命令"><a href="#sequelize-命令" class="headerlink" title="sequelize 命令"></a>sequelize 命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>sequelize db:migrate</td>
<td>运行迁移文件</td>
</tr>
<tr>
<td>sequelize db:migrate:status</td>
<td>列出所有迁移的状态</td>
</tr>
<tr>
<td>sequelize db:migrate:undo</td>
<td>隔离数据库：迁移：撤消</td>
</tr>
<tr>
<td>sequelize db:migrate:undo:all</td>
<td>还原所有运行的迁移</td>
</tr>
<tr>
<td>sequelize db:create</td>
<td>创建由配置指定的数据库</td>
</tr>
<tr>
<td>sequelize db:drop</td>
<td>删除由配置指定的数据库</td>
</tr>
</tbody></table>
<h3 id="外键约束（重要）"><a href="#外键约束（重要）" class="headerlink" title="外键约束（重要）"></a>外键约束（重要）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迁移文件</span></span><br><span class="line">queryInterface.addConstraint(<span class="string">&#x27;tableName&#x27;</span>, [<span class="string">&#x27;user_id&#x27;</span>], &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;foreign key&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;user_id&#x27;</span>,</span><br><span class="line">    <span class="attr">references</span>: &#123; <span class="comment">//Required field</span></span><br><span class="line">        <span class="attr">table</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">        <span class="attr">field</span>: <span class="string">&#x27;id&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onDelete</span>: <span class="string">&#x27;cascade&#x27;</span>,</span><br><span class="line">    <span class="attr">onUpdate</span>: <span class="string">&#x27;cascade&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="创建第一个种子"><a href="#创建第一个种子" class="headerlink" title="创建第一个种子"></a>创建第一个种子</h3><p>假设我们希望在默认情况下将一些数据插入到几个表中. 如果我们跟进前面的例子,我们可以考虑为 <code>User</code> 表创建演示用户.</p>
<p>要管理所有数据迁移,你可以使用 <code>seeders</code>. 种子文件是数据的一些变化,可用于使用样本数据或测试数据填充数据库表.</p>
<p>让我们创建一个种子文件,它会将一个演示用户添加到我们的 <code>User</code> 表中.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize seed:generate --name demo-user</span><br></pre></td></tr></table></figure>

<p>这个命令将会在 <code>seeders</code> 文件夹中创建一个种子文件.文件名看起来像是 <code>XXXXXXXXXXXXXX-demo-user.js</code>,它遵循相同的 <code>up/down</code> 语义,如迁移文件.</p>
<p>现在我们应该编辑这个文件,将演示用户插入<code>User</code>表.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">up</span>: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.bulkInsert(<span class="string">&#x27;Users&#x27;</span>, [&#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Doe&#x27;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&#x27;demo@demo.com&#x27;</span>,</span><br><span class="line">        <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;], &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">down</span>: <span class="function">(<span class="params">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> queryInterface.bulkDelete(<span class="string">&#x27;Users&#x27;</span>, <span class="literal">null</span>, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="运行种子"><a href="#运行种子" class="headerlink" title="运行种子"></a>运行种子</h3><p>在上一步中,你创建了一个种子文件. 但它还没有保存到数据库. 为此,我们需要运行一个简单的命令.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize db:seed:all</span><br></pre></td></tr></table></figure>

<p>这将执行该种子文件,你将有一个演示用户插入 <code>User</code> 表.</p>
<p><strong>注意:</strong> <em><code>seeders</code> 执行不会存储在任何使用 <code>SequelizeMeta</code> 表的迁移的地方. 如果你想覆盖这个,请阅读 <code>存储</code> 部分</em></p>
<h3 id="撤销种子"><a href="#撤销种子" class="headerlink" title="撤销种子"></a>撤销种子</h3><p>Seeders 如果使用了任何存储那么就可以被撤消. 有两个可用的命令</p>
<p>如果你想撤消最近的种子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize db:seed:undo</span><br></pre></td></tr></table></figure>

<p>如果你想撤消特定的种子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize db:seed:undo --seed name-of-seed-as-in-data</span><br></pre></td></tr></table></figure>

<p>如果你想撤消所有的种子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx sequelize db:seed:undo:all</span><br></pre></td></tr></table></figure>

<h2 id="关联操作"><a href="#关联操作" class="headerlink" title="关联操作"></a>关联操作</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>模型层：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个用户对应一个用户资料</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app/model/user.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; STRING, INTEGER, DATE &#125; = app.Sequelize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> User = app.model.define(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">id</span>: &#123; <span class="attr">type</span>: INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        <span class="attr">name</span>: STRING(<span class="number">30</span>),</span><br><span class="line">        <span class="attr">age</span>: INTEGER,</span><br><span class="line">        <span class="attr">created_at</span>: DATE,</span><br><span class="line">        <span class="attr">updated_at</span>: DATE,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 关联关系</span></span><br><span class="line">    User.associate = <span class="function"><span class="keyword">function</span>(<span class="params">models</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 关联用户资料 一对一</span></span><br><span class="line">        User.hasOne(app.model.Userinfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> User;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app/model/userinfo.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; STRING, INTEGER, DATE &#125; = app.Sequelize;</span><br><span class="line">    <span class="keyword">const</span> userinfo = app.model.define(<span class="string">&#x27;userinfo&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">nickname</span>: STRING,</span><br><span class="line">        <span class="attr">user_id</span>: INTEGER</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    <span class="comment">// 关联用户表</span></span><br><span class="line">    userinfo.associate = <span class="function"><span class="keyword">function</span>(<span class="params">models</span>) </span>&#123;</span><br><span class="line">        app.model.Userinfo.belongsTo(app.model.User);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> userinfo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>控制器调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/users.js</span></span><br><span class="line"><span class="comment">// 显示单条</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据主键查询 查询一条用findOne</span></span><br><span class="line">    <span class="built_in">this</span>.ctx.body = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.findOne(&#123;</span><br><span class="line">        <span class="comment">// 主表查询字段限制</span></span><br><span class="line">        <span class="attr">attributes</span>:[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">        <span class="comment">// 关联查询</span></span><br><span class="line">        <span class="attr">include</span>: [&#123;</span><br><span class="line">            <span class="comment">// 需要查询的模型</span></span><br><span class="line">            <span class="attr">model</span>: <span class="built_in">this</span>.app.model.Userinfo,</span><br><span class="line">            <span class="comment">// 副表查询的字段</span></span><br><span class="line">            <span class="attr">attributes</span>: [<span class="string">&#x27;nickname&#x27;</span>]</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 主表条件</span></span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">City.init(&#123; <span class="attr">countryCode</span>: Sequelize.STRING &#125;, &#123; sequelize, <span class="attr">modelName</span>: <span class="string">&#x27;city&#x27;</span> &#125;);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Country.init(&#123; <span class="attr">isoCode</span>: Sequelize.STRING &#125;, &#123; sequelize, <span class="attr">modelName</span>: <span class="string">&#x27;country&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里,我们可以根据国家代码连接国家和城市</span></span><br><span class="line">Country.hasMany(City, &#123;<span class="attr">foreignKey</span>: <span class="string">&#x27;countryCode&#x27;</span>, <span class="attr">sourceKey</span>: <span class="string">&#x27;isoCode&#x27;</span>&#125;);</span><br><span class="line">City.belongsTo(Country, &#123;<span class="attr">foreignKey</span>: <span class="string">&#x27;countryCode&#x27;</span>, <span class="attr">targetKey</span>: <span class="string">&#x27;isoCode&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.belongsToMany(Project, &#123; <span class="attr">as</span>: <span class="string">&#x27;Tasks&#x27;</span>, <span class="attr">through</span>: <span class="string">&#x27;worker_tasks&#x27;</span>, <span class="attr">foreignKey</span>: <span class="string">&#x27;userId&#x27;</span> &#125;)</span><br><span class="line">Project.belongsToMany(User, &#123; <span class="attr">as</span>: <span class="string">&#x27;Workers&#x27;</span>, <span class="attr">through</span>: <span class="string">&#x27;worker_tasks&#x27;</span>, <span class="attr">foreignKey</span>: <span class="string">&#x27;projectId&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="关联常用操作"><a href="#关联常用操作" class="headerlink" title="关联常用操作"></a>关联常用操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取关联模型对象，n对一不需要加s</span></span><br><span class="line"><span class="keyword">let</span> userinfo = <span class="keyword">await</span> user.getUserinfo();</span><br><span class="line"><span class="comment">// n对多需要加s</span></span><br><span class="line"><span class="keyword">await</span> user.getPosts(&#123;</span><br><span class="line">    <span class="attr">attributes</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 关联操作</span></span><br><span class="line"><span class="comment">// 1：用户创建文章（一对多）</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.Post.create(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;第一篇文章&quot;</span>,</span><br><span class="line">    <span class="attr">user_id</span>: user.id</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取当前用户所有文章</span></span><br><span class="line"><span class="keyword">await</span> user.getPosts();</span><br><span class="line"><span class="keyword">await</span> user.getPosts(&#123;</span><br><span class="line">    <span class="attr">attributes</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">    <span class="attr">where</span>:&#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&quot;测试&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3：用户删除文章（一对多）</span></span><br><span class="line"><span class="comment">// (1) 获取当前用户的所有文章</span></span><br><span class="line"><span class="keyword">let</span> posts = <span class="keyword">await</span> user.getPosts(&#123;</span><br><span class="line">    <span class="attr">attributes</span>: [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">&#125;);</span><br><span class="line">posts = posts.map(<span class="function"><span class="params">v</span> =&gt;</span> v.id);</span><br><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.Post.destroy(&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: posts</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景三：用户关注话题（多对多）</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.TopicUser.bulkCreate([&#123;</span><br><span class="line">    <span class="attr">user_id</span>: user.id,</span><br><span class="line">    <span class="attr">topic_id</span>: <span class="number">1</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">user_id</span>: user.id,</span><br><span class="line">    <span class="attr">topic_id</span>: <span class="number">2</span></span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户关注话题（多对多）</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.TopicUser.destroy(&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">user_id</span>: user.id,</span><br><span class="line">        <span class="attr">topic_id</span>: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="获取器和修改器"><a href="#获取器和修改器" class="headerlink" title="获取器和修改器"></a>获取器和修改器</h3><p>模型层</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/model/user.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; STRING, INTEGER, DATE &#125; = app.Sequelize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> User = app.model.define(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">id</span>: &#123; <span class="attr">type</span>: INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        <span class="attr">name</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: STRING(<span class="number">30</span>),</span><br><span class="line">            <span class="comment">// 单独字段的getter，查询时都会调用</span></span><br><span class="line">            <span class="comment">// this.getDataValue(&#x27;name&#x27;) 获取原始值</span></span><br><span class="line">            <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> age = <span class="built_in">this</span>.getDataValue(<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getDataValue(<span class="string">&#x27;name&#x27;</span>) + <span class="string">&#x27;年龄：&#x27;</span> + age;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">age</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: INTEGER,</span><br><span class="line">            <span class="comment">// 单独字段的setter，新增和更新时调用</span></span><br><span class="line">            <span class="comment">// this.setDataValue(&#x27;name&#x27;) 设置原始值</span></span><br><span class="line">            <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setDataValue(<span class="string">&#x27;age&#x27;</span>, val * <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">created_at</span>: DATE,</span><br><span class="line">        <span class="attr">updated_at</span>: DATE,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关联用户资料</span></span><br><span class="line">    User.associate = <span class="function"><span class="keyword">function</span>(<span class="params">models</span>) </span>&#123;</span><br><span class="line">        app.model.User.hasOne(app.model.Userinfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>控制器层</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据主键查询</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.findOne(&#123;</span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 获取原始值 user.getDataValue(&#x27;name&#x27;)</span></span><br><span class="line">    <span class="built_in">this</span>.ctx.body = user.getDataValue(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模型钩子"><a href="#模型钩子" class="headerlink" title="模型钩子"></a>模型钩子</h2><p>模型层</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">   </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 钩子</span></span><br><span class="line">    <span class="comment">// 查询前</span></span><br><span class="line">    User.beforeFind(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;查询前&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 查询后</span></span><br><span class="line">    User.afterFind(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;查询后&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 新增前</span></span><br><span class="line">    User.beforeCreate(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;新增前&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 新增后</span></span><br><span class="line">    User.afterCreate(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;新增后&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 修改前</span></span><br><span class="line">    User.beforeUpdate(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;修改前&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 修改后</span></span><br><span class="line">    User.afterUpdate(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;修改后&#x27;</span>); <span class="comment">// 真正修改才会触发，数据相同不会触发</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 删除前</span></span><br><span class="line">    User.beforeDestroy(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;删除前&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 删除后</span></span><br><span class="line">    User.afterDestroy(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;删除后&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 批量删除前</span></span><br><span class="line">    User.beforeBulkDestroy(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;批量删除前&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 批量删除后</span></span><br><span class="line">    User.afterBulkDestroy(<span class="function">(<span class="params">user, option</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;批量删除后&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h3 id="主键查询"><a href="#主键查询" class="headerlink" title="主键查询"></a>主键查询</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findByPk(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="查找不存在则创建"><a href="#查找不存在则创建" class="headerlink" title="查找不存在则创建"></a>查找不存在则创建</h3><p>方法 <code>findOrCreate</code> 可用于检查数据库中是否已存在某个元素. 如果是这种情况,则该方法将生成相应的实例. 如果元素不存在,将会被创建.</p>
<p>如果是这种情况,则该方法将导致相应的实例. 如果元素不存在,将会被创建.</p>
<p>假设我们有一个空的数据库,一个 <code>User</code> 模型有一个 <code>username</code> 和 <code>job</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findOrCreate(&#123;</span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;sdepold&#x27;</span></span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">defaults</span>: &#123;</span><br><span class="line">            <span class="attr">job</span>: <span class="string">&#x27;Technical Lead JavaScript&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  . then(<span class="function">(<span class="params">[user, created]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.get(&#123;</span><br><span class="line">      <span class="attr">plain</span>: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(created)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    findOrCreate 返回一个包含已找到或创建的对象的数组,找到或创建的对象和一个布尔值,如果创建一个新对象将为true,否则为false,像这样:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    [ &#123;</span></span><br><span class="line"><span class="comment">        username: &#x27;sdepold&#x27;,</span></span><br><span class="line"><span class="comment">        job: &#x27;Technical Lead JavaScript&#x27;,</span></span><br><span class="line"><span class="comment">        id: 1,</span></span><br><span class="line"><span class="comment">        createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),</span></span><br><span class="line"><span class="comment">        updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      true ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在上面的例子中,第三行的数组将分成2部分,并将它们作为参数传递给回调函数,在这种情况下将它们视为 &quot;user&quot; 和 &quot;created&quot; .(所以“user”将是返回数组的索引0的对象,并且 &quot;created&quot; 将等于 &quot;true&quot;.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>代码创建了一个新的实例. 所以当我们已经有一个实例了 …</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.create(&#123; <span class="attr">username</span>: <span class="string">&#x27;fnord&#x27;</span>, <span class="attr">job</span>: <span class="string">&#x27;omnomnom&#x27;</span> &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> User.findOrCreate(&#123;</span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;fnord&#x27;</span></span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">defaults</span>: &#123;</span><br><span class="line">            <span class="attr">job</span>: <span class="string">&#x27;something else&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">  .then(<span class="function">(<span class="params">[user, created]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.get(&#123;</span><br><span class="line">      <span class="attr">plain</span>: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(created)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在这个例子中,findOrCreate 返回一个如下的数组:</span></span><br><span class="line"><span class="comment">    [ &#123;</span></span><br><span class="line"><span class="comment">        username: &#x27;fnord&#x27;,</span></span><br><span class="line"><span class="comment">        job: &#x27;omnomnom&#x27;,</span></span><br><span class="line"><span class="comment">        id: 2,</span></span><br><span class="line"><span class="comment">        createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),</span></span><br><span class="line"><span class="comment">        updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      false</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">    由findOrCreate返回的数组通过第三行的数组扩展为两部分,并且这些部分将作为2个参数传递给回调函数,在这种情况下将其视为 &quot;user&quot; 和 &quot;created&quot; .(所以“user”将是返回数组的索引0的对象,并且 &quot;created&quot; 将等于 &quot;false&quot;.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>现有条目将不会更改. 看到第二个用户的 “job”,并且实际上创建操作是假的.</p>
<h3 id="查找并计数"><a href="#查找并计数" class="headerlink" title="查找并计数"></a>查找并计数</h3><p><code>findAndCountAll</code> - 在数据库中搜索多个元素,返回数据和总计数</p>
<p>这是一个方便的方法,它结合了 <code>findAll</code> 和 <code>count</code>(见下文),当处理与分页相关的查询时,这是有用的,你想用 <code>limit</code> 和 <code>offset</code> 检索数据,但也需要知道总数与查询匹配的记录数:</p>
<p>处理程序成功将始终接收具有两个属性的对象:</p>
<ul>
<li><code>count</code> - 一个整数,总数记录匹配where语句和关联的其它过滤器</li>
<li><code>rows</code> - 一个数组对象,记录在limit和offset范围内匹配where语句和关联的其它过滤器,</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.findAndCountAll(&#123;</span><br><span class="line">     <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: &#123;</span><br><span class="line">          [Op.like]: <span class="string">&#x27;foo%&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">offset</span>: <span class="number">10</span>,</span><br><span class="line">     <span class="attr">limit</span>: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result.count);</span><br><span class="line">    <span class="built_in">console</span>.log(result.rows);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>它支持 include. 只有标记为 <code>required</code> 的 include 将被添加到计数部分:</p>
<p>假设你想查找附有个人资料的所有用户:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAndCountAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [</span><br><span class="line">     &#123; <span class="attr">model</span>: Profile, <span class="attr">required</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>因为 <code>Profile</code> 的 include 有 <code>required</code> 设置,这将导致内部连接,并且只有具有 profile 的用户将被计数. 如果我们从 include 中删除<code>required</code>,那么有和没有 profile 的用户都将被计数. 在include中添加一个 <code>where</code> 语句会自动使它成为 required:``</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAndCountAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [</span><br><span class="line">     &#123; <span class="attr">model</span>: Profile, <span class="attr">where</span>: &#123; <span class="attr">active</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的查询只会对具有 active profile 的用户进行计数,因为在将 where 语句添加到 include 时,<code>required</code> 被隐式设置为 true.</p>
<p>传递给 <code>findAndCountAll</code> 的 options 对象与 <code>findAll</code> 相同(如下所述).</p>
<h3 id="查询多个（常用）"><a href="#查询多个（常用）" class="headerlink" title="查询多个（常用）"></a>查询多个（常用）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到多个条目</span></span><br><span class="line">Project.findAll().then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// projects 将是所有 Project 实例的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索特定属性 - 使用哈希</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;A Project&#x27;</span> &#125; &#125;).then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// projects将是一个具有指定 name 的 Project 实例数组</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在特定范围内进行搜索</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125; &#125;).then(<span class="function"><span class="params">projects</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// projects将是一系列具有 id 1,2 或 3 的项目</span></span><br><span class="line">  <span class="comment">// 这实际上是在做一个 IN 查询</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: &#123;</span><br><span class="line">      [Op.and]: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;,           <span class="comment">// 且 (a = 5)</span></span><br><span class="line">      [Op.or]: [&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;],  <span class="comment">// (a = 5 或 a = 6)</span></span><br><span class="line">      [Op.gt]: <span class="number">6</span>,                <span class="comment">// id &gt; 6</span></span><br><span class="line">      [Op.gte]: <span class="number">6</span>,               <span class="comment">// id &gt;= 6</span></span><br><span class="line">      [Op.lt]: <span class="number">10</span>,               <span class="comment">// id &lt; 10</span></span><br><span class="line">      [Op.lte]: <span class="number">10</span>,              <span class="comment">// id &lt;= 10</span></span><br><span class="line">      [Op.ne]: <span class="number">20</span>,               <span class="comment">// id != 20</span></span><br><span class="line">      [Op.between]: [<span class="number">6</span>, <span class="number">10</span>],     <span class="comment">// 在 6 和 10 之间</span></span><br><span class="line">      [Op.notBetween]: [<span class="number">11</span>, <span class="number">15</span>], <span class="comment">// 不在 11 和 15 之间</span></span><br><span class="line">      [Op.in]: [<span class="number">1</span>, <span class="number">2</span>],           <span class="comment">// 在 [1, 2] 之中</span></span><br><span class="line">      [Op.notIn]: [<span class="number">1</span>, <span class="number">2</span>],        <span class="comment">// 不在 [1, 2] 之中</span></span><br><span class="line">      [Op.like]: <span class="string">&#x27;%hat&#x27;</span>,         <span class="comment">// 包含 &#x27;%hat&#x27;</span></span><br><span class="line">      [Op.notLike]: <span class="string">&#x27;%hat&#x27;</span>,       <span class="comment">// 不包含 &#x27;%hat&#x27;</span></span><br><span class="line">      [Op.iLike]: <span class="string">&#x27;%hat&#x27;</span>,         <span class="comment">// 包含 &#x27;%hat&#x27; (不区分大小写)  (仅限 PG)</span></span><br><span class="line">      [Op.notILike]: <span class="string">&#x27;%hat&#x27;</span>,      <span class="comment">// 不包含 &#x27;%hat&#x27;  (仅限 PG)</span></span><br><span class="line">      [Op.overlap]: [<span class="number">1</span>, <span class="number">2</span>],       <span class="comment">// &amp;&amp; [1, 2] (PG数组重叠运算符)</span></span><br><span class="line">      [Op.contains]: [<span class="number">1</span>, <span class="number">2</span>],      <span class="comment">// @&gt; [1, 2] (PG数组包含运算符)</span></span><br><span class="line">      [Op.contained]: [<span class="number">1</span>, <span class="number">2</span>],     <span class="comment">// &lt;@ [1, 2] (PG数组包含于运算符)</span></span><br><span class="line">      [Op.any]: [<span class="number">2</span>,<span class="number">3</span>],            <span class="comment">// 任何数组[2, 3]::INTEGER (仅限 PG)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">status</span>: &#123;</span><br><span class="line">      [Op.not]: <span class="literal">false</span>,           <span class="comment">// status 不为 FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="复合过滤-OR-NOT-查询"><a href="#复合过滤-OR-NOT-查询" class="headerlink" title="复合过滤 / OR / NOT 查询"></a>复合过滤 / OR / NOT 查询</h2><p>你可以使用多层嵌套的 AND,OR 和 NOT 条件进行一个复合的 where 查询. 为了做到这一点,你可以使用 <code>or</code> , <code>and</code> 或 <code>not</code> <code>运算符</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.findOne(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;a project&#x27;</span>,</span><br><span class="line">    [Op.or]: [</span><br><span class="line">      &#123; <span class="attr">id</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: &#123; [Op.gt]: <span class="number">10</span> &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.findOne(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;a project&#x27;</span>,</span><br><span class="line">    <span class="attr">id</span>: &#123;</span><br><span class="line">      [Op.or]: [</span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        &#123; [Op.gt]: <span class="number">10</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这两段代码将生成以下内容:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM <span class="string">`Projects`</span></span><br><span class="line">WHERE (</span><br><span class="line">  <span class="string">`Projects`</span>.<span class="string">`name`</span> = <span class="string">&#x27;a project&#x27;</span></span><br><span class="line">   AND (<span class="string">`Projects`</span>.<span class="string">`id`</span> IN (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) OR <span class="string">`Projects`</span>.<span class="string">`id`</span> &gt; <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><code>not</code> 示例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.findOne(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;a project&#x27;</span>,</span><br><span class="line">    [Op.not]: [</span><br><span class="line">      &#123; <span class="attr">id</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">array</span>: &#123; [Op.contains]: [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>将生成:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM <span class="string">`Projects`</span></span><br><span class="line">WHERE (</span><br><span class="line">  <span class="string">`Projects`</span>.<span class="string">`name`</span> = <span class="string">&#x27;a project&#x27;</span></span><br><span class="line">   AND NOT (<span class="string">`Projects`</span>.<span class="string">`id`</span> IN (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) OR <span class="string">`Projects`</span>.<span class="string">`array`</span> @&gt; ARRAY[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]::INTEGER[])</span><br><span class="line">)</span><br><span class="line">LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="用限制-偏移-顺序和分组操作数据集"><a href="#用限制-偏移-顺序和分组操作数据集" class="headerlink" title="用限制,偏移,顺序和分组操作数据集"></a>用限制,偏移,顺序和分组操作数据集</h3><p>要获取更多相关数据,可以使用限制,偏移,顺序和分组:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 限制查询的结果</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过前10个元素</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过前10个元素,并获取2个</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">10</span>, <span class="attr">limit</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>分组和排序的语法是相同的,所以下面只用一个单独的例子来解释分组,而其余的则是排序. 你下面看到的所有内容也可以对分组进行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.findAll(&#123;<span class="attr">order</span>: [[<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>]]&#125;)</span><br><span class="line"><span class="comment">// 生成 ORDER BY title DESC</span></span><br><span class="line"></span><br><span class="line">Project.findAll(&#123;<span class="attr">group</span>: <span class="string">&#x27;name&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">// 生成 GROUP BY name</span></span><br></pre></td></tr></table></figure>

<p>请注意,在上述两个示例中,提供的字符串逐字插入到查询中,所以不会转义列名称. 当你向 order / group 提供字符串时,将始终如此. 如果要转义列名,你应该提供一个参数数组,即使你只想通过单个列进行 order / group</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">something.findOne(&#123;</span><br><span class="line">  <span class="attr">order</span>: [</span><br><span class="line">    <span class="comment">// 将返回 `name`</span></span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="comment">// 将返回 `username` DESC</span></span><br><span class="line">    [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line">    <span class="comment">// 将返回 max(`age`)</span></span><br><span class="line">    sequelize.fn(<span class="string">&#x27;max&#x27;</span>, sequelize.col(<span class="string">&#x27;age&#x27;</span>)),</span><br><span class="line">    <span class="comment">// 将返回 max(`age`) DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">&#x27;max&#x27;</span>, sequelize.col(<span class="string">&#x27;age&#x27;</span>)), <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line">    <span class="comment">// 将返回 otherfunction(`col1`, 12, &#x27;lalala&#x27;) DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">&#x27;otherfunction&#x27;</span>, sequelize.col(<span class="string">&#x27;col1&#x27;</span>), <span class="number">12</span>, <span class="string">&#x27;lalala&#x27;</span>), <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line">    <span class="comment">// 将返回 otherfunction(awesomefunction(`col`)) DESC,这个嵌套是可以无限的！</span></span><br><span class="line">    [sequelize.fn(<span class="string">&#x27;otherfunction&#x27;</span>, sequelize.fn(<span class="string">&#x27;awesomefunction&#x27;</span>, sequelize.col(<span class="string">&#x27;col&#x27;</span>))), <span class="string">&#x27;DESC&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>回顾一下,order / group数组的元素可以是以下内容:</p>
<ul>
<li>String - 将被引用</li>
<li>Array - 第一个元素将被引用,第二个将被逐字地追加</li>
<li>Object -<ul>
<li>raw 将被添加逐字引用</li>
<li>如果未设置 raw,一切都被忽略,查询将失败</li>
</ul>
</li>
<li>Sequelize.fn 和 Sequelize.col 返回函数和引用的列名</li>
</ul>
<h3 id="字段过滤"><a href="#字段过滤" class="headerlink" title="字段过滤"></a>字段过滤</h3><p>想要只选择某些属性,可以使用 <code>attributes</code> 选项. 通常是传递一个数组:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  <span class="attr">attributes</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>属性可以使用嵌套数组来重命名:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  <span class="attr">attributes</span>: [<span class="string">&#x27;foo&#x27;</span>, [<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>也可以使用 <code>sequelize.fn</code> 来进行聚合:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  <span class="attr">attributes</span>: [[sequelize.fn(<span class="string">&#x27;COUNT&#x27;</span>, sequelize.col(<span class="string">&#x27;hats&#x27;</span>)), <span class="string">&#x27;no_hats&#x27;</span>]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用聚合功能时,必须给它一个别名,以便能够从模型中访问它. 在上面的例子中,你可以使用 <code>instance.get(&#39;no_hats&#39;)</code> 获得帽子数量.</p>
<p>有时,如果你只想添加聚合,则列出模型的所有属性可能令人厌烦:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This is a tiresome way of getting the number of hats...</span></span><br><span class="line">Model.findAll(&#123;</span><br><span class="line">  <span class="attr">attributes</span>: [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;quz&#x27;</span>, [sequelize.fn(<span class="string">&#x27;COUNT&#x27;</span>, sequelize.col(<span class="string">&#x27;hats&#x27;</span>)), <span class="string">&#x27;no_hats&#x27;</span>]]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is shorter, and less error prone because it still works if you add / remove attributes</span></span><br><span class="line">Model.findAll(&#123;</span><br><span class="line">  <span class="attr">attributes</span>: &#123; <span class="attr">include</span>: [[sequelize.fn(<span class="string">&#x27;COUNT&#x27;</span>, sequelize.col(<span class="string">&#x27;hats&#x27;</span>)), <span class="string">&#x27;no_hats&#x27;</span>]] &#125;</span><br><span class="line">&#125;);</span><br><span class="line">SELECT id, foo, bar, baz, quz, COUNT(hats) AS no_hats ...</span><br></pre></td></tr></table></figure>

<p>同样,它也可以排除一些指定的表字段:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  <span class="attr">attributes</span>: &#123; <span class="attr">exclude</span>: [<span class="string">&#x27;baz&#x27;</span>] &#125;</span><br><span class="line">&#125;);</span><br><span class="line">SELECT id, foo, bar, quz ...</span><br></pre></td></tr></table></figure>

<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><p>无论你是通过 findAll/find 或批量 updates/destroys 进行查询,都可以传递一个 <code>where</code> 对象来过滤查询.</p>
<p><code>where</code> 通常用 attribute:value 键值对获取一个对象,其中 value 可以是匹配等式的数据或其他运算符的键值对象.</p>
<p>也可以通过嵌套 <code>or</code> 和 <code>and</code> <code>运算符</code> 的集合来生成复杂的 AND/OR 条件.</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Op = Sequelize.Op;</span><br><span class="line"></span><br><span class="line">Post.findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">authorId</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SELECT * FROM post WHERE authorId = 2</span></span><br><span class="line"></span><br><span class="line">Post.findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">authorId</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SELECT * FROM post WHERE authorId = 12 AND status = &#x27;active&#x27;;</span></span><br><span class="line"></span><br><span class="line">Post.findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    [Op.or]: [&#123;<span class="attr">authorId</span>: <span class="number">12</span>&#125;, &#123;<span class="attr">authorId</span>: <span class="number">13</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;</span></span><br><span class="line"></span><br><span class="line">Post.findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">authorId</span>: &#123;</span><br><span class="line">      [Op.or]: [<span class="number">12</span>, <span class="number">13</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SELECT * FROM post WHERE authorId = 12 OR authorId = 13;</span></span><br><span class="line"></span><br><span class="line">Post.destroy(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;inactive&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// DELETE FROM post WHERE status = &#x27;inactive&#x27;;</span></span><br><span class="line"></span><br><span class="line">Post.update(&#123;</span><br><span class="line">  <span class="attr">updatedAt</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">deletedAt</span>: &#123;</span><br><span class="line">      [Op.ne]: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// UPDATE post SET updatedAt = null WHERE deletedAt NOT NULL;</span></span><br><span class="line"></span><br><span class="line">Post.findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: sequelize.where(sequelize.fn(<span class="string">&#x27;char_length&#x27;</span>, sequelize.col(<span class="string">&#x27;status&#x27;</span>)), <span class="number">6</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SELECT * FROM post WHERE char_length(status) = 6;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>Sequelize 可用于创建更复杂比较的符号运算符 -</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Op = Sequelize.Op</span><br><span class="line"></span><br><span class="line">[Op.and]: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;           <span class="comment">// 且 (a = 5)</span></span><br><span class="line">[Op.or]: [&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;]  <span class="comment">// (a = 5 或 a = 6)</span></span><br><span class="line">[Op.gt]: <span class="number">6</span>,                <span class="comment">// id &gt; 6</span></span><br><span class="line">[Op.gte]: <span class="number">6</span>,               <span class="comment">// id &gt;= 6</span></span><br><span class="line">[Op.lt]: <span class="number">10</span>,               <span class="comment">// id &lt; 10</span></span><br><span class="line">[Op.lte]: <span class="number">10</span>,              <span class="comment">// id &lt;= 10</span></span><br><span class="line">[Op.ne]: <span class="number">20</span>,               <span class="comment">// id != 20</span></span><br><span class="line">[Op.eq]: <span class="number">3</span>,                <span class="comment">// = 3</span></span><br><span class="line">[Op.not]: <span class="literal">true</span>,            <span class="comment">// 不是 TRUE</span></span><br><span class="line">[Op.between]: [<span class="number">6</span>, <span class="number">10</span>],     <span class="comment">// 在 6 和 10 之间</span></span><br><span class="line">[Op.notBetween]: [<span class="number">11</span>, <span class="number">15</span>], <span class="comment">// 不在 11 和 15 之间</span></span><br><span class="line">[Op.in]: [<span class="number">1</span>, <span class="number">2</span>],           <span class="comment">// 在 [1, 2] 之中</span></span><br><span class="line">[Op.notIn]: [<span class="number">1</span>, <span class="number">2</span>],        <span class="comment">// 不在 [1, 2] 之中</span></span><br><span class="line">[Op.like]: <span class="string">&#x27;%hat&#x27;</span>,         <span class="comment">// 包含 &#x27;%hat&#x27;</span></span><br><span class="line">[Op.notLike]: <span class="string">&#x27;%hat&#x27;</span>       <span class="comment">// 不包含 &#x27;%hat&#x27;</span></span><br><span class="line">[Op.iLike]: <span class="string">&#x27;%hat&#x27;</span>         <span class="comment">// 包含 &#x27;%hat&#x27; (不区分大小写)  (仅限 PG)</span></span><br><span class="line">[Op.notILike]: <span class="string">&#x27;%hat&#x27;</span>      <span class="comment">// 不包含 &#x27;%hat&#x27;  (仅限 PG)</span></span><br><span class="line">[Op.startsWith]: <span class="string">&#x27;hat&#x27;</span>     <span class="comment">// 类似 &#x27;hat%&#x27;</span></span><br><span class="line">[Op.endsWith]: <span class="string">&#x27;hat&#x27;</span>       <span class="comment">// 类似 &#x27;%hat&#x27;</span></span><br><span class="line">[Op.substring]: <span class="string">&#x27;hat&#x27;</span>      <span class="comment">// 类似 &#x27;%hat%&#x27;</span></span><br><span class="line">[Op.regexp]: <span class="string">&#x27;^[h|a|t]&#x27;</span>    <span class="comment">// 匹配正则表达式/~ &#x27;^[h|a|t]&#x27; (仅限 MySQL/PG)</span></span><br><span class="line">[Op.notRegexp]: <span class="string">&#x27;^[h|a|t]&#x27;</span> <span class="comment">// 不匹配正则表达式/!~ &#x27;^[h|a|t]&#x27; (仅限 MySQL/PG)</span></span><br><span class="line">[Op.iRegexp]: <span class="string">&#x27;^[h|a|t]&#x27;</span>    <span class="comment">// ~* &#x27;^[h|a|t]&#x27; (仅限 PG)</span></span><br><span class="line">[Op.notIRegexp]: <span class="string">&#x27;^[h|a|t]&#x27;</span> <span class="comment">// !~* &#x27;^[h|a|t]&#x27; (仅限 PG)</span></span><br><span class="line">[Op.like]: &#123; [Op.any]: [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;hat&#x27;</span>]&#125; <span class="comment">// 包含任何数组[&#x27;cat&#x27;, &#x27;hat&#x27;] - 同样适用于 iLike 和 notLike</span></span><br><span class="line">[Op.overlap]: [<span class="number">1</span>, <span class="number">2</span>]       <span class="comment">// &amp;&amp; [1, 2] (PG数组重叠运算符)</span></span><br><span class="line">[Op.contains]: [<span class="number">1</span>, <span class="number">2</span>]      <span class="comment">// @&gt; [1, 2] (PG数组包含运算符)</span></span><br><span class="line">[Op.contained]: [<span class="number">1</span>, <span class="number">2</span>]     <span class="comment">// &lt;@ [1, 2] (PG数组包含于运算符)</span></span><br><span class="line">[Op.any]: [<span class="number">2</span>,<span class="number">3</span>]            <span class="comment">// 任何数组[2, 3]::INTEGER (仅限PG)</span></span><br><span class="line"></span><br><span class="line">[Op.col]: <span class="string">&#x27;user.organization_id&#x27;</span> <span class="comment">// = &#x27;user&#x27;.&#x27;organization_id&#x27;, 使用数据库语言特定的列标识符, 本例使用 PG</span></span><br></pre></td></tr></table></figure>

<h2 id="范围选项"><a href="#范围选项" class="headerlink" title="范围选项"></a>范围选项</h2><p>所有操作符都支持支持的范围类型查询.</p>
<p>请记住,提供的范围值也可以<a href="https://itfun.tv/documents/266#range-types">定义绑定的 inclusion/exclusion</a>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有上述相等和不相等的操作符加上以下内容:</span></span><br><span class="line"></span><br><span class="line">[Op.contains]: <span class="number">2</span>           <span class="comment">// @&gt; &#x27;2&#x27;::integer (PG range contains element operator)</span></span><br><span class="line">[Op.contains]: [<span class="number">1</span>, <span class="number">2</span>]      <span class="comment">// @&gt; [1, 2) (PG range contains range operator)</span></span><br><span class="line">[Op.contained]: [<span class="number">1</span>, <span class="number">2</span>]     <span class="comment">// &lt;@ [1, 2) (PG range is contained by operator)</span></span><br><span class="line">[Op.overlap]: [<span class="number">1</span>, <span class="number">2</span>]       <span class="comment">// &amp;&amp; [1, 2) (PG range overlap (have points in common) operator)</span></span><br><span class="line">[Op.adjacent]: [<span class="number">1</span>, <span class="number">2</span>]      <span class="comment">// -|- [1, 2) (PG range is adjacent to operator)</span></span><br><span class="line">[Op.strictLeft]: [<span class="number">1</span>, <span class="number">2</span>]    <span class="comment">// &lt;&lt; [1, 2) (PG range strictly left of operator)</span></span><br><span class="line">[Op.strictRight]: [<span class="number">1</span>, <span class="number">2</span>]   <span class="comment">// &gt;&gt; [1, 2) (PG range strictly right of operator)</span></span><br><span class="line">[Op.noExtendRight]: [<span class="number">1</span>, <span class="number">2</span>] <span class="comment">// &amp;&lt; [1, 2) (PG range does not extend to the right of operator)</span></span><br><span class="line">[Op.noExtendLeft]: [<span class="number">1</span>, <span class="number">2</span>]  <span class="comment">// &amp;&gt; [1, 2) (PG range does not extend to the left of operator)</span></span><br></pre></td></tr></table></figure>

<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">rank</span>: &#123;</span><br><span class="line">    [Op.or]: &#123;</span><br><span class="line">      [Op.lt]: <span class="number">1000</span>,</span><br><span class="line">      [Op.eq]: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// rank &lt; 1000 OR rank IS NULL</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">createdAt</span>: &#123;</span><br><span class="line">    [Op.lt]: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    [Op.gt]: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// createdAt &lt; [timestamp] AND createdAt &gt; [timestamp]</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  [Op.or]: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">title</span>: &#123;</span><br><span class="line">        [Op.like]: <span class="string">&#x27;Boat%&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">description</span>: &#123;</span><br><span class="line">        [Op.like]: <span class="string">&#x27;%boat%&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// title LIKE &#x27;Boat%&#x27; OR description LIKE &#x27;%boat%&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="关系-关联"><a href="#关系-关联" class="headerlink" title="关系 / 关联"></a>关系 / 关联</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到所有具有至少一个 task 的  project,其中 task.state === project.state</span></span><br><span class="line">Project.findAll(&#123;</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: Task,</span><br><span class="line">        <span class="attr">where</span>: &#123; <span class="attr">state</span>: Sequelize.col(<span class="string">&#x27;project.state&#x27;</span>) &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="分页-限制"><a href="#分页-限制" class="headerlink" title="分页 / 限制"></a>分页 / 限制</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取10个实例/行</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过8个实例/行</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">8</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过5个实例,然后取5个</span></span><br><span class="line">Project.findAll(&#123; <span class="attr">offset</span>: <span class="number">5</span>, <span class="attr">limit</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p><code>order</code> 需要一个条目的数组来排序查询或者一个 sequelize 方法.一般来说,你将要使用任一属性的 tuple/array,并确定排序的正反方向.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Subtask.findAll(&#123;</span><br><span class="line">  <span class="attr">order</span>: [</span><br><span class="line">    <span class="comment">// 将转义标题,并根据有效的方向参数列表验证DESC</span></span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将按最大值排序(age)</span></span><br><span class="line">    sequelize.fn(<span class="string">&#x27;max&#x27;</span>, sequelize.col(<span class="string">&#x27;age&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将按最大顺序(age) DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">&#x27;max&#x27;</span>, sequelize.col(<span class="string">&#x27;age&#x27;</span>)), <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将按 otherfunction 排序(`col1`, 12, &#x27;lalala&#x27;) DESC</span></span><br><span class="line">    [sequelize.fn(<span class="string">&#x27;otherfunction&#x27;</span>, sequelize.col(<span class="string">&#x27;col1&#x27;</span>), <span class="number">12</span>, <span class="string">&#x27;lalala&#x27;</span>), <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将使用模型名称作为关联的名称排序关联模型的 created_at.</span></span><br><span class="line">    [Task, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Will order through an associated model&#x27;s created_at using the model names as the associations&#x27; names.</span></span><br><span class="line">    [Task, Project, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将使用关联的名称由关联模型的created_at排序.</span></span><br><span class="line">    [<span class="string">&#x27;Task&#x27;</span>, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Will order by a nested associated model&#x27;s created_at using the names of the associations.</span></span><br><span class="line">    [<span class="string">&#x27;Task&#x27;</span>, <span class="string">&#x27;Project&#x27;</span>, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Will order by an associated model&#x27;s created_at using an association object. (优选方法)</span></span><br><span class="line">    [Subtask.associations.Task, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Will order by a nested associated model&#x27;s created_at using association objects. (优选方法)</span></span><br><span class="line">    [Subtask.associations.Task, Task.associations.Project, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Will order by an associated model&#x27;s created_at using a simple association object.</span></span><br><span class="line">    [&#123;<span class="attr">model</span>: Task, <span class="attr">as</span>: <span class="string">&#x27;Task&#x27;</span>&#125;, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 嵌套关联模型的 created_at 简单关联对象排序</span></span><br><span class="line">    [&#123;<span class="attr">model</span>: Task, <span class="attr">as</span>: <span class="string">&#x27;Task&#x27;</span>&#125;, &#123;<span class="attr">model</span>: Project, <span class="attr">as</span>: <span class="string">&#x27;Project&#x27;</span>&#125;, <span class="string">&#x27;createdAt&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将按年龄最大值降序排列</span></span><br><span class="line">  <span class="attr">order</span>: sequelize.literal(<span class="string">&#x27;max(age) DESC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按最年龄大值升序排列,当省略排序条件时默认是升序排列</span></span><br><span class="line">  <span class="attr">order</span>: sequelize.fn(<span class="string">&#x27;max&#x27;</span>, sequelize.col(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按升序排列是省略排序条件的默认顺序</span></span><br><span class="line">  <span class="attr">order</span>: sequelize.col(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将根据方言随机排序 (而不是 fn(&#x27;RAND&#x27;) 或 fn(&#x27;RANDOM&#x27;))</span></span><br><span class="line">  <span class="attr">order</span>: sequelize.random()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="count-计算数据库中元素的出现次数"><a href="#count-计算数据库中元素的出现次数" class="headerlink" title="count - 计算数据库中元素的出现次数"></a><code>count</code> - 计算数据库中元素的出现次数</h4><p>还有一种数据库对象计数的方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.count().then(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;There are &quot;</span> + c + <span class="string">&quot; projects!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.count(&#123; <span class="attr">where</span>: &#123;<span class="string">&#x27;id&#x27;</span>: &#123;[Op.gt]: <span class="number">25</span>&#125;&#125; &#125;).then(<span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;There are &quot;</span> + c + <span class="string">&quot; projects with an id greater than 25.&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="max-获取特定表中特定属性的最大值"><a href="#max-获取特定表中特定属性的最大值" class="headerlink" title="max - 获取特定表中特定属性的最大值"></a><code>max</code> - 获取特定表中特定属性的最大值</h4><p>这里是获取属性的最大值的方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   我们假设3个具有属性年龄的对象.</span></span><br><span class="line"><span class="comment">   第一个是10岁,</span></span><br><span class="line"><span class="comment">   第二个是5岁,</span></span><br><span class="line"><span class="comment">   第三个是40岁.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Project.max(<span class="string">&#x27;age&#x27;</span>).then(<span class="function"><span class="params">max</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将返回 40</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.max(<span class="string">&#x27;age&#x27;</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.lt]: <span class="number">20</span> &#125; &#125; &#125;).then(<span class="function"><span class="params">max</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将会是 10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="min-获取特定表中特定属性的最小值"><a href="#min-获取特定表中特定属性的最小值" class="headerlink" title="min - 获取特定表中特定属性的最小值"></a><code>min</code> - 获取特定表中特定属性的最小值</h4><p>这里是获取属性的最小值的方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   我们假设3个具有属性年龄的对象.</span></span><br><span class="line"><span class="comment">   第一个是10岁,</span></span><br><span class="line"><span class="comment">   第二个是5岁,</span></span><br><span class="line"><span class="comment">   第三个是40岁.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Project.min(<span class="string">&#x27;age&#x27;</span>).then(<span class="function"><span class="params">min</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将返回 5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.min(<span class="string">&#x27;age&#x27;</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.gt]: <span class="number">5</span> &#125; &#125; &#125;).then(<span class="function"><span class="params">min</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将会是 10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="sum-特定属性的值求和"><a href="#sum-特定属性的值求和" class="headerlink" title="sum - 特定属性的值求和"></a><code>sum</code> - 特定属性的值求和</h4><p>为了计算表的特定列的总和,可以使用“sum”方法.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   我们假设3个具有属性年龄的对象.</span></span><br><span class="line"><span class="comment">   第一个是10岁,</span></span><br><span class="line"><span class="comment">   第二个是5岁,</span></span><br><span class="line"><span class="comment">   第三个是40岁.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Project.sum(<span class="string">&#x27;age&#x27;</span>).then(<span class="function"><span class="params">sum</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将返回 55</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Project.sum(<span class="string">&#x27;age&#x27;</span>, &#123; <span class="attr">where</span>: &#123; <span class="attr">age</span>: &#123; [Op.gt]: <span class="number">5</span> &#125; &#125; &#125;).then(<span class="function"><span class="params">sum</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将会是 50</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h1><p>当你从数据库检索数据时,也想同时获得与之相关联的查询,这被称为预加载.这个基本思路就是当你调用 <code>find</code> 或 <code>findAll</code> 时使用 <code>include</code> 属性.让我们假设以下设置:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">User.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize, <span class="attr">modelName</span>: <span class="string">&#x27;user&#x27;</span> &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Task.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize, <span class="attr">modelName</span>: <span class="string">&#x27;task&#x27;</span> &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Tool.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize, <span class="attr">modelName</span>: <span class="string">&#x27;tool&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">Task.belongsTo(User)</span><br><span class="line">User.hasMany(Task)</span><br><span class="line">User.hasMany(Tool, &#123; <span class="attr">as</span>: <span class="string">&#x27;Instruments&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">sequelize.sync().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这是我们继续的地方 ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>首先,让我们用它们的关联 user 加载所有的 task.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Task.findAll(&#123; <span class="attr">include</span>: [ User ] &#125;).then(<span class="function"><span class="params">tasks</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(tasks))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;</span></span><br><span class="line"><span class="comment">      &quot;name&quot;: &quot;A Task&quot;,</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;createdAt&quot;: &quot;2013-03-20T20:31:40.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;updatedAt&quot;: &quot;2013-03-20T20:31:40.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;userId&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;user&quot;: &#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>请注意,访问者(结果实例中的 <code>User</code> 属性)是单数形式,因为关联是一对一的.</p>
<p>接下来的事情:用多对一的关联加载数据！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123; <span class="attr">include</span>: [ Task ] &#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;</span></span><br><span class="line"><span class="comment">      &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;tasks&quot;: [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;A Task&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: &quot;2013-03-20T20:31:40.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: &quot;2013-03-20T20:31:40.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">      &#125;]</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>请注意,访问者(结果实例中的 <code>Tasks</code> 属性)是复数形式,因为关联是多对一的.</p>
<p>如果关联是别名的(使用 <code>as</code> 参数),则在包含模型时必须指定此别名. 注意用户的 <code>Tool</code> 如何被别名为 <code>Instruments</code>. 为了获得正确的权限,你必须指定要加载的模型以及别名:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123; <span class="attr">include</span>: [&#123; <span class="attr">model</span>: Tool, <span class="attr">as</span>: <span class="string">&#x27;Instruments&#x27;</span> &#125;] &#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;</span></span><br><span class="line"><span class="comment">      &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">      &#125;]</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>你还可以通过指定与关联别名匹配的字符串来包含别名:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123; <span class="attr">include</span>: [<span class="string">&#x27;Instruments&#x27;</span>] &#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;</span></span><br><span class="line"><span class="comment">      &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">      &#125;]</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">User.findAll(&#123; <span class="attr">include</span>: [&#123; <span class="attr">association</span>: <span class="string">&#x27;Instruments&#x27;</span> &#125;] &#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;</span></span><br><span class="line"><span class="comment">      &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">      &#125;]</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当预加载时,我们也可以使用 <code>where</code> 过滤关联的模型. 这将返回 <code>Tool</code> 模型中所有与 <code>where</code> 语句匹配的行的<code>User</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: Tool,</span><br><span class="line">        <span class="attr">as</span>: <span class="string">&#x27;Instruments&#x27;</span>,</span><br><span class="line">        <span class="attr">where</span>: &#123; <span class="attr">name</span>: &#123; [Op.like]: <span class="string">&#x27;%ooth%&#x27;</span> &#125; &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">          &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">          &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">          &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">        &#125;]</span></span><br><span class="line"><span class="comment">      &#125;],</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;John Smith&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 2,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">          &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">          &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">          &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">        &#125;]</span></span><br><span class="line"><span class="comment">      &#125;],</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>当使用 <code>include.where</code> 过滤一个预加载的模型时,<code>include.required</code> 被隐式设置为 <code>true</code>. 这意味着内部联接完成返回具有任何匹配子项的父模型.</p>
<h2 id="使用预加载模型的顶层-WHERE"><a href="#使用预加载模型的顶层-WHERE" class="headerlink" title="使用预加载模型的顶层 WHERE"></a>使用预加载模型的顶层 WHERE</h2><p>将模型的 <code>WHERE</code> 条件从 <code>ON</code> 条件的 include 模式移动到顶层,你可以使用 <code>&#39;$nested.column$&#39;</code> 语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;$Instruments.name$&#x27;</span>: &#123; [Op.iLike]: <span class="string">&#x27;%ooth%&#x27;</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: Tool,</span><br><span class="line">        <span class="attr">as</span>: <span class="string">&#x27;Instruments&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">          &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">          &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">          &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">        &#125;]</span></span><br><span class="line"><span class="comment">      &#125;],</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      [&#123;</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;John Smith&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 2,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">        &quot;Instruments&quot;: [&#123;</span></span><br><span class="line"><span class="comment">          &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">          &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">          &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">          &quot;userId&quot;: 1</span></span><br><span class="line"><span class="comment">        &#125;]</span></span><br><span class="line"><span class="comment">      &#125;],</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<h3 id="包括所有"><a href="#包括所有" class="headerlink" title="包括所有"></a>包括所有</h3><p>要包含所有属性,你可以使用 <code>all:true</code> 传递单个对象:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123; <span class="attr">include</span>: [&#123; <span class="attr">all</span>: <span class="literal">true</span> &#125;]&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="包括软删除的记录"><a href="#包括软删除的记录" class="headerlink" title="包括软删除的记录"></a>包括软删除的记录</h3><p>如果想要加载软删除的记录,可以通过将 <code>include.paranoid</code> 设置为 <code>false</code> 来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: Tool,</span><br><span class="line">        <span class="attr">where</span>: &#123; <span class="attr">name</span>: &#123; [Op.like]: <span class="string">&#x27;%ooth%&#x27;</span> &#125; &#125;,</span><br><span class="line">        <span class="attr">paranoid</span>: <span class="literal">false</span> <span class="comment">// query and loads the soft deleted records</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="排序预加载关联"><a href="#排序预加载关联" class="headerlink" title="排序预加载关联"></a>排序预加载关联</h3><p>在一对多关系的情况下.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Company.findAll(&#123; <span class="attr">include</span>: [ Division ], <span class="attr">order</span>: [ [ Division, <span class="string">&#x27;name&#x27;</span> ] ] &#125;);</span><br><span class="line">Company.findAll(&#123; <span class="attr">include</span>: [ Division ], <span class="attr">order</span>: [ [ Division, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span> ] ] &#125;);</span><br><span class="line">Company.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [ &#123; <span class="attr">model</span>: Division, <span class="attr">as</span>: <span class="string">&#x27;Div&#x27;</span> &#125; ],</span><br><span class="line">  <span class="attr">order</span>: [ [ &#123; <span class="attr">model</span>: Division, <span class="attr">as</span>: <span class="string">&#x27;Div&#x27;</span> &#125;, <span class="string">&#x27;name&#x27;</span> ] ]</span><br><span class="line">&#125;);</span><br><span class="line">Company.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [ &#123; <span class="attr">model</span>: Division, <span class="attr">as</span>: <span class="string">&#x27;Div&#x27;</span> &#125; ],</span><br><span class="line">  <span class="attr">order</span>: [ [ &#123; <span class="attr">model</span>: Division, <span class="attr">as</span>: <span class="string">&#x27;Div&#x27;</span> &#125;, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;DESC&#x27;</span> ] ]</span><br><span class="line">&#125;);</span><br><span class="line">Company.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [ &#123; <span class="attr">model</span>: Division, <span class="attr">include</span>: [ Department ] &#125; ],</span><br><span class="line">  <span class="attr">order</span>: [ [ Division, Department, <span class="string">&#x27;name&#x27;</span> ] ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在多对多关系的情况下,你还可以通过表中的属性进行排序.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Company.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [ &#123; <span class="attr">model</span>: Division, <span class="attr">include</span>: [ Department ] &#125; ],</span><br><span class="line">  <span class="attr">order</span>: [ [ Division, DepartmentDivision, <span class="string">&#x27;name&#x27;</span> ] ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="嵌套预加载"><a href="#嵌套预加载" class="headerlink" title="嵌套预加载"></a>嵌套预加载</h1><p>你可以使用嵌套的预加载来加载相关模型的所有相关模型:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [</span><br><span class="line">    &#123;<span class="attr">model</span>: Tool, <span class="attr">as</span>: <span class="string">&#x27;Instruments&#x27;</span>, <span class="attr">include</span>: [</span><br><span class="line">      &#123;<span class="attr">model</span>: Teacher, <span class="attr">include</span>: [ <span class="comment">/* etc */</span>]&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(users))</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [&#123;</span></span><br><span class="line"><span class="comment">      &quot;name&quot;: &quot;John Doe&quot;,</span></span><br><span class="line"><span class="comment">      &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">      &quot;createdAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;updatedAt&quot;: &quot;2013-03-20T20:31:45.000Z&quot;,</span></span><br><span class="line"><span class="comment">      &quot;Instruments&quot;: [&#123; // 1:M and N:M association</span></span><br><span class="line"><span class="comment">        &quot;name&quot;: &quot;Toothpick&quot;,</span></span><br><span class="line"><span class="comment">        &quot;id&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;createdAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;updatedAt&quot;: null,</span></span><br><span class="line"><span class="comment">        &quot;userId&quot;: 1,</span></span><br><span class="line"><span class="comment">        &quot;Teacher&quot;: &#123; // 1:1 association</span></span><br><span class="line"><span class="comment">          &quot;name&quot;: &quot;Jimi Hendrix&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;]</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这将产生一个外连接. 但是,相关模型上的 <code>where</code> 语句将创建一个内部连接,并仅返回具有匹配子模型的实例. 要返回所有父实例,你应该添加 <code>required: false</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: [&#123;</span><br><span class="line">    <span class="attr">model</span>: Tool,</span><br><span class="line">    <span class="attr">as</span>: <span class="string">&#x27;Instruments&#x27;</span>,</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: Teacher,</span><br><span class="line">      <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">school</span>: <span class="string">&quot;Woodstock Music School&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">false</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以上查询将返回所有用户及其所有乐器,但只会返回与 <code>Woodstock Music School</code> 相关的老师.</p>
<p>包括所有也支持嵌套加载:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.findAll(&#123; <span class="attr">include</span>: [&#123; <span class="attr">all</span>: <span class="literal">true</span>, <span class="attr">nested</span>: <span class="literal">true</span> &#125;]&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><h3 id="字段限制"><a href="#字段限制" class="headerlink" title="字段限制"></a>字段限制</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> User.create(&#123; <span class="attr">username</span>: <span class="string">&#x27;barfooz&#x27;</span>, <span class="attr">isAdmin</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">fields</span>: [ <span class="string">&#x27;username&#x27;</span> ] &#125;);</span><br><span class="line"><span class="comment">// 只有username有效</span></span><br><span class="line"></span><br><span class="line">User.bulkCreate([</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;foo&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">admin</span>: <span class="literal">true</span>&#125;</span><br><span class="line">], &#123; <span class="attr">fields</span>: [<span class="string">&#x27;username&#x27;</span>] &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// admin 将不会被构建</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="新增单个"><a href="#新增单个" class="headerlink" title="新增单个"></a>新增单个</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create</span></span><br><span class="line"><span class="built_in">this</span>.ctx.body = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.create(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;哈哈哈&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量新增 bulkCreate</span></span><br><span class="line"><span class="built_in">this</span>.ctx.body = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.bulkCreate([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;第一个&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">15</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;第二个&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">15</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;第三个&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">15</span></span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="字段限制-1"><a href="#字段限制-1" class="headerlink" title="字段限制"></a>字段限制</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">task.title = <span class="string">&#x27;foooo&#x27;</span></span><br><span class="line">task.description = <span class="string">&#x27;baaaaaar&#x27;</span></span><br><span class="line"><span class="keyword">await</span> task.save(&#123;<span class="attr">fields</span>: [<span class="string">&#x27;title&#x27;</span>]&#125;);</span><br><span class="line"><span class="comment">// title 现在将是 “foooo”,而 description 与以前一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用等效的 update 调用如下所示:</span></span><br><span class="line"><span class="keyword">await</span> task.update(&#123; <span class="attr">title</span>: <span class="string">&#x27;foooo&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;baaaaaar&#x27;</span>&#125;, &#123;<span class="attr">fields</span>: [<span class="string">&#x27;title&#x27;</span>]&#125;);</span><br><span class="line"><span class="comment">//  title 现在将是 “foooo”,而 description 与以前一样</span></span><br></pre></td></tr></table></figure>

<h3 id="单个修改"><a href="#单个修改" class="headerlink" title="单个修改"></a>单个修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出当前记录</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.findByPk(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">await</span> user.update(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;我被修改了&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a>批量修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量修改</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.update(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;批量修改&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="comment">// 条件</span></span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;第一个&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="递增"><a href="#递增" class="headerlink" title="递增"></a>递增</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 找出当前记录 increment</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.findByPk(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">this</span>.ctx.body = <span class="keyword">await</span> user.increment(&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>, <span class="comment">// age每次递增3</span></span><br><span class="line">    <span class="attr">other</span>:<span class="number">2</span> <span class="comment">// other每次递增2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="递减"><a href="#递减" class="headerlink" title="递减"></a>递减</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 找出当前记录 decrement</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.findByPk(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">this</span>.ctx.body = <span class="keyword">await</span> user.decrement(&#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>, <span class="comment">// age每次递减3</span></span><br><span class="line">    <span class="attr">other</span>:<span class="number">2</span> <span class="comment">// other每次递减2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="软删除"><a href="#软删除" class="headerlink" title="软删除"></a>软删除</h3><p>模型中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置（重要）</span></span><br><span class="line">  <span class="keyword">const</span> User = app.model.define(<span class="string">&#x27;user&#x27;</span>, &#123; <span class="comment">/* bla */</span>&#125;,&#123;</span><br><span class="line">      <span class="comment">// 同时需要设置paranoid为true（此种模式下，删除数据时不会进行物理删除，而是设置deletedAt为当前时间</span></span><br><span class="line">      <span class="string">&#x27;paranoid&#x27;</span>: <span class="literal">true</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="查询包括软删除内容"><a href="#查询包括软删除内容" class="headerlink" title="查询包括软删除内容"></a>查询包括软删除内容</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">await</span> ctx.model.User.findOne(&#123;</span><br><span class="line">    <span class="attr">include</span>:&#123;</span><br><span class="line">      <span class="attr">model</span>:ctx.model.Video,</span><br><span class="line">      <span class="comment">// 包括软删除</span></span><br><span class="line">      <span class="attr">paranoid</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">33</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 包括软删除</span></span><br><span class="line">    <span class="attr">paranoid</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="彻底删除"><a href="#彻底删除" class="headerlink" title="彻底删除"></a>彻底删除</h3><p>如果 <code>paranoid</code> 选项为 true,则不会删除该对象,而将 <code>deletedAt</code> 列设置为当前时间戳. 要强制删除,可以将 <code>force: true</code> 传递给 destroy 调用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">task.destroy(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>在 <code>paranoid</code> 模式下对象被软删除后,在强制删除旧实例之前,你将无法使用相同的主键创建新实例.</p>
<h3 id="恢复软删除的实例"><a href="#恢复软删除的实例" class="headerlink" title="恢复软删除的实例"></a>恢复软删除的实例</h3><p>如果你使用 <code>paranoid:true</code> 软删除了模型的实例,之后想要撤消删除,请使用 <code>restore</code> 方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进行软删除...</span></span><br><span class="line">task.destroy();</span><br><span class="line"><span class="comment">// 恢复软删除...</span></span><br><span class="line">task.restore();</span><br></pre></td></tr></table></figure>

<h3 id="条件删除"><a href="#条件删除" class="headerlink" title="条件删除"></a>条件删除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.User.destroy(&#123;</span><br><span class="line">   <span class="attr">where</span>: &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&quot;批量修改&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.Post.destroy(&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: posts</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="重载实例"><a href="#重载实例" class="headerlink" title="重载实例"></a>重载实例</h2><p>如果你需要让你的实例同步,你可以使用 <code>reload</code> 方法. 它将从数据库中获取当前数据,并覆盖调用该方法的模型的属性.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.findOne(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;john&#x27;</span> &#125; &#125;).then(<span class="function"><span class="params">person</span> =&gt;</span> &#123;</span><br><span class="line">  person.name = <span class="string">&#x27;jane&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.name) <span class="comment">// &#x27;jane&#x27;</span></span><br><span class="line"></span><br><span class="line">  person.reload().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person.name) <span class="comment">// &#x27;john&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="模型自定义方法"><a href="#模型自定义方法" class="headerlink" title="模型自定义方法"></a>模型自定义方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模型</span></span><br><span class="line"><span class="comment">// 模型自定义方法</span></span><br><span class="line">topic_user.ceshi = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;模型自定义方法&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    <span class="keyword">return</span> param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制器</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.ctx.model.TopicUser.ceshi(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Scopes-作用域（重点）"><a href="#Scopes-作用域（重点）" class="headerlink" title="Scopes - 作用域（重点）"></a>Scopes - 作用域（重点）</h2><p>作用域允许你定义常用查询,以便以后轻松使用. 作用域可以包括与常规查找器 <code>where</code>, <code>include</code>, <code>limit</code> 等所有相同的属性.</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>作用域在模型定义中定义,可以是finder对象或返回finder对象的函数,除了默认作用域,该作用域只能是一个对象:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Project.init(&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">defaultScope</span>: &#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">      <span class="attr">active</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">scopes</span>: &#123;</span><br><span class="line">    <span class="attr">deleted</span>: &#123;</span><br><span class="line">      <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">deleted</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">activeUsers</span>: &#123;</span><br><span class="line">      <span class="attr">include</span>: [</span><br><span class="line">        &#123; <span class="attr">model</span>: User, <span class="attr">where</span>: &#123; <span class="attr">active</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    random () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">          <span class="attr">someNumber</span>: <span class="built_in">Math</span>.random()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    accessLevel (value) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">where</span>: &#123;</span><br><span class="line">          <span class="attr">accessLevel</span>: &#123;</span><br><span class="line">            [Op.gte]: value</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sequelize,</span><br><span class="line">    <span class="attr">modelName</span>: <span class="string">&#x27;project&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过调用 <code>addScope</code> 定义模型后,还可以添加作用域. 这对于具有包含的作用域特别有用,其中在定义其他模型时可能不会定义 include 中的模型.</p>
<p>始终应用默认作用域. 这意味着,通过上面的模型定义,<code>Project.findAll()</code> 将创建以下查询:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SELECT * FROM projects WHERE active = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>可以通过调用 <code>.unscoped()</code>, <code>.scope(null)</code> 或通过调用另一个作用域来删除默认作用域:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.scope(<span class="string">&#x27;deleted&#x27;</span>).findAll(); <span class="comment">// 删除默认作用域</span></span><br><span class="line">SELECT * FROM projects WHERE deleted = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>还可以在作用域定义中包含作用域模型. 这让你避免重复 <code>include</code>,<code>attributes</code> 或 <code>where</code> 定义.</p>
<p>使用上面的例子,并在包含的用户模型中调用 <code>active</code> 作用域(而不是直接在该 include 对象中指定条件):</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">activeUsers: &#123;</span><br><span class="line">  <span class="attr">include</span>: [</span><br><span class="line">    &#123; <span class="attr">model</span>: User.scope(<span class="string">&#x27;active&#x27;</span>)&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>通过在模型定义上调用 <code>.scope</code> 来应用作用域,传递一个或多个作用域的名称. <code>.scope</code> 返回一个全功能的模型实例,它具有所有常规的方法:<code>.findAll</code>,<code>.update</code>,<code>.count</code>,<code>.destroy</code>等等.你可以保存这个模型实例并稍后再次使用:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DeletedProjects = Project.scope(<span class="string">&#x27;deleted&#x27;</span>);</span><br><span class="line"></span><br><span class="line">DeletedProjects.findAll();</span><br><span class="line"><span class="comment">// 过一段时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让我们再次寻找被删除的项目！</span></span><br><span class="line">DeletedProjects.findAll();</span><br></pre></td></tr></table></figure>

<p>作用域适用于 <code>.find</code>, <code>.findAll</code>, <code>.count</code>, <code>.update</code>, <code>.increment</code> 和 <code>.destroy</code>.</p>
<p>可以通过两种方式调用作为函数的作用域. 如果作用域没有任何参数,它可以正常调用. 如果作用域采用参数,则传递一个对象:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.scope(<span class="string">&#x27;random&#x27;</span>, &#123; <span class="attr">method</span>: [<span class="string">&#x27;accessLevel&#x27;</span>, <span class="number">19</span>]&#125;).findAll();</span><br><span class="line">SELECT * FROM projects WHERE someNumber = <span class="number">42</span> AND accessLevel &gt;= <span class="number">19</span></span><br></pre></td></tr></table></figure>

<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>通过将作用域数组传递到 <code>.scope</code> 或通过将作用域作为连续参数传递,可以同时应用多个作用域.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这两个是等价的</span></span><br><span class="line">Project.scope(<span class="string">&#x27;deleted&#x27;</span>, <span class="string">&#x27;activeUsers&#x27;</span>).findAll();</span><br><span class="line">Project.scope([<span class="string">&#x27;deleted&#x27;</span>, <span class="string">&#x27;activeUsers&#x27;</span>]).findAll();</span><br><span class="line">SELECT * FROM projects</span><br><span class="line">INNER JOIN users ON projects.userId = users.id</span><br><span class="line">WHERE projects.deleted = <span class="literal">true</span></span><br><span class="line">AND users.active = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如果要将其他作用域与默认作用域一起应用,请将键 <code>defaultScope</code> 传递给 <code>.scope</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.scope(<span class="string">&#x27;defaultScope&#x27;</span>, <span class="string">&#x27;deleted&#x27;</span>).findAll();</span><br><span class="line">SELECT * FROM projects WHERE active = <span class="literal">true</span> AND deleted = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>当调用多个作用域时,后续作用域的键将覆盖以前的作用域(类似于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign</a>),除了<code>where</code>和<code>include</code>,它们将被合并. 考虑两个作用域:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">scope1</span>: &#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">&#x27;bob&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: &#123;</span><br><span class="line">        [Op.gt]: <span class="number">20</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">scope2</span>: &#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">      <span class="attr">age</span>: &#123;</span><br><span class="line">        [Op.gt]: <span class="number">30</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <code>.scope(&#39;scope1&#39;, &#39;scope2&#39;)</code> 将产生以下查询</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">WHERE firstName = <span class="string">&#x27;bob&#x27;</span> AND age &gt; <span class="number">30</span> LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>注意 <code>scope2</code> 将覆盖 <code>limit</code> 和 <code>age</code>,而 <code>firstName</code> 被保留. <code>limit</code>,<code>offset</code>,<code>order</code>,<code>paranoid</code>,<code>lock</code>和<code>raw</code>字段被覆盖,而<code>where</code>被浅层合并(意味着相同的键将被覆盖). <code>include</code> 的合并策略将在后面讨论.</p>
<p>请注意,多个应用作用域的 <code>attributes</code> 键以这样的方式合并,即始终保留 <code>attributes.exclude</code>. 这允许合并多个作用域,并且永远不会泄漏最终作用域内的敏感字段.</p>
<p>将查找对象直接传递给作用域模型上的<code>findAll</code>(和类似的查找程序)时,适用相同的合并逻辑:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Project.scope(<span class="string">&#x27;deleted&#x27;</span>).findAll(&#123;</span><br><span class="line">  <span class="attr">where</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;john&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">WHERE deleted = <span class="literal">true</span> AND firstName = <span class="string">&#x27;john&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>deleted</code> 作用域与 finder 合并. 如果我们要将 <code>where: &#123; firstName: &#39;john&#39;, deleted: false &#125;</code> 传递给 finder,那么 <code>deleted</code> 作用域将被覆盖.</p>
<h3 id="合并-include"><a href="#合并-include" class="headerlink" title="合并 include"></a>合并 include</h3><p>Include 是根据包含的模型递归合并的. 这是一个非常强大的合并,在 v5 上添加,并通过示例更好地理解.</p>
<p>考虑四种模型:Foo,Bar,Baz和Qux,具有如下多种关联:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qux</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Foo.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize &#125;);</span><br><span class="line">Bar.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize &#125;);</span><br><span class="line">Baz.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize &#125;);</span><br><span class="line">Qux.init(&#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; sequelize &#125;);</span><br><span class="line">Foo.hasMany(Bar, &#123; <span class="attr">foreignKey</span>: <span class="string">&#x27;fooId&#x27;</span> &#125;);</span><br><span class="line">Bar.hasMany(Baz, &#123; <span class="attr">foreignKey</span>: <span class="string">&#x27;barId&#x27;</span> &#125;);</span><br><span class="line">Baz.hasMany(Qux, &#123; <span class="attr">foreignKey</span>: <span class="string">&#x27;bazId&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>现在,考虑Foo上定义的以下四个作用域:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">includeEverything</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: &#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="built_in">this</span>.Bar,</span><br><span class="line">      <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: <span class="built_in">this</span>.Baz,</span><br><span class="line">        <span class="attr">include</span>: <span class="built_in">this</span>.Qux</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">limitedBars</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="built_in">this</span>.Bar,</span><br><span class="line">      <span class="attr">limit</span>: <span class="number">2</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">limitedBazs</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="built_in">this</span>.Bar,</span><br><span class="line">      <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: <span class="built_in">this</span>.Baz,</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">2</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">excludeBazName</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="built_in">this</span>.Bar,</span><br><span class="line">      <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: <span class="built_in">this</span>.Baz,</span><br><span class="line">        <span class="attr">attributes</span>: &#123;</span><br><span class="line">          <span class="attr">exclude</span>: [<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这四个作用域可以很容易地深度合并,例如通过调用 <code>Foo.scope(&#39;includeEverything&#39;, &#39;limitedBars&#39;, &#39;limitedBazs&#39;, &#39;excludeBazName&#39;).findAll()</code>,这完全等同于调用以下内容:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Foo.findAll(&#123;</span><br><span class="line">  <span class="attr">include</span>: &#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="built_in">this</span>.Bar,</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="built_in">this</span>.Baz,</span><br><span class="line">      <span class="attr">limit</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">attributes</span>: &#123;</span><br><span class="line">        <span class="attr">exclude</span>: [<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">include</span>: <span class="built_in">this</span>.Qux</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>观察四个作用域如何合并为一个. 根据所包含的模型合并作用域的include. 如果一个作用域包括模型A而另一个作用域包括模型B,则合并结果将包括模型A和B.另一方面,如果两个作用域包括相同的模型A,但具有不同的参数(例如嵌套include或其他属性) ,这些将以递归方式合并,如上所示.</p>
<p>无论应用于作用域的顺序如何,上面说明的合并都以完全相同的方式工作. 如果某个参数由两个不同的作用域设置,那么只会该顺序产生差异 - 这不是上述示例的情况,因为每个作用域都做了不同的事情.</p>
<p>这种合并策略的工作方式与传递给<code>.findAll</code>,<code>.findOne</code>等的参数完全相同.</p>
<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><p>Sequelize 与关联有两个不同但相关的作用域概念. 差异是微妙但重要的:</p>
<ul>
<li><strong>关联作用域</strong> 允许你在获取和设置关联时指定默认属性 - 在实现多态关联时很有用. 当使用<code>get</code>,<code>set</code>,<code>add</code>和<code>create</code>相关联的模型函数时,这个作用域仅在两个模型之间的关联上被调用</li>
<li><strong>关联模型上的作用域</strong> 允许你在获取关联时应用默认和其他作用域,并允许你在创建关联时传递作用域模型. 这些作用域都适用于模型上的常规查找和通过关联查找.</li>
</ul>
<p>举个例子,思考模型Post和Comment. Comment与其他几个模型(图像,视频等)相关联,Comment和其他模型之间的关联是多态的,这意味着除了外键 <code>commentable_id</code> 之外,注释还存储一个<code>commentable</code>列.</p>
<p>可以使用 association scope 来实现多态关联:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.Post.hasMany(<span class="built_in">this</span>.Comment, &#123;</span><br><span class="line">  <span class="attr">foreignKey</span>: <span class="string">&#x27;commentable_id&#x27;</span>,</span><br><span class="line">  <span class="attr">scope</span>: &#123;</span><br><span class="line">    <span class="attr">commentable</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当调用 <code>post.getComments()</code> 时,这将自动添加 <code>WHERE commentable = &#39;post&#39;</code>. 类似地,当向帖子添加新的注释时,<code>commentable</code> 会自动设置为 <code>&#39;post&#39;</code>. 关联作用域是为了存活于后台,没有程序员不必担心 - 它不能被禁用. 有关更完整的多态性示例,请参阅 <a href="https://itfun.tv/documents/272#scopes">关联作用域</a></p>
<p>那么考虑那个Post的默认作用域只显示活动的帖子:<code>where: &#123; active: true &#125;</code>. 该作用域存在于相关联的模型(Post)上,而不是像<code>commentable</code> 作用域那样在关联上. 就像在调用<code>Post.findAll()</code> 时一样应用默认作用域,当调用 <code>User.getPosts()</code> 时,它也会被应用 - 这只会返回该用户的活动帖子.</p>
<p>要禁用默认作用域,将 <code>scope: null</code> 传递给 getter: <code>User.getPosts(&#123; scope: null &#125;)</code>. 同样,如果要应用其他作用域,请像这样:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User.getPosts(&#123; <span class="attr">scope</span>: [<span class="string">&#x27;scope1&#x27;</span>, <span class="string">&#x27;scope2&#x27;</span>]&#125;);</span><br></pre></td></tr></table></figure>

<p>如果要为关联模型上的作用域创建快捷方式,可以将作用域模型传递给关联. 考虑一个快捷方式来获取用户所有已删除的帖子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">Post.init(attributes, &#123;</span><br><span class="line">  <span class="attr">defaultScope</span>: &#123;</span><br><span class="line">    <span class="attr">where</span>: &#123;</span><br><span class="line">      <span class="attr">active</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">scopes</span>: &#123;</span><br><span class="line">    <span class="attr">deleted</span>: &#123;</span><br><span class="line">      <span class="attr">where</span>: &#123;</span><br><span class="line">        <span class="attr">deleted</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  sequelize,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">User.hasMany(Post); <span class="comment">// 常规 getPosts 关联</span></span><br><span class="line">User.hasMany(Post.scope(<span class="string">&#x27;deleted&#x27;</span>), &#123; <span class="attr">as</span>: <span class="string">&#x27;deletedPosts&#x27;</span> &#125;);</span><br><span class="line">User.getPosts(); <span class="comment">// WHERE active = true</span></span><br><span class="line">User.getDeletedPosts(); <span class="comment">// WHERE deleted = true</span></span><br></pre></td></tr></table></figure>

<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>extend/helper.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/helper.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 扩展一个格式日期的方法</span></span><br><span class="line">    <span class="function"><span class="title">formatTime</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(val * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> d.getFullYear();</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>模板中调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%=helper.formatTime(dateline)%&gt;</span><br></pre></td></tr></table></figure>

<p>其他地方调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.ctx.helper.formatTime(dateline)</span><br></pre></td></tr></table></figure>

<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>app/middleware/getIp.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">options: 中间件的配置项，框架会将 app.config[$&#123;middlewareName&#125;] 传递进来。</span></span><br><span class="line"><span class="comment">app: 当前应用 Application 的实例。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">option, app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个异步的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 通过option传入额外参数</span></span><br><span class="line">        <span class="built_in">console</span>.log(option);</span><br><span class="line">        <span class="built_in">console</span>.log(ctx.request.ip);</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>config/config.default.js（配置全局中间件，所有路由都会调用）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置全局中间件</span></span><br><span class="line">    config.middleware = [<span class="string">&#x27;getIp&#x27;</span>]; <span class="comment">// 注意驼峰式写法，如果中间件是a_bc.js，则要写成aBc</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置中间件参数</span></span><br><span class="line">    config.getIp = &#123;</span><br><span class="line">        <span class="attr">ceshi</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="comment">// 通用配置（以下是重点）</span></span><br><span class="line">        <span class="attr">enable</span>:<span class="literal">true</span>, <span class="comment">// 控制中间件是否开启。</span></span><br><span class="line">        <span class="attr">match</span>:<span class="string">&#x27;/news&#x27;</span>, <span class="comment">// 设置只有符合某些规则的请求才会经过这个中间件（匹配路由）</span></span><br><span class="line">        <span class="attr">ignore</span>:<span class="string">&#x27;/shop&#x27;</span> <span class="comment">// 设置符合某些规则的请求不经过这个中间件。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">        1. match 和 ignore 不允许同时配置</span></span><br><span class="line"><span class="comment">        2. 例如：match:&#x27;/news&#x27;，只要包含/news的任何页面都生效</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// match 和 ignore 支持多种类型的配置方式：字符串、正则、函数（推荐）</span></span><br><span class="line">        <span class="function"><span class="title">match</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">          <span class="comment">// 只有 ios 设备才开启</span></span><br><span class="line">          <span class="keyword">const</span> reg = <span class="regexp">/iphone|ipad|ipod/i</span>;</span><br><span class="line">          <span class="keyword">return</span> reg.test(ctx.get(<span class="string">&#x27;user-agent&#x27;</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="路由中使用"><a href="#路由中使用" class="headerlink" title="路由中使用"></a>路由中使用</h3><p>app/router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 局部中间件（如果只需要局部调用，则不需要在config.default.js中配置）</span></span><br><span class="line">    router.get(<span class="string">&#x27;/admin/:id&#x27;</span>, app.middleware.getIp(&#123; </span><br><span class="line">        <span class="attr">ceshi</span>: <span class="string">&quot;我是admin&quot;</span> </span><br><span class="line">    &#125;), controller.admin.index);</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="使用-Koa-的中间件（gzip压缩）"><a href="#使用-Koa-的中间件（gzip压缩）" class="headerlink" title="使用 Koa 的中间件（gzip压缩）"></a>使用 Koa 的中间件（gzip压缩）</h3><p>大大提高网站的访问速度（非常有效）</p>
<p>以 <a href="https://github.com/koajs/compress">koa-compress</a> 为例，在 Koa 中使用时:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compress = <span class="built_in">require</span>(<span class="string">&#x27;koa-compress&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123; <span class="attr">threshold</span>: <span class="number">2048</span> &#125;;</span><br><span class="line">app.use(compress(options));</span><br></pre></td></tr></table></figure>

<p>我们按照框架的规范来在应用中加载这个 Koa 的中间件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/middleware/compress.js</span></span><br><span class="line"><span class="comment">// koa-compress 暴露的接口(`(options) =&gt; middleware`)和框架对中间件要求一致</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">&#x27;koa-compress&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">middleware</span>: [ <span class="string">&#x27;compress&#x27;</span> ],</span><br><span class="line">  <span class="attr">compress</span>: &#123;</span><br><span class="line">    <span class="attr">threshold</span>: <span class="number">2048</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h1><h2 id="post"><a href="#post" class="headerlink" title="post"></a>post</h2><p>app/controller/home.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">addInput</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ctx.render(<span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">add</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过ctx.request.body获取post提交数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(ctx.request.body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>app/view/post.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">需要定义：?_csrf=&lt;%=ctx.csrf%&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;form action=&quot;/add?_csrf=&lt;%=ctx.csrf%&gt;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>app/router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/post&#x27;</span>, controller.home.addInput);</span><br><span class="line">router.post(<span class="string">&#x27;/add&#x27;</span>, controller.home.add);</span><br></pre></td></tr></table></figure>

<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.设置</span></span><br><span class="line">ctx.cookies.set(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;ceshi&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.获取</span></span><br><span class="line">ctx.cookies.get(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.设置中文(加密操作 encrypt: true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.设置（其他参数配置）</span></span><br><span class="line">ctx.cookies.set(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;ceshi&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>, <span class="comment">// 存储24小时，单位毫秒，关闭浏览器cookie还存在</span></span><br><span class="line">    <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// 设置键值对是否可以被 js 访问，默认为 true，不允许被 js 访问。</span></span><br><span class="line">    <span class="attr">signed</span>: <span class="literal">true</span>, <span class="comment">// 签名，防止用户前台修改</span></span><br><span class="line">    <span class="attr">encrypt</span>: <span class="literal">true</span> <span class="comment">// 加密，注意：get获取时需要解密</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 5.获取时解密</span></span><br><span class="line">ctx.cookies.get(<span class="string">&#x27;username&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">encrypt</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.清除cookie</span></span><br><span class="line">ctx.cookies.set(<span class="string">&#x27;username&#x27;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.设置</span></span><br><span class="line">ctx.session.username = <span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line"><span class="comment">// 2.获取</span></span><br><span class="line">ctx.session.username</span><br><span class="line"><span class="comment">// 3.默认配置（全局配置，config/config.default.js）</span></span><br><span class="line"><span class="built_in">exports</span>.session = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;EGG_SESS&#x27;</span>, <span class="comment">// 设置cookies的key值</span></span><br><span class="line">  <span class="attr">maxAge</span>: <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>, <span class="comment">// 1 天，过期时间</span></span><br><span class="line">  <span class="attr">httpOnly</span>: <span class="literal">true</span>, <span class="comment">// 设置键值对是否可以被 js 访问，默认为 true，不允许被 js 访问。</span></span><br><span class="line">  <span class="attr">encrypt</span>: <span class="literal">true</span>,<span class="comment">// 加密</span></span><br><span class="line">  <span class="attr">renew</span>:<span class="literal">true</span>    <span class="comment">// 每次刷新页面都会被延期</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4.动态配置</span></span><br><span class="line">ctx.session.maxAge = <span class="number">5000</span>; <span class="comment">// 5秒的过期时间</span></span><br><span class="line">ctx.session.username = <span class="string">&#x27;测试&#x27;</span>;</span><br><span class="line"><span class="comment">// 5.清空session</span></span><br><span class="line">ctx.session.username = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/schedule/ceshi.js</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 设置定时任务的执行间隔等配置</span></span><br><span class="line">    <span class="attr">schedule</span>: &#123;</span><br><span class="line">        <span class="attr">interval</span>: <span class="string">&#x27;5s&#x27;</span>, <span class="comment">// 每5秒执行一次</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;all&#x27;</span> <span class="comment">// 指定所有的 worker 都需要执行</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 任务</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">task</span>(<span class="params">ctx</span>)</span> &#123;</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="1-context"><a href="#1-context" class="headerlink" title="1. context"></a>1. context</h2><p>curl</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">ceshi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过ctx中的curl方法获取数据</span></span><br><span class="line">    <span class="keyword">let</span> r = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.curl(<span class="string">&#x27;http://www.phonegap100.com/appapi.php?a=getPortalList&amp;catid=20&amp;page=1&#x27;</span>);</span><br><span class="line">    <span class="comment">// 将buffer类型数据转为json类型</span></span><br><span class="line">    <span class="keyword">let</span> &#123; result &#125; = <span class="built_in">JSON</span>.parse(r.data)</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><a href="https://www.npmjs.com/package/egg-cache">https://www.npmjs.com/package/egg-cache</a><br><a href="https://www.npmjs.com/package/egg-redis">https://www.npmjs.com/package/egg-redis</a></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><a href="https://github.com/temool/egg-validate-plus">https://github.com/temool/egg-validate-plus</a></p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p><a href="https://www.npmjs.com/package/egg-jwt">https://www.npmjs.com/package/egg-jwt</a></p>
<p>前端访问：header头添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Authorization:&quot;Bearer token值&quot;</span></span><br><span class="line"><span class="attr">Authorization</span>:<span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6MTIzLCJpYXQiOjE1NzkxOTQxNTN9.Ml5B02ZPfYo78QwJic-Jdp2LUi2_AU0RGNgPhhJH--o&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>egg</category>
      </categories>
      <tags>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>html&amp;css</title>
    <url>/posts/140ab620.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回顾一下面试中常问的<code>html</code>和<code>css</code>，温故而知新</p>
<h2 id="DOCTYPE-⽂档类型-的作⽤"><a href="#DOCTYPE-⽂档类型-的作⽤" class="headerlink" title="DOCTYPE(⽂档类型) 的作⽤"></a>DOCTYPE(⽂档类型) 的作⽤</h2><p>DOCTYPE是<code>html5</code>中一种标准通用标记语言的文档类型声明，它的目的是告诉<code>浏览器（解析器）应该以什么样（html或xhtml）的文档类型定义来解析文档</code>，<br>不同的渲染模式会影响浏览器对<code>css</code>代码甚至<code>JavaScript</code>脚本的解析。</p>
<p><strong>注意：</strong><br>必须声明在HTML文件中的第一行</p>
<h3 id="浏览器渲染页面的两种模式（document-compatMode）"><a href="#浏览器渲染页面的两种模式（document-compatMode）" class="headerlink" title="浏览器渲染页面的两种模式（document.compatMode）"></a>浏览器渲染页面的两种模式（document.compatMode）</h3><ul>
<li>css1Compat: 标准模式（Strick mode）默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。</li>
<li>BackCompat: 怪异模式(混杂模式)(Quick mode)，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。</li>
</ul>
<h2 id="你知道html中哪些语义化标签"><a href="#你知道html中哪些语义化标签" class="headerlink" title="你知道html中哪些语义化标签"></a>你知道html中哪些语义化标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">header</span><br><span class="line">main</span><br><span class="line">aside</span><br><span class="line">section</span><br><span class="line">article</span><br><span class="line">footer</span><br><span class="line">canvas</span><br><span class="line">video</span><br><span class="line">audio</span><br></pre></td></tr></table></figure>

<h2 id="为什么会有语义化标签出现"><a href="#为什么会有语义化标签出现" class="headerlink" title="为什么会有语义化标签出现"></a>为什么会有语义化标签出现</h2><ul>
<li>利于开发：结构清晰、可读性高、方便维护</li>
<li>利于SEO：方便爬虫根据语义标签确定<code>页面结构</code>和<code>关键字</code>的权重<ul>
<li>title、description、keyword</li>
</ul>
</li>
</ul>
<h2 id="meta-viewport是做什么的，怎么写？"><a href="#meta-viewport是做什么的，怎么写？" class="headerlink" title="meta viewport是做什么的，怎么写？"></a>meta viewport是做什么的，怎么写？</h2><p><strong>禁止页面在移动端缩放</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>name为viewport表示移动设备使用</li>
<li>content定义了viewport的属性：<ul>
<li>width表示宽度为设备宽度（兼容苹果）</li>
<li>initial-scale表示<code>设备与视口</code>的缩放比率（兼容IE）</li>
</ul>
</li>
</ul>
<h2 id="你用过哪些-meta-标签属性"><a href="#你用过哪些-meta-标签属性" class="headerlink" title="你用过哪些 meta 标签属性"></a>你用过哪些 meta 标签属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义网页 文档的字符集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网页作者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;开源技术团队&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;website&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页版权信息 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2020-2021 demo.com&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页关键字, 用于SEO --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;meta,html&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 网页描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页描述&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索引擎索引方式，一般为all，不用深究 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 移动端常用视口设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  viewport参数详解：</span></span><br><span class="line"><span class="comment">  width：宽度（数值 / device-width）（默认为980 像素）</span></span><br><span class="line"><span class="comment">  height：高度（数值 / device-height）</span></span><br><span class="line"><span class="comment">  initial-scale：初始的缩放比例 （范围从&gt;0 到10）</span></span><br><span class="line"><span class="comment">  minimum-scale：允许用户缩放到的最小比例</span></span><br><span class="line"><span class="comment">  maximum-scale：允许用户缩放到的最大比例</span></span><br><span class="line"><span class="comment">  user-scalable：用户是否可以手动缩 (no,yes)</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>content</code>参数有一下六种</p>
<ul>
<li><code>width viewport</code>: 宽度(数值/device-width)</li>
<li><code>height viewport</code>: 高度(数值/device-height)</li>
<li><code>initial-scale</code>: 初始缩放比例</li>
<li><code>maximum-scale</code>: 最大缩放比例</li>
<li><code>minimum-scale</code>: 最小缩放比例</li>
<li><code>user-scalable</code>: 是否允许用户缩放(yes/no）</li>
</ul>
<p><strong>搜索引擎索引方式：</strong></p>
<ul>
<li><code>all</code>：文件将被检索，且页面上的链接可以被查询；</li>
<li><code>none</code>：文件将不被检索，且页面上的链接不可以被查询；</li>
<li><code>index</code>：文件将被检索</li>
<li><code>follow</code>：页面上的链接可以被查询；</li>
<li><code>noindex</code>：文件将不被检索</li>
<li><code>nofollow</code>：页面上的链接不可以被查询。</li>
</ul>
<h2 id="script标签中defer和async的区别"><a href="#script标签中defer和async的区别" class="headerlink" title="script标签中defer和async的区别"></a>script标签中defer和async的区别</h2><p>如果没有<code>defer</code>或<code>async</code>属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样<br>就阻塞了后续文档的加载。</p>
<p><strong>defer和async属性都是去异步加载外部的JS脚本文件，他们都不会阻塞页面的解析</strong>，区别如下：</p>
<ul>
<li>执行顺序：<ul>
<li>多个带async属性的标签，不能保证加载的顺序</li>
<li>多个带defer属性的标签，按照加载顺序执行</li>
</ul>
</li>
<li>脚本是否并行执行<ul>
<li>async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行执行的，即异步执行</li>
<li>defer属性，加载后续文档的过程和js脚本的加载是并行的，js脚本需要等到文档所有元素解析完成之后才执行，<code>DOMContentLoaded</code><br>事件触发执行之前</li>
</ul>
</li>
</ul>
<h2 id="HTML、XML、XHTML-的区别"><a href="#HTML、XML、XHTML-的区别" class="headerlink" title="HTML、XML、XHTML 的区别"></a>HTML、XML、XHTML 的区别</h2><ul>
<li><code>HTML</code>：超文本标记语言，是语法较为松散、不严的<code>web</code>语言；</li>
<li><code>XML</code>：可扩展的标记语言，主要用于存储数据和结构，可扩展 </li>
<li><code>XHTML</code>：可扩展的超文本标记语言，基于<code>XML</code>，作用与<code>HTML</code>类似，但语法更严格</li>
</ul>
<h2 id="行内元素有哪些？块级元素有哪些？-空-void-元素有那些？"><a href="#行内元素有哪些？块级元素有哪些？-空-void-元素有那些？" class="headerlink" title="行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？"></a>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</h2><ul>
<li>行内元素： <code>a、b、span、img、input、select、strong</code></li>
<li>块级元素：<code>div、ul、li、dl、dt、dd、p</code></li>
<li>空元素：<code>&lt;br&gt;、&lt;hr&gt;、&lt;img /&gt;、&lt;link/&gt;</code></li>
</ul>
<h2 id="标签上title属性与alt属性的区别是什么"><a href="#标签上title属性与alt属性的区别是什么" class="headerlink" title="标签上title属性与alt属性的区别是什么"></a>标签上title属性与alt属性的区别是什么</h2><ul>
<li><code>alt</code>是为了在图片未能正常显示时（屏幕阅读器）给予文字说明。且长度必须少于100个英文字符或者用户必须保证替换文字尽可能的短。</li>
<li><code>title</code>属性为设置该属性的元素提供建议性的信息。使用<code>title</code>属性提供非本质的额外信息。</li>
</ul>
<h2 id="head-标签有什么作用，其中什么标签必不可少？"><a href="#head-标签有什么作用，其中什么标签必不可少？" class="headerlink" title="head 标签有什么作用，其中什么标签必不可少？"></a>head 标签有什么作用，其中什么标签必不可少？</h2><p>标签用于定义文档的头部，它是所有头部元素的容器。 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。</p>
<p>文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p>
<p>下面这些标签可用在 head 部分：<code>&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;</code>。</p>
<p>其中 <code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p>
<h2 id="src与href有什么区别"><a href="#src与href有什么区别" class="headerlink" title="src与href有什么区别"></a>src与href有什么区别</h2><p><code>src</code>用于替换当前元素；href用于在当前文档和引用资源之间确立联系；</p>
<p><code>src</code>是<code>source</code>的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；</p>
<p>而<code>href</code>是<code>Hypertext Reference</code>的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接。</p>
<h2 id="为什么利用多个域名来存储网站资源会更有效"><a href="#为什么利用多个域名来存储网站资源会更有效" class="headerlink" title="为什么利用多个域名来存储网站资源会更有效"></a>为什么利用多个域名来存储网站资源会更有效</h2><ul>
<li>CDN缓存更加方便</li>
<li>突破浏览器并发限制；</li>
<li>节约cookie宽带；</li>
<li>节约主域名的连接数，优化页面下响应速度；</li>
<li>防止不必要的安全问题；</li>
</ul>
<h2 id="对比一下cookie和session"><a href="#对比一下cookie和session" class="headerlink" title="对比一下cookie和session"></a>对比一下cookie和session</h2><p>cookie和session都是用来跟踪浏览器用户身份的会话方式。</p>
<p>区别:</p>
<p>1.保持状态：<br>cookie保存在浏览器端，session保存在服务器端</p>
<p>2.使用方式：</p>
<ul>
<li>cookie机制：<ul>
<li>如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。</li>
<li>如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。</li>
<li>Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它。</li>
</ul>
</li>
<li>session机制：<ul>
<li>当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。</li>
<li>通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将sessionid发送给服务器。如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后。</li>
</ul>
</li>
</ul>
<p>3.存储内容：</p>
<ul>
<li>cookie只能保存字符串类型，以文本的方式；</li>
<li>session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象(session中可含有多个对象)。</li>
</ul>
<p>4.存储的大小：</p>
<ul>
<li>cookie：单个cookie保存的数据不能超过4kb；</li>
<li>session大小没有限制。</li>
</ul>
<p>5.安全性：</p>
<ul>
<li>cookie：针对cookie所存在的攻击：Cookie欺骗，Cookie截获；</li>
<li>session的安全性大于cookie。</li>
</ul>
<p>原因如下：</p>
<ul>
<li><code>sessionID</code>存储在<code>cookie</code>中，若要攻破<code>session</code>首先要攻破<code>cookie</code>；</li>
<li><code>sessionID</code>是要有人登录，或者启动<code>session_start</code>才会有，所以攻破<code>cookie</code>也不一定能得到<code>sessionID</code>；</li>
<li>第二次启动<code>session_start</code>后，前一次的<code>sessionID</code>就是失效了，<code>session</code>过期后，<code>sessionID</code>也随之失效。</li>
<li><code>sessionID</code>是加密的</li>
</ul>
<p>6.缺点：</p>
<ul>
<li>cookie：<ul>
<li>大小受限</li>
<li>用户可以操作（禁用）cookie，使功能受限</li>
<li>安全性较低</li>
<li>有些状态不可能保存在客户端。</li>
<li>每次访问都要传送cookie给服务器，浪费带宽。</li>
<li>cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</li>
</ul>
</li>
<li>session：<ul>
<li>Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。</li>
<li>依赖于cookie（sessionID保存在cookie），如果禁用cookie，则要使用URL重写，不安全。</li>
<li>创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。</li>
</ul>
</li>
</ul>
<h2 id="HTML5的十大新特性"><a href="#HTML5的十大新特性" class="headerlink" title="HTML5的十大新特性"></a>HTML5的十大新特性</h2><ul>
<li>语义标签</li>
<li>增强型表单</li>
<li>视频和音频</li>
<li>Canvas绘图</li>
<li>SVG绘图</li>
<li>地理定位 Geolocation</li>
<li>拖放API</li>
<li>Web Worker</li>
<li>Web Storage</li>
<li>WebSocket</li>
</ul>
<h2 id="说一下-web-worker"><a href="#说一下-web-worker" class="headerlink" title="说一下 web worker"></a>说一下 web worker</h2><p>在 HTML 页面中，如果在执行脚本时，页面的状态是不可相应的，直到脚本执行完成后，页面才变成可相应。web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p>
<p><strong>如何创建 web worker：</strong></p>
<ol>
<li>检测浏览器对于 web worker 的支持性</li>
<li>创建 web worker 文件（js，回传函数等）</li>
<li>创建 web worker 对象</li>
</ol>
<h2 id="说一下-HTML5-drag-API"><a href="#说一下-HTML5-drag-API" class="headerlink" title="说一下 HTML5 drag API"></a>说一下 HTML5 drag API</h2><ul>
<li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li>
<li>darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li>
<li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li>
<li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li>
<li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。</li>
<li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li>
<li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。</li>
</ul>
]]></content>
      <categories>
        <category>html&amp;css</category>
      </categories>
      <tags>
        <tag>html&amp;css</tag>
      </tags>
  </entry>
</search>
